%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1506.m00.i125.n030.P.c25.270933473 Vector set of guns icons.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 6/26/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">selfi</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-06-25T08:59:45+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-06-25T08:59:45+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-06-25T08:59:45+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUHLrejQ3os&#xA;Zr+3jviOQtXlRZeNK14E8qU9sVVP0lp3/LVD/wAjF/rirv0lp3/LVD/yMX+uKu/SWnf8tUP/ACMX&#xA;+uKpfq3nDyvpK3H17VLWKa2jMklq08QmoF5gCNmDVYdB3xV5pqX/ADkp5YmmsrXy5Gtzd3U6xSvq&#xA;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&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0bb91ec2-229b-8a4a-8983-05c95c969b7a</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0bb91ec2-229b-8a4a-8983-05c95c969b7a</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5b67454d-3523-4ce7-84d1-da83d7d3f4b7</stRef:instanceID>
            <stRef:documentID>xmp.did:3bd67def-7719-8a41-94ef-461831502e61</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0bb91ec2-229b-8a4a-8983-05c95c969b7a</stEvt:instanceID>
                  <stEvt:when>2015-06-25T08:59:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
115.368 377.831 mo
132.272 377.831 li
132.779 379.761 133.937 382.611 136.566 385.307 cv
119.684 385.307 li
119.171 383.369 118.004 380.521 115.368 377.831 cv
cp
128.04 402.273 mo
118.573 414.575 li
117.892 415.445 116.937 416.073 116.364 416.073 cv
111.446 416.073 li
110.869 416.073 110.657 415.442 111.014 414.566 cv
115.248 404.148 li
115.307 404.003 115.372 403.857 115.435 403.712 cv
115.436 403.714 115.436 403.716 115.437 403.718 cv
115.46 403.666 115.484 403.604 115.508 403.541 cv
116.318 401.736 117.446 399.966 118.522 398.783 cv
117.082 400.582 116.161 404.341 116.318 404.341 cv
120.079 404.341 li
121.893 404.341 122.18 403.776 121.801 402.584 cv
121.525 401.718 121.329 401.152 121.329 400.112 cv
121.329 399.2 121.624 398.192 122.581 397.394 cv
126.812 397.485 li
128.25 397.516 130.621 398.975 128.04 402.273 cv
cp
96.7911 394.465 mo
42.0488 394.465 li
41.62 394.465 41.2723 394.117 41.2723 393.689 cv
41.2723 393.26 41.62 392.912 42.0488 392.912 cv
96.7911 392.912 li
97.2199 392.912 97.5676 393.26 97.5676 393.689 cv
97.5676 394.117 97.2199 394.465 96.7911 394.465 cv
cp
89.5036 423.42 mo
89.141 423.517 88.8227 423.282 88.6719 422.939 cv
85.0813 414.755 84.2666 406.434 84.2666 406.434 cv
84.1713 406.077 84.3805 405.713 84.733 405.609 cv
85.0965 405.493 85.501 405.695 85.5459 406.077 cv
85.7293 407.296 li
86.0881 409.864 87.1864 416.154 89.9848 422.588 cv
90.1345 422.932 89.8661 423.323 89.5036 423.42 cv
cp
85.8351 424.72 mo
85.4726 424.817 85.1542 424.583 85.0034 424.239 cv
81.4128 416.056 80.5981 407.734 80.5981 407.734 cv
80.5014 407.372 80.7168 406.999 81.0794 406.903 cv
81.4419 406.806 81.8143 407.021 81.911 407.384 cv
81.911 407.384 82.6757 415.518 86.3163 423.889 cv
86.466 424.233 86.1976 424.624 85.8351 424.72 cv
cp
82.1666 426.021 mo
81.8041 426.118 81.4858 425.884 81.335 425.54 cv
77.7443 417.356 76.9297 409.035 76.9297 409.035 cv
76.8329 408.672 77.0484 408.3 77.4109 408.203 cv
77.7734 408.106 78.1458 408.322 78.2426 408.684 cv
78.2426 408.684 79.0072 416.819 82.6479 425.189 cv
82.7975 425.534 82.5292 425.924 82.1666 426.021 cv
cp
204.584 385.669 mo
193.977 385.669 li
193.376 385.669 192.889 386.156 192.889 386.758 cv
192.889 387.086 li
162.784 387.086 li
162.444 386.056 161.485 385.307 160.34 385.307 cv
151.093 385.307 li
147.772 385.03 138.732 382.82 136.377 377.831 cv
136.719 377.831 li
136.908 377.831 137.061 377.677 137.061 377.488 cv
137.061 371.562 li
137.061 371.373 136.908 371.22 136.719 371.22 cv
89.0166 371.22 li
88.8275 371.22 88.6742 371.373 88.6742 371.562 cv
88.6742 377.488 li
88.6742 377.677 88.8275 377.831 89.0166 377.831 cv
103.777 377.831 li
108.617 377.831 114.366 379.976 115.815 385.307 cv
110.779 385.307 li
110.258 385.307 109.775 385.464 109.368 385.729 cv
109.363 385.729 li
109.363 390.79 li
109.363 392.217 110.521 393.374 111.948 393.374 cv
139.687 393.374 li
110.411 394.52 li
108.799 394.558 107.177 393.29 106.786 391.688 cv
105.525 385.729 li
41.8547 385.729 li
37.9951 385.729 35.595 388.858 36.494 392.718 cv
42.8253 417.76 li
43.2544 419.221 44.6795 420.297 45.9312 420.297 cv
45.9312 420.297 52.7255 420.297 56.0256 420.297 cv
60.1021 420.297 56.1312 417.438 56.524 416.59 cv
59.1171 410.989 66.2705 406.669 73.7588 404.517 cv
74.0645 405.028 74.273 405.411 74.273 405.53 cv
74.273 417.954 80.4022 428.597 80.4022 428.597 cv
80.559 429.046 81.0498 429.282 81.4983 429.125 cv
93.0033 425.102 li
93.4518 424.945 93.6883 424.455 93.5315 424.006 cv
93.5315 424.006 89.6487 415.706 88.2713 403.194 cv
92.0696 401.732 95.3584 400.433 98.2037 399.27 cv
98.1702 399.3 98.15 399.318 98.15 399.318 cv
102.421 397.765 103.974 396.6 105.527 398.93 cv
107.079 401.259 105.138 403.977 103.003 406.5 cv
100.868 409.024 100.479 414.265 100.479 416.401 cv
100.479 418.536 100.479 419.895 103.003 419.895 cv
105.527 419.895 112.903 419.895 115.427 419.895 cv
117.95 419.895 130.568 402.618 132.704 400.483 cv
134.779 398.407 135.208 395.965 150.209 395.83 cv
150.209 396.187 li
148.597 396.187 li
147.954 396.187 147.433 396.708 147.433 397.352 cv
147.433 403.407 148.577 405.74 147.433 416.99 cv
147.367 417.63 147.954 418.155 148.597 418.155 cv
154.28 418.155 li
154.924 418.155 155.735 417.565 155.445 416.99 cv
154.432 414.985 154.697 397.352 154.697 397.352 cv
154.697 396.708 154.175 396.187 153.532 396.187 cv
151.79 396.187 li
151.79 395.529 li
152.361 394.785 152.491 393.901 152.512 393.374 cv
160.34 393.374 li
161.757 393.374 162.905 392.233 162.922 390.82 cv
192.889 390.82 li
192.889 390.91 li
192.889 391.511 193.376 391.999 193.977 391.999 cv
204.584 391.999 li
205.186 391.999 205.673 391.511 205.673 390.91 cv
205.673 386.758 li
205.673 386.156 205.186 385.669 204.584 385.669 cv
cp
.2 .203922 .211765 rgb
f
278.16 384.378 mo
278.16 381.285 li
303.331 381.285 li
306.52 383.297 li
318.371 383.297 li
318.371 383.431 318.371 383.813 318.371 384.378 cv
294.519 384.378 li
294.519 383.85 li
292.306 383.85 li
292.306 384.378 li
278.16 384.378 li
cp
295.882 389.501 mo
318.371 389.501 li
318.371 389.804 318.371 390.109 318.371 390.414 cv
295.882 390.414 li
295.882 389.501 li
cp
332.499 394.644 mo
332.499 393.311 333.579 392.23 334.912 392.23 cv
337.293 392.23 li
337.551 392.23 li
348.22 392.23 li
349.344 392.23 350.28 393.002 350.549 394.042 cv
350.109 393.454 349.413 393.069 348.623 393.069 cv
335.315 393.069 li
333.982 393.069 332.901 394.149 332.901 395.482 cv
332.901 399.338 li
332.499 394.644 li
cp
337.012 398.934 mo
336.982 397.602 338.038 396.521 339.371 396.521 cv
344.374 396.521 li
344.371 396.576 344.374 396.63 344.369 396.685 cv
344.254 398.01 343.741 399.204 342.957 400.16 cv
342.408 400.831 342.538 401.255 343.376 401.035 cv
344.717 400.685 345.884 399.896 346.73 398.828 cv
346.729 398.862 346.735 398.894 346.732 398.928 cv
346.654 400.005 li
346.556 401.334 345.397 402.412 344.064 402.412 cv
339.505 402.412 li
338.172 402.412 337.067 401.332 337.036 399.999 cv
337.012 398.934 li
cp
373.392 394.596 mo
373.49 394.459 373.82 394.374 374.407 394.374 cv
408.661 394.374 li
409.994 394.374 411.074 395.454 411.074 396.787 cv
411.074 407.868 li
408.514 397.873 li
408.514 396.54 407.434 395.459 406.101 395.459 cv
373.392 394.596 li
cp
290.943 389.501 mo
290.943 390.414 li
270.367 390.414 li
270.367 393.616 li
286.845 393.616 li
288.354 396.068 290.627 400.486 290.182 404.269 cv
289.526 409.843 289.151 413.029 289.151 413.029 cv
298.259 413.029 li
298.259 413.029 300.458 413.408 300.458 410.008 cv
300.458 407.531 299.909 403.845 298.833 400.089 cv
297.971 397.084 297.929 394.818 298.936 393.616 cv
330.99 393.616 li
318.371 394.711 li
318.371 396.04 318.371 396.674 318.371 397.09 cv
318.371 398.798 319.13 399.747 321.217 399.747 cv
322.607 399.747 328.877 399.747 332.911 399.747 cv
334.068 403.372 li
334.185 403.736 334.713 404.021 335.253 404.021 cv
346.979 404.021 li
347.519 404.021 348.083 403.736 348.246 403.372 cv
349.423 400.738 li
350.755 402.924 351.955 405.545 351.955 407.906 cv
351.955 410.691 351.955 412.85 351.955 414.275 cv
351.955 415.567 352.626 416.254 353.617 416.254 cv
355.78 416.254 359.468 416.254 361.022 416.254 cv
362.957 416.254 362.981 415.31 362.981 413.784 cv
362.981 411.401 361.723 407.714 360.114 403.921 cv
357.816 398.504 358.653 395.512 364.814 397.38 cv
403.322 414.227 li
409.392 416.883 415.328 419.718 415.328 412.478 cv
415.328 391.828 li
415.328 390.051 414.496 388.742 408.425 388.742 cv
370.934 388.742 li
366.369 388.597 360.708 387.709 357.457 383.239 cv
352.579 383.239 345.447 383.239 338.604 383.239 cv
337.551 390.463 li
337.551 380.413 li
337.551 380.356 337.566 380.303 337.583 380.252 cv
336.287 380.252 li
336.287 378.822 li
334.879 378.822 li
334.879 380.252 li
330.655 380.252 li
330.655 378.241 li
328.946 378.241 li
328.946 376.71 li
327.538 376.71 li
327.538 378.241 li
326.784 378.241 li
326.784 378.314 li
326.784 378.629 326.529 378.885 326.213 378.885 cv
324.998 378.885 li
324.682 378.885 324.426 378.629 324.426 378.314 cv
324.426 378.241 li
322.408 378.241 li
322.408 378.314 li
322.408 378.629 322.152 378.885 321.836 378.885 cv
320.622 378.885 li
320.306 378.885 320.05 378.629 320.05 378.314 cv
320.05 378.241 li
318.032 378.241 li
318.032 378.314 li
318.032 378.629 317.776 378.885 317.46 378.885 cv
316.246 378.885 li
315.93 378.885 315.674 378.629 315.674 378.314 cv
315.674 378.241 li
313.656 378.241 li
313.656 378.314 li
313.656 378.629 313.4 378.885 313.084 378.885 cv
311.869 378.885 li
311.554 378.885 311.298 378.629 311.298 378.314 cv
311.298 378.241 li
309.28 378.241 li
309.28 378.314 li
309.28 378.629 309.024 378.885 308.708 378.885 cv
307.493 378.885 li
307.177 378.885 306.921 378.629 306.921 378.314 cv
306.921 378.241 li
304.904 378.241 li
304.904 378.314 li
304.904 378.629 304.648 378.885 304.332 378.885 cv
303.117 378.885 li
302.801 378.885 302.545 378.629 302.545 378.314 cv
302.545 378.241 li
300.527 378.241 li
300.527 378.314 li
300.527 378.629 300.271 378.885 299.956 378.885 cv
298.741 378.885 li
298.425 378.885 298.169 378.629 298.169 378.314 cv
298.169 378.241 li
296.151 378.241 li
296.151 378.314 li
296.151 378.629 295.895 378.885 295.579 378.885 cv
294.365 378.885 li
294.049 378.885 293.793 378.629 293.793 378.314 cv
293.793 378.241 li
291.775 378.241 li
291.775 378.314 li
291.775 378.629 291.519 378.885 291.203 378.885 cv
289.988 378.885 li
289.673 378.885 289.417 378.629 289.417 378.314 cv
289.417 378.241 li
287.399 378.241 li
287.399 378.314 li
287.399 378.629 287.143 378.885 286.827 378.885 cv
285.612 378.885 li
285.297 378.885 285.041 378.629 285.041 378.314 cv
285.041 378.241 li
283.023 378.241 li
283.023 378.314 li
283.023 378.629 282.767 378.885 282.451 378.885 cv
281.236 378.885 li
280.92 378.885 280.664 378.629 280.664 378.314 cv
280.664 378.241 li
274.54 378.241 li
274.54 376.609 li
272.328 376.609 li
272.328 378.241 li
271.372 378.241 li
271.372 381.285 li
276.753 381.285 li
276.753 384.378 li
270.367 384.378 li
270.367 389.501 li
290.943 389.501 li
cp
f
202.136 174.301 mo
202.136 173.088 li
207.443 173.088 li
207.557 174.301 li
202.136 174.301 li
cp
200.879 170.679 mo
200.975 170.517 201.08 170.363 201.199 170.244 cv
206.662 164.767 li
207.217 170.679 li
200.879 170.679 li
cp
129.463 169.284 mo
129.213 169.221 128.946 169.182 128.66 169.182 cv
127.84 169.182 112.569 169.182 100.924 169.182 cv
102.87 164.96 li
103.4 163.811 104.836 162.846 106.073 162.808 cv
106.137 162.806 106.201 162.806 106.264 162.809 cv
127.476 163.91 li
128.553 163.966 129.463 164.801 129.463 165.734 cv
129.463 169.284 li
cp
117.672 175.529 mo
112.138 175.529 li
112.25 175.213 112.322 174.878 112.322 174.524 cv
112.322 174.169 112.25 173.834 112.138 173.518 cv
112.14 173.518 li
112.138 173.512 112.134 173.506 112.132 173.5 cv
112.088 173.378 112.036 173.263 111.978 173.149 cv
111.958 173.11 111.936 173.071 111.914 173.033 cv
111.855 172.928 111.793 172.827 111.722 172.73 cv
111.691 172.688 111.655 172.65 111.622 172.609 cv
111.513 172.477 111.396 172.356 111.267 172.244 cv
111.192 172.178 111.117 172.111 111.035 172.053 cv
110.974 172.009 110.908 171.974 110.844 171.935 cv
110.753 171.88 110.66 171.828 110.563 171.783 cv
110.499 171.753 110.435 171.727 110.369 171.701 cv
110.257 171.658 110.141 171.624 110.023 171.594 cv
109.965 171.58 109.908 171.563 109.849 171.552 cv
109.669 171.518 109.484 171.496 109.294 171.496 cv
109.104 171.496 108.919 171.518 108.739 171.552 cv
108.68 171.563 108.623 171.58 108.565 171.594 cv
108.447 171.624 108.331 171.658 108.219 171.701 cv
108.153 171.727 108.089 171.753 108.025 171.783 cv
107.928 171.828 107.835 171.88 107.744 171.935 cv
107.68 171.974 107.614 172.009 107.553 172.053 cv
107.471 172.111 107.396 172.178 107.321 172.244 cv
107.192 172.356 107.075 172.477 106.966 172.609 cv
106.933 172.65 106.897 172.688 106.866 172.73 cv
106.795 172.827 106.733 172.928 106.674 173.033 cv
106.652 173.071 106.631 173.11 106.61 173.149 cv
106.552 173.263 106.5 173.378 106.456 173.5 cv
106.454 173.506 106.45 173.512 106.448 173.518 cv
106.45 173.518 li
106.338 173.834 106.266 174.169 106.266 174.524 cv
106.266 174.878 106.338 175.213 106.45 175.529 cv
92.2032 175.529 li
91.648 175.529 91.1979 175.079 91.1979 174.524 cv
91.1979 173.968 91.648 173.518 92.2032 173.518 cv
106.266 173.518 li
106.268 171.848 107.623 170.494 109.294 170.494 cv
110.965 170.494 112.32 171.848 112.322 173.518 cv
117.672 173.518 li
118.227 173.518 118.677 173.968 118.677 174.524 cv
118.677 175.079 118.227 175.529 117.672 175.529 cv
cp
112.218 191.582 mo
112.218 192.127 111.776 192.568 111.231 192.568 cv
100.098 192.568 li
99.5531 192.568 99.1115 192.127 99.1115 191.582 cv
99.1115 187.602 li
99.8846 189.208 101.331 190.407 103.059 190.859 cv
103.863 191.069 103.987 190.663 103.461 190.02 cv
102.709 189.103 102.217 187.958 102.107 186.687 cv
102.069 186.243 102.082 185.806 102.137 185.381 cv
111.231 185.381 li
111.776 185.381 112.218 185.823 112.218 186.367 cv
112.218 191.582 li
cp
114.471 198.446 mo
114.471 198.03 114.808 197.693 115.224 197.693 cv
115.64 197.693 115.977 198.03 115.977 198.446 cv
115.977 217.417 li
115.977 217.833 115.64 218.17 115.224 218.17 cv
114.808 218.17 114.471 217.833 114.471 217.417 cv
114.471 198.446 li
cp
119.073 198.446 mo
119.073 198.03 119.41 197.693 119.826 197.693 cv
120.242 197.693 120.579 198.03 120.579 198.446 cv
120.579 217.417 li
120.579 217.833 120.242 218.17 119.826 218.17 cv
119.41 218.17 119.073 217.833 119.073 217.417 cv
119.073 198.446 li
cp
123.675 198.446 mo
123.675 198.03 124.012 197.693 124.428 197.693 cv
124.844 197.693 125.181 198.03 125.181 198.446 cv
125.181 217.417 li
125.181 217.833 124.844 218.17 124.428 218.17 cv
124.012 218.17 123.675 217.833 123.675 217.417 cv
123.675 198.446 li
cp
42.704 177.699 mo
41.4257 177.699 40.3894 178.735 40.3894 180.014 cv
37.9345 189.599 li
37.9345 178.972 li
37.9345 177.694 38.9708 176.658 40.2491 176.658 cv
73.0992 176.658 li
73.6622 176.658 73.9791 176.74 74.0729 176.871 cv
42.704 177.699 li
cp
249.674 172.964 mo
234.098 172.964 li
233.595 172.964 233.187 173.372 233.187 173.875 cv
233.187 174.301 li
210.111 174.301 li
210.111 163.157 li
210.111 160.056 206.847 160.763 206.211 161.711 cv
200.43 168.781 li
199.976 169.237 199.589 169.958 199.355 170.679 cv
199.125 170.679 li
199.125 170.915 li
138.824 168.978 li
137.218 168.927 135.895 169.64 135.804 170.587 cv
131.578 170.587 li
130.868 169.675 li
130.868 165.779 li
130.868 163.851 129.031 162.245 126.769 162.091 cv
100.983 160.337 li
98.7811 160.187 96.2017 161.469 95.1648 163.293 cv
91.8172 169.182 li
89.5804 169.182 88.0965 169.182 87.806 169.182 cv
87.3063 169.182 86.2623 170.689 85.0613 172.764 cv
85.0613 180.452 li
83.4897 172.796 li
37.8654 172.796 li
34.7366 172.796 31.996 173.699 31.996 178.818 cv
31.996 198.091 li
31.996 201.704 35.7933 201.949 38.922 200.801 cv
79.7607 184.438 li
82.7516 183.434 88.5668 182.992 90.2151 184.64 cv
92.0219 186.447 92.4234 188.956 90.8173 191.466 cv
89.2113 193.975 80.9803 205.519 80.9803 207.325 cv
80.9803 209.132 81.8837 209.032 82.9879 209.032 cv
84.092 209.032 88.2075 209.032 89.5124 209.032 cv
90.8173 209.032 93.6279 208.53 92.4234 206.522 cv
91.2188 204.515 98.3457 194.477 98.3457 194.477 cv
112.398 194.477 li
112.398 194.477 112.398 217.865 112.398 219.27 cv
112.398 220.676 112.8 220.977 114.306 220.977 cv
115.811 220.977 123.139 220.977 124.544 220.977 cv
125.949 220.977 127.054 220.876 127.054 219.672 cv
127.054 218.702 127.054 200.472 127.054 193.724 cv
113.348 194.259 li
128.158 191.667 li
128.158 182.947 li
128.176 182.938 128.194 182.928 128.212 182.918 cv
128.434 182.853 129.367 182.537 130.087 181.729 cv
130.088 172.859 li
130.722 181.729 li
135.17 181.729 li
135.786 172.675 li
135.786 182.432 li
135.786 183.43 137.161 184.15 138.824 184.043 cv
199.122 180.167 li
199.122 181.252 li
200.43 181.252 li
200.43 180.083 li
201.07 180.042 li
201.662 180.004 202.136 179.501 202.136 178.919 cv
202.136 177.413 li
207.849 177.413 li
208.163 180.762 li
210.111 180.762 li
210.111 177.413 li
233.187 177.413 li
233.187 177.996 li
233.187 178.499 233.595 178.907 234.098 178.907 cv
249.674 178.907 li
250.177 178.907 250.585 178.499 250.585 177.996 cv
250.585 173.875 li
250.585 173.372 250.177 172.964 249.674 172.964 cv
cp
f
187.216 304.736 mo
190.18 304.701 li
190.471 306.776 li
187.123 306.776 li
187.216 304.736 li
cp
120.147 304.186 mo
82.1328 304.186 li
81.8286 304.186 81.5819 303.94 81.5819 303.635 cv
81.5819 303.331 81.8286 303.085 82.1328 303.085 cv
120.147 303.085 li
120.451 303.085 120.698 303.331 120.698 303.635 cv
120.698 303.94 120.451 304.186 120.147 304.186 cv
cp
117.392 306.665 mo
101.829 306.665 li
101.296 306.665 100.864 306.234 100.864 305.701 cv
100.864 305.169 101.296 304.737 101.829 304.737 cv
117.392 304.737 li
117.925 304.737 118.357 305.169 118.357 305.701 cv
118.357 306.234 117.925 306.665 117.392 306.665 cv
cp
99.9999 318.835 mo
99.9999 320.44 98.6938 321.746 97.0887 321.746 cv
92.9762 321.746 li
91.3711 321.746 90.065 320.44 90.065 318.835 cv
90.065 317.179 li
90.7095 318.903 92.188 320.22 94.011 320.638 cv
94.1065 320.438 94.1997 320.236 94.2962 320.037 cv
93.9535 319.717 93.5773 319.294 93.2621 318.753 cv
92.7864 317.937 92.5137 316.988 92.5137 315.975 cv
92.5137 315.958 92.5161 315.942 92.5162 315.924 cv
92.6665 315.933 92.8193 315.939 92.9762 315.939 cv
98.76 315.878 li
99.5476 315.878 99.9999 316.977 99.9999 317.643 cv
99.9999 318.835 li
cp
114.825 316.381 mo
115.193 316.381 115.492 316.68 115.492 317.047 cv
115.492 317.047 116.062 332.654 124.532 341.028 cv
124.793 341.287 124.941 341.633 124.747 341.945 cv
124.553 342.258 124.09 342.421 123.83 342.16 cv
114.445 332.749 114.159 317.047 114.159 317.047 cv
114.159 316.68 114.457 316.381 114.825 316.381 cv
cp
70.159 313.927 mo
63.6573 313.927 li
63.4697 313.927 63.3177 313.775 63.3177 313.587 cv
63.3177 313.4 63.4697 313.248 63.6573 313.248 cv
70.159 313.248 li
70.3465 313.248 70.4986 313.4 70.4986 313.587 cv
70.4986 313.775 70.3465 313.927 70.159 313.927 cv
cp
70.159 315.577 mo
63.6573 315.577 li
63.4697 315.577 63.3177 315.425 63.3177 315.237 cv
63.3177 315.05 63.4697 314.897 63.6573 314.897 cv
70.159 314.897 li
70.3465 314.897 70.4986 315.05 70.4986 315.237 cv
70.4986 315.425 70.3465 315.577 70.159 315.577 cv
cp
63.1331 318.014 mo
39.0065 328.39 li
38.1203 328.771 37.4019 328.298 37.4019 327.333 cv
37.4019 323.292 li
37.4019 317.809 38.087 317.323 43.4727 317.323 cv
62.991 317.323 li
63.9556 317.323 64.0193 317.633 63.1331 318.014 cv
cp
36.8258 315.237 mo
36.8258 315.05 36.9779 314.897 37.1655 314.897 cv
43.6671 314.897 li
43.8547 314.897 44.0068 315.05 44.0068 315.237 cv
44.0068 315.425 43.8547 315.577 43.6671 315.577 cv
37.1655 315.577 li
36.9779 315.577 36.8258 315.425 36.8258 315.237 cv
cp
37.1655 313.248 mo
43.6671 313.248 li
43.8547 313.248 44.0068 313.4 44.0068 313.587 cv
44.0068 313.775 43.8547 313.927 43.6671 313.927 cv
37.1655 313.927 li
36.9779 313.927 36.8258 313.775 36.8258 313.587 cv
36.8258 313.4 36.9779 313.248 37.1655 313.248 cv
cp
45.9961 314.897 mo
52.4977 314.897 li
52.6853 314.897 52.8374 315.05 52.8374 315.237 cv
52.8374 315.425 52.6853 315.577 52.4977 315.577 cv
45.9961 315.577 li
45.8085 315.577 45.6564 315.425 45.6564 315.237 cv
45.6564 315.05 45.8085 314.897 45.9961 314.897 cv
cp
45.9961 313.248 mo
52.4977 313.248 li
52.6853 313.248 52.8374 313.4 52.8374 313.587 cv
52.8374 313.775 52.6853 313.927 52.4977 313.927 cv
45.9961 313.927 li
45.8085 313.927 45.6564 313.775 45.6564 313.587 cv
45.6564 313.4 45.8085 313.248 45.9961 313.248 cv
cp
54.8267 314.897 mo
61.3284 314.897 li
61.5159 314.897 61.668 315.05 61.668 315.237 cv
61.668 315.425 61.5159 315.577 61.3284 315.577 cv
54.8267 315.577 li
54.6391 315.577 54.4871 315.425 54.4871 315.237 cv
54.4871 315.05 54.6391 314.897 54.8267 314.897 cv
cp
54.8267 313.248 mo
61.3284 313.248 li
61.5159 313.248 61.668 313.4 61.668 313.587 cv
61.668 313.775 61.5159 313.927 61.3284 313.927 cv
54.8267 313.927 li
54.6391 313.927 54.4871 313.775 54.4871 313.587 cv
54.4871 313.4 54.6391 313.248 54.8267 313.248 cv
cp
208.785 308.234 mo
208.785 307.575 li
208.785 306.932 208.264 306.411 207.621 306.411 cv
191.314 306.411 li
191.186 306.411 191.064 306.437 190.948 306.475 cv
190.387 299.774 li
190.373 299.609 190.158 299.542 189.91 299.622 cv
187.007 300.558 li
186.81 300.621 186.648 300.792 186.64 300.942 cv
186.301 308.001 li
158.55 308.001 li
158.543 307.869 158.53 307.739 158.511 307.61 cv
158.54 307.508 158.561 307.403 158.561 307.292 cv
158.561 306.638 li
171.032 306.638 li
171.675 306.638 172.196 306.117 172.196 305.474 cv
172.196 302.121 li
172.196 301.478 171.675 300.957 171.032 300.957 cv
170.822 300.957 li
170.822 301.043 li
170.822 301.14 170.744 301.218 170.648 301.218 cv
170.082 301.218 li
169.986 301.218 169.908 301.14 169.908 301.043 cv
169.908 300.957 li
169.091 300.957 li
169.091 301.043 li
169.091 301.14 169.013 301.218 168.917 301.218 cv
168.351 301.218 li
168.255 301.218 168.176 301.14 168.176 301.043 cv
168.176 300.957 li
167.36 300.957 li
167.36 301.043 li
167.36 301.14 167.282 301.218 167.186 301.218 cv
166.62 301.218 li
166.523 301.218 166.445 301.14 166.445 301.043 cv
166.445 300.957 li
165.629 300.957 li
165.629 301.043 li
165.629 301.14 165.551 301.218 165.455 301.218 cv
164.889 301.218 li
164.792 301.218 164.714 301.14 164.714 301.043 cv
164.714 300.957 li
163.898 300.957 li
163.898 301.043 li
163.898 301.14 163.82 301.218 163.724 301.218 cv
163.158 301.218 li
163.061 301.218 162.983 301.14 162.983 301.043 cv
162.983 300.957 li
162.167 300.957 li
162.167 301.043 li
162.167 301.14 162.089 301.218 161.993 301.218 cv
161.427 301.218 li
161.33 301.218 161.252 301.14 161.252 301.043 cv
161.252 300.957 li
160.436 300.957 li
160.436 301.043 li
160.436 301.14 160.358 301.218 160.262 301.218 cv
159.695 301.218 li
159.599 301.218 159.521 301.14 159.521 301.043 cv
159.521 300.957 li
158.705 300.957 li
158.705 301.043 li
158.705 301.14 158.627 301.218 158.531 301.218 cv
157.964 301.218 li
157.868 301.218 157.79 301.14 157.79 301.043 cv
157.79 300.957 li
157.453 300.957 li
156.982 300.957 156.579 301.237 156.396 301.638 cv
135.078 301.638 li
135.078 303.786 li
135.078 305.392 136.384 306.698 137.989 306.698 cv
155.907 307.28 li
137.989 307.28 li
136.06 307.28 134.496 305.716 134.496 303.786 cv
134.496 300.584 li
134.496 300.497 134.503 300.412 134.509 300.326 cv
134.306 300.155 134.048 300.047 133.761 300.047 cv
120.287 300.047 li
120.287 300.269 li
120.287 300.319 120.246 300.36 120.195 300.36 cv
119.41 300.36 li
119.359 300.36 119.318 300.319 119.318 300.269 cv
119.318 300.047 li
118.484 300.047 li
118.484 300.269 li
118.484 300.319 118.443 300.36 118.392 300.36 cv
117.607 300.36 li
117.556 300.36 117.515 300.319 117.515 300.269 cv
117.515 300.047 li
116.681 300.047 li
116.681 300.269 li
116.681 300.319 116.64 300.36 116.589 300.36 cv
115.804 300.36 li
115.753 300.36 115.712 300.319 115.712 300.269 cv
115.712 300.047 li
114.878 300.047 li
114.878 300.269 li
114.878 300.319 114.837 300.36 114.786 300.36 cv
114.001 300.36 li
113.951 300.36 113.91 300.319 113.91 300.269 cv
113.91 300.047 li
113.075 300.047 li
113.075 300.269 li
113.075 300.319 113.034 300.36 112.983 300.36 cv
112.198 300.36 li
112.148 300.36 112.107 300.319 112.107 300.269 cv
112.107 300.047 li
111.272 300.047 li
111.272 300.269 li
111.272 300.319 111.231 300.36 111.18 300.36 cv
110.395 300.36 li
110.345 300.36 110.304 300.319 110.304 300.269 cv
110.304 300.047 li
109.469 300.047 li
109.469 300.269 li
109.469 300.319 109.428 300.36 109.378 300.36 cv
108.592 300.36 li
108.542 300.36 108.501 300.319 108.501 300.269 cv
108.501 300.047 li
107.666 300.047 li
107.666 300.269 li
107.666 300.319 107.625 300.36 107.575 300.36 cv
106.789 300.36 li
106.739 300.36 106.698 300.319 106.698 300.269 cv
106.698 300.047 li
105.863 300.047 li
105.863 300.269 li
105.863 300.319 105.822 300.36 105.772 300.36 cv
104.986 300.36 li
104.936 300.36 104.895 300.319 104.895 300.269 cv
104.895 300.047 li
104.06 300.047 li
104.06 300.269 li
104.06 300.319 104.019 300.36 103.969 300.36 cv
103.183 300.36 li
103.133 300.36 103.092 300.319 103.092 300.269 cv
103.092 300.047 li
102.203 300.047 li
102.203 300.269 li
102.203 300.319 102.162 300.36 102.111 300.36 cv
101.326 300.36 li
101.275 300.36 101.234 300.319 101.234 300.269 cv
101.234 300.047 li
100.4 300.047 li
100.4 300.269 li
100.4 300.319 100.359 300.36 100.308 300.36 cv
99.5228 300.36 li
99.4723 300.36 99.4313 300.319 99.4313 300.269 cv
99.4313 300.047 li
98.5967 300.047 li
98.5967 300.269 li
98.5967 300.319 98.5557 300.36 98.5052 300.36 cv
97.7199 300.36 li
97.6693 300.36 97.6284 300.319 97.6284 300.269 cv
97.6284 300.047 li
96.7937 300.047 li
96.7937 300.269 li
96.7937 300.319 96.7528 300.36 96.7023 300.36 cv
95.9169 300.36 li
95.8664 300.36 95.8254 300.319 95.8254 300.269 cv
95.8254 300.047 li
94.9908 300.047 li
94.9908 300.269 li
94.9908 300.319 94.9499 300.36 94.8993 300.36 cv
94.114 300.36 li
94.0634 300.36 94.0225 300.319 94.0225 300.269 cv
94.0225 300.047 li
93.1879 300.047 li
93.1879 300.269 li
93.1879 300.319 93.1469 300.36 93.0964 300.36 cv
92.311 300.36 li
92.2605 300.36 92.2195 300.319 92.2195 300.269 cv
92.2195 300.047 li
91.3849 300.047 li
91.3849 300.269 li
91.3849 300.319 91.344 300.36 91.2934 300.36 cv
90.5081 300.36 li
90.4576 300.36 90.4166 300.319 90.4166 300.269 cv
90.4166 300.047 li
89.582 300.047 li
89.582 300.269 li
89.582 300.319 89.541 300.36 89.4905 300.36 cv
88.7051 300.36 li
88.6546 300.36 88.6136 300.319 88.6136 300.269 cv
88.6136 300.047 li
87.779 300.047 li
87.779 300.269 li
87.779 300.319 87.7381 300.36 87.6875 300.36 cv
86.9022 300.36 li
86.8516 300.36 86.8107 300.319 86.8107 300.269 cv
86.8107 300.047 li
85.9761 300.047 li
85.9761 300.269 li
85.9761 300.319 85.9351 300.36 85.8846 300.36 cv
85.0992 300.36 li
85.0487 300.36 85.0077 300.319 85.0077 300.269 cv
85.0077 300.047 li
84.7297 300.047 li
84.0866 300.047 83.5653 300.569 83.5653 301.212 cv
83.5653 302.573 li
82.4827 302.573 li
81.462 302.573 80.6082 303.249 80.3172 304.173 cv
78.5022 304.399 77.0598 305.816 76.7956 307.62 cv
73.4095 307.62 li
71.6101 307.62 70.1297 308.98 69.9382 310.729 cv
35.4144 310.729 li
34.7713 310.729 34.25 311.25 34.25 311.893 cv
34.25 330.728 li
34.25 331.371 34.8271 332.154 35.4144 331.892 cv
45.1584 327.546 66.9661 317.092 72.6568 317.092 cv
73.7618 317.092 85.5274 317.087 87.2255 317.069 cv
78.9286 317.833 li
78.9286 317.833 79.7793 320.324 78.3383 322.773 cv
76.0657 326.637 71.5205 333.227 71.5205 333.227 cv
71.5205 333.227 77.8837 336.863 81.2926 337.091 cv
84.7015 337.318 81.2926 335.727 83.5653 330.273 cv
85.8378 324.819 88.3377 319.137 89.474 318.683 cv
89.4828 318.48 li
89.4828 318.835 li
89.4828 320.764 91.0469 322.328 92.9762 322.328 cv
100.836 322.328 li
102.765 322.328 104.329 320.764 104.329 318.835 cv
104.329 318.414 li
105.21 327.091 108.237 339.318 116.745 349.817 cv
124.472 344.136 127.881 341.636 127.881 341.636 cv
127.881 341.636 118.087 333.688 117.11 314.906 cv
104.171 314.138 li
152.288 314.138 li
146.971 314.853 li
146.971 334.108 li
146.971 334.751 147.492 335.273 148.135 335.273 cv
152.169 335.273 li
152.813 335.273 153.334 334.751 153.334 334.108 cv
153.334 314.138 li
154.485 314.138 li
156.664 314.138 158.439 312.426 158.55 310.274 cv
190.153 310.274 li
190.168 310.904 190.681 311.41 191.314 311.41 cv
207.621 311.41 li
208.264 311.41 208.785 310.889 208.785 310.246 cv
208.785 310.042 li
209.06 309.834 209.24 309.508 209.24 309.138 cv
209.24 308.767 209.06 308.441 208.785 308.234 cv
cp
f
210.602 251.808 mo
209.998 251.808 li
209.998 250.757 li
210.602 250.757 li
210.602 251.808 li
cp
197.521 251.808 mo
197.521 252.93 li
196.246 252.93 li
196.246 252.078 li
196.246 251.864 196.072 251.69 195.857 251.69 cv
195.642 251.69 195.468 251.864 195.468 252.078 cv
195.468 252.93 li
194.755 252.93 li
194.755 252.078 li
194.755 251.864 194.581 251.69 194.367 251.69 cv
194.152 251.69 193.978 251.864 193.978 252.078 cv
193.978 252.93 li
193.115 252.93 li
193.115 251.808 li
168.926 251.808 li
168.163 255.682 li
168.163 250.757 li
206.617 250.757 li
206.617 251.808 li
197.521 251.808 li
cp
207.063 245.756 mo
207.165 245.508 207.49 245.508 207.788 245.756 cv
209.589 247.253 li
206.447 247.253 li
207.063 245.756 li
cp
131.044 251.303 mo
109.053 251.303 li
108.686 251.303 108.389 251.006 108.389 250.639 cv
108.389 250.272 108.686 249.975 109.053 249.975 cv
124.711 249.975 li
124.656 249.838 124.624 249.689 124.624 249.532 cv
124.624 249.316 124.686 249.116 124.788 248.942 cv
113.702 248.942 li
113.376 248.942 113.112 248.678 113.112 248.352 cv
113.112 248.025 113.376 247.761 113.702 247.761 cv
130.085 247.761 li
130.411 247.761 130.675 248.025 130.675 248.352 cv
130.675 248.678 130.411 248.942 130.085 248.942 cv
126.822 248.942 li
126.923 249.116 126.985 249.316 126.985 249.532 cv
126.985 249.689 126.953 249.838 126.898 249.975 cv
131.044 249.975 li
131.411 249.975 131.708 250.272 131.708 250.639 cv
131.708 251.006 131.411 251.303 131.044 251.303 cv
cp
104.798 259.077 mo
104.798 260.522 103.622 261.36 102.177 261.36 cv
98.8061 261.36 li
96.3971 261.36 96.7293 259.828 96.7293 258.776 cv
96.7293 258.516 96.9116 258.314 97.2178 258.156 cv
97.2225 258.746 97.3745 259.301 97.641 259.784 cv
98.1018 260.62 98.502 260.639 98.3135 260.068 cv
98.2023 259.731 98.1419 259.371 98.1419 258.997 cv
98.1419 258.584 98.2183 258.19 98.3516 257.823 cv
99.892 257.557 102.169 257.615 103.537 257.615 cv
104.288 257.615 104.798 258.268 104.798 259.077 cv
cp
90.94 256.288 mo
89.028 256.606 86.0206 261.526 86.0206 261.526 cv
86.0206 261.526 88.2512 255.949 90.8006 255.949 cv
97.4195 255.956 li
90.94 256.288 li
cp
59.1048 256.355 mo
59.1048 256.355 51.0798 260.534 46.1057 263.258 cv
42.8858 265.022 39.9069 265.309 39.9069 264.5 cv
39.9069 257.786 li
39.9069 256.977 41.8684 256.113 44.288 255.855 cv
59.5295 254.508 li
61.9491 254.251 60.8648 255.288 59.1048 256.355 cv
cp
215.364 250.757 mo
215.364 247.253 li
212.103 247.253 li
207.641 243.542 li
207.342 243.294 207.018 243.294 206.915 243.542 cv
205.388 247.253 li
133.101 247.253 li
132.609 255.077 li
132.609 246.683 132.258 246.629 131.887 246.44 cv
131.887 244.852 li
131.887 244.689 131.755 244.557 131.591 244.557 cv
130.744 244.557 li
130.744 244.993 li
130.744 245.156 130.612 245.288 130.449 245.288 cv
129.074 245.288 li
128.911 245.288 128.779 245.156 128.779 244.993 cv
128.779 244.557 li
127.27 244.557 li
127.27 244.993 li
127.27 245.156 127.138 245.288 126.975 245.288 cv
125.6 245.288 li
125.437 245.288 125.305 245.156 125.305 244.993 cv
125.305 244.557 li
123.797 244.557 li
123.797 244.993 li
123.797 245.156 123.665 245.288 123.502 245.288 cv
122.127 245.288 li
121.964 245.288 121.831 245.156 121.831 244.993 cv
121.831 244.557 li
120.323 244.557 li
120.323 244.993 li
120.323 245.156 120.191 245.288 120.028 245.288 cv
118.653 245.288 li
118.49 245.288 118.358 245.156 118.358 244.993 cv
118.358 244.557 li
116.849 244.557 li
116.849 244.993 li
116.849 245.156 116.717 245.288 116.554 245.288 cv
115.179 245.288 li
115.016 245.288 114.884 245.156 114.884 244.993 cv
114.884 244.557 li
113.376 244.557 li
113.376 244.993 li
113.376 245.156 113.244 245.288 113.081 245.288 cv
111.706 245.288 li
111.543 245.288 111.41 245.156 111.41 244.993 cv
111.41 244.557 li
109.902 244.557 li
109.902 244.993 li
109.902 245.156 109.77 245.288 109.607 245.288 cv
108.232 245.288 li
108.069 245.288 107.937 245.156 107.937 244.993 cv
107.937 244.557 li
107.592 244.557 li
107.429 244.557 107.297 244.689 107.297 244.852 cv
107.297 246.202 li
98.5823 246.202 li
106.611 245.597 li
106.611 244.618 105.818 243.826 104.84 243.826 cv
102.018 243.826 li
101.002 242.81 li
100.428 242.235 99.4967 242.235 98.9223 242.81 cv
97.6638 244.068 li
97.1385 244.376 96.7847 244.944 96.7847 245.597 cv
96.7847 246.443 li
95.9631 246.663 95.0566 247.014 94.3244 247.423 cv
80.8101 257.079 li
80.8101 257.079 88.791 250.039 88.7108 249.956 cv
88.2612 249.492 86.765 249.358 85.66 249.532 cv
82.8558 249.975 34.0033 255.288 34.0033 255.288 cv
34.0476 255.403 li
33.3767 255.616 32.8718 256.346 32.8718 257.223 cv
32.8718 276.493 li
32.8718 277.737 33.663 278.454 34.6115 278.092 cv
39.7608 276.131 li
40.5294 275.838 41.1072 274.736 41.0711 273.671 cv
40.967 270.609 li
66.3902 263.689 li
67.3567 263.426 67.975 262.519 67.9091 261.556 cv
80.0023 258.264 li
80.0023 260.749 li
80.0023 260.912 80.1345 261.044 80.2975 261.044 cv
81.7137 261.044 li
82.1574 261.046 86.4759 261.177 83.9022 266.186 cv
83.9022 266.186 81.3609 270.831 80.5137 272.38 cv
80.4246 272.543 79.4458 274.573 79.6088 274.573 cv
79.6088 274.573 88.8807 277.287 89.2514 277.378 cv
90.7273 277.87 89.5204 274.441 89.6096 274.278 cv
96.1769 261.543 li
96.6027 261.728 97.0719 261.832 97.5656 261.832 cv
103.174 261.832 li
104.81 261.832 107.387 259.354 109.633 257.794 cv
104.342 257.064 li
129.874 257.064 li
130.553 257.064 131.173 256.823 131.651 256.438 cv
131.903 256.438 li
131.953 257.372 132.723 258.115 133.67 258.115 cv
165.014 258.115 li
166.146 250.713 li
166.146 258.115 li
166.392 258.115 li
167.339 258.115 168.109 257.372 168.158 256.438 cv
193.115 256.438 li
193.115 255.316 li
193.978 255.316 li
193.978 256.161 li
193.978 256.376 194.152 256.55 194.367 256.55 cv
194.581 256.55 194.755 256.376 194.755 256.161 cv
194.755 255.316 li
195.468 255.316 li
195.468 256.161 li
195.468 256.376 195.642 256.55 195.857 256.55 cv
196.072 256.55 196.246 256.376 196.246 256.161 cv
196.246 255.316 li
197.521 255.316 li
197.521 256.438 li
206.617 256.438 li
206.617 257.502 li
206.617 257.785 206.847 258.015 207.131 258.015 cv
209.485 258.015 li
209.768 258.015 209.998 257.785 209.998 257.502 cv
209.998 256.438 li
210.602 256.438 li
210.602 257.502 li
210.602 257.785 210.832 258.015 211.115 258.015 cv
213.47 258.015 li
213.753 258.015 213.983 257.785 213.983 257.502 cv
213.983 256.322 li
214.683 256.018 215.189 255.149 215.189 254.123 cv
215.189 253.097 214.683 252.228 213.983 251.924 cv
213.983 250.757 li
215.364 250.757 li
cp
f
172.99 105.705 mo
104.21 105.705 li
103.9 105.705 103.649 105.454 103.649 105.144 cv
103.649 104.834 103.9 104.583 104.21 104.583 cv
172.99 104.583 li
173.3 104.583 173.552 104.834 173.552 105.144 cv
173.552 105.454 173.3 105.705 172.99 105.705 cv
cp
102.132 124.044 mo
96.9597 124.044 li
95.3199 124.044 93.9906 122.715 93.9906 121.075 cv
93.9906 120.885 94.1869 120.276 94.2211 120.096 cv
85.4346 118.298 li
94.2504 118.298 li
94.6735 120.167 95.8152 121.841 97.4863 122.898 cv
98.0227 123.237 98.1727 123.035 97.8594 122.483 cv
97.1482 121.23 96.8065 119.774 96.9172 118.298 cv
103.173 118.298 li
104.298 118.72 105.101 119.802 105.101 121.075 cv
105.101 122.715 103.771 124.044 102.132 124.044 cv
cp
115.056 97.2269 mo
116.052 97.2269 li
116.831 99.0295 118.624 100.292 120.712 100.292 cv
122.801 100.292 124.593 99.0295 125.372 97.2269 cv
125.788 97.2269 li
125.788 101.825 li
115.056 101.825 li
115.056 97.2269 li
cp
120.774 92.9321 mo
121.859 92.9321 122.739 93.8119 122.739 94.8972 cv
122.739 95.9825 121.859 96.8624 120.774 96.8624 cv
119.688 96.8624 118.808 95.9825 118.808 94.8972 cv
118.808 93.8119 119.688 92.9321 120.774 92.9321 cv
cp
293.588 103.931 mo
250.68 103.931 li
250.046 103.931 249.531 104.446 249.531 105.081 cv
249.531 106.23 li
207.147 106.23 li
207.306 105.782 li
207.558 105.079 207.257 104.48 206.622 104.48 cv
200.281 104.48 li
199.549 102.913 197.963 101.825 196.119 101.825 cv
190.485 101.825 li
190.485 102.041 li
190.485 102.133 190.411 102.207 190.319 102.207 cv
188.688 102.207 li
188.596 102.207 188.522 102.133 188.522 102.041 cv
188.522 101.825 li
186.367 101.825 li
186.367 102.041 li
186.367 102.133 186.292 102.207 186.2 102.207 cv
184.57 102.207 li
184.478 102.207 184.403 102.133 184.403 102.041 cv
184.403 101.825 li
182.248 101.825 li
182.248 102.041 li
182.248 102.133 182.174 102.207 182.082 102.207 cv
180.451 102.207 li
180.36 102.207 180.285 102.133 180.285 102.041 cv
180.285 101.825 li
178.13 101.825 li
178.13 102.041 li
178.13 102.133 178.055 102.207 177.964 102.207 cv
176.333 102.207 li
176.241 102.207 176.167 102.133 176.167 102.041 cv
176.167 101.825 li
174.012 101.825 li
174.012 102.041 li
174.012 102.133 173.937 102.207 173.845 102.207 cv
172.215 102.207 li
172.123 102.207 172.048 102.133 172.048 102.041 cv
172.048 101.825 li
169.893 101.825 li
169.893 102.041 li
169.893 102.133 169.819 102.207 169.727 102.207 cv
168.096 102.207 li
168.004 102.207 167.93 102.133 167.93 102.041 cv
167.93 101.825 li
165.775 101.825 li
165.775 102.041 li
165.775 102.133 165.7 102.207 165.608 102.207 cv
163.978 102.207 li
163.886 102.207 163.811 102.133 163.811 102.041 cv
163.811 101.825 li
161.656 101.825 li
161.656 102.041 li
161.656 102.133 161.582 102.207 161.49 102.207 cv
159.86 102.207 li
159.768 102.207 159.693 102.133 159.693 102.041 cv
159.693 101.825 li
157.538 101.825 li
157.538 102.041 li
157.538 102.133 157.464 102.207 157.372 102.207 cv
155.741 102.207 li
155.649 102.207 155.575 102.133 155.575 102.041 cv
155.575 101.825 li
153.42 101.825 li
153.42 102.041 li
153.42 102.133 153.345 102.207 153.253 102.207 cv
151.623 102.207 li
151.531 102.207 151.456 102.133 151.456 102.041 cv
151.456 101.825 li
149.301 101.825 li
149.301 102.041 li
149.301 102.133 149.227 102.207 149.135 102.207 cv
147.505 102.207 li
147.412 102.207 147.338 102.133 147.338 102.041 cv
147.338 101.825 li
145.183 101.825 li
145.183 102.041 li
145.183 102.133 145.108 102.207 145.016 102.207 cv
143.386 102.207 li
143.294 102.207 143.22 102.133 143.22 102.041 cv
143.22 101.825 li
131.529 101.825 li
131.529 97.2349 li
135.533 97.9979 148.658 100.483 149.732 100.483 cv
159.118 100.483 li
160.388 100.483 161.417 99.4542 161.417 98.1847 cv
161.417 91.2888 li
161.417 90.0193 160.388 88.9902 159.118 88.9902 cv
149.732 88.9902 li
148.699 88.9902 136.393 91.4034 131.859 92.2996 cv
131.741 92.291 131.622 92.283 131.501 92.2764 cv
131.427 92.0379 131.208 91.8635 130.945 91.8635 cv
126.372 91.8635 li
126.121 91.8635 125.908 92.0235 125.826 92.2466 cv
124.823 92.2466 li
124.551 91.8702 124.23 91.5322 123.867 91.2433 cv
123.867 84.7852 li
123.867 84.4627 123.606 84.2014 123.283 84.2014 cv
118.71 84.2014 li
118.388 84.2014 118.126 84.4627 118.126 84.7852 cv
118.126 90.8532 li
117.527 91.2093 117.008 91.6838 116.601 92.2466 cv
115.018 92.2466 li
114.936 92.0235 114.723 91.8635 114.472 91.8635 cv
109.899 91.8635 li
109.647 91.8635 109.435 92.0235 109.353 92.2466 cv
102.384 92.2466 li
102.202 91.1599 101.259 90.331 100.12 90.331 cv
87.0947 90.331 li
85.8252 90.331 84.7961 91.3602 84.7961 92.6297 cv
84.7961 96.8438 li
84.7961 98.1133 85.8252 99.1425 87.0947 99.1425 cv
100.12 99.1425 li
101.259 99.1425 102.202 98.3137 102.384 97.2269 cv
109.315 97.2269 li
109.315 101.825 li
105.583 101.825 li
103.044 101.825 100.986 103.884 100.986 106.423 cv
100.986 106.996 li
96.2893 106.996 li
95.2314 106.996 94.3737 107.854 94.3737 108.912 cv
94.3737 111.977 li
74.6438 111.977 li
74.597 111.977 74.5526 111.985 74.5073 111.99 cv
74.3651 111.958 74.1936 111.996 74.0088 112.117 cv
70.268 114.552 li
68.8973 114.552 52.4098 114.594 49.3589 114.594 cv
70.3658 112.807 li
72.3772 110.795 73.2788 109.997 73.2788 107.954 cv
73.2788 105.911 66.9579 105.049 64.4295 105.049 cv
61.9012 105.049 48.3399 105.049 46.2713 105.049 cv
45.1492 105.049 44.5311 105.467 43.4302 106.552 cv
43.5241 125.349 li
43.5241 125.349 41.485 112.084 41.485 108.497 cv
36.0523 108.497 li
35.296 108.497 34.6638 109.012 34.6638 109.647 cv
34.6638 132.402 li
34.6638 133.036 35.296 133.207 36.0523 132.795 cv
42.7967 129.124 li
43.3252 128.837 43.7429 128.196 43.7429 127.687 cv
43.7429 126.726 li
47.0355 126.726 li
47.3868 127.132 47.8997 127.395 48.4791 127.395 cv
64.761 127.395 li
65.8189 127.395 66.6765 126.537 66.6765 125.479 cv
66.6765 124.33 li
66.6765 123.272 65.8189 122.415 64.761 122.415 cv
50.3167 122.415 li
50.3167 120.488 li
69.2564 120.488 li
69.5401 120.488 69.7964 120.381 69.9968 120.211 cv
73.6988 117.801 li
73.9062 118.101 74.2517 118.298 74.6438 118.298 cv
84.1312 118.298 li
84.2921 119.321 84.3537 121.149 83.2868 122.963 cv
80.7571 127.263 75.6978 134.599 75.6978 134.599 cv
75.6978 134.599 82.7808 138.647 86.5753 138.9 cv
90.3698 139.153 86.5753 137.382 89.105 131.311 cv
90.4166 128.163 91.7938 124.957 92.9938 122.523 cv
94.2568 123.924 96.079 124.811 98.109 124.811 cv
106.633 124.811 li
106.633 136.112 li
106.633 136.747 107.148 137.204 107.782 137.132 cv
124.256 135.283 li
124.891 135.212 125.405 134.64 125.405 134.005 cv
125.405 125.217 li
109.713 124.862 li
125.405 124.022 li
126.028 123.706 126.459 123.066 126.459 122.32 cv
126.459 119.734 li
135.366 119.734 li
136.424 119.734 138.307 118.877 139.573 117.819 cv
140.397 117.129 li
140.397 109.697 li
140.397 108.428 141.427 107.398 142.696 107.398 cv
196.671 107.398 li
143.749 108.644 li
142.48 108.69 141.45 109.756 141.45 111.025 cv
141.45 116.872 li
196.119 116.872 li
197.785 116.872 199.239 115.984 200.045 114.658 cv
203.411 114.658 li
203.812 114.658 204.225 114.41 204.338 114.095 cv
206.052 109.295 li
249.531 109.295 li
249.531 110.061 li
249.531 110.696 250.046 111.21 250.68 111.21 cv
293.588 111.21 li
294.223 111.21 294.738 110.696 294.738 110.061 cv
294.738 105.081 li
294.738 104.446 294.223 103.931 293.588 103.931 cv
cp
f
341.892 180.549 mo
341.892 180.016 342.324 179.583 342.857 179.583 cv
343.391 179.583 343.823 180.016 343.823 180.549 cv
343.823 181.082 343.391 181.515 342.857 181.515 cv
342.324 181.515 341.892 181.082 341.892 180.549 cv
cp
345.432 180.549 mo
345.432 180.016 345.865 179.583 346.398 179.583 cv
346.931 179.583 347.364 180.016 347.364 180.549 cv
347.364 181.082 346.931 181.515 346.398 181.515 cv
345.865 181.515 345.432 181.082 345.432 180.549 cv
cp
348.973 180.549 mo
348.973 180.016 349.406 179.583 349.939 179.583 cv
350.472 179.583 350.905 180.016 350.905 180.549 cv
350.905 181.082 350.472 181.515 349.939 181.515 cv
349.406 181.515 348.973 181.082 348.973 180.549 cv
cp
352.514 180.549 mo
352.514 180.016 352.947 179.583 353.48 179.583 cv
354.013 179.583 354.445 180.016 354.445 180.549 cv
354.445 181.082 354.013 181.515 353.48 181.515 cv
352.947 181.515 352.514 181.082 352.514 180.549 cv
cp
356.077 173.472 mo
356.077 172.999 356.46 172.615 356.934 172.615 cv
400.052 172.615 li
400.525 172.615 400.909 172.999 400.909 173.472 cv
400.909 173.945 400.525 174.329 400.052 174.329 cv
356.934 174.329 li
356.46 174.329 356.077 173.945 356.077 173.472 cv
cp
379.912 189.924 mo
388.583 189.924 li
388.727 190.77 388.653 191.616 388.377 192.387 cv
387.786 194.044 386.745 194.843 387.111 194.782 cv
387.328 194.745 387.546 194.694 387.762 194.625 cv
389.223 194.161 390.295 193.068 390.82 191.745 cv
390.82 194.651 li
390.82 195.113 390.387 195.477 389.854 195.477 cv
381.766 195.477 li
381.233 195.477 380.666 195.113 380.495 194.651 cv
379.164 191.048 li
378.938 190.437 379.27 189.924 379.912 189.924 cv
cp
360.738 219.493 mo
360.475 219.841 359.873 219.755 359.569 219.444 cv
359.265 219.132 359.372 218.711 359.637 218.365 cv
368.22 207.139 365.591 189.428 365.591 189.428 cv
365.513 189.014 365.814 188.615 366.265 188.537 cv
366.715 188.459 367.144 188.732 367.222 189.147 cv
367.222 189.147 370.221 206.905 360.738 219.493 cv
cp
326.718 177.227 mo
326.718 179.639 li
326.718 180.172 327.151 180.604 327.684 180.604 cv
332.381 180.604 li
332.86 180.604 333.239 180.25 333.316 179.793 cv
338.375 179.793 li
338.375 184.77 li
338.375 185.304 338.808 185.736 339.341 185.736 cv
358.047 185.736 li
358.047 180.828 li
358.047 178.844 359.656 177.235 361.64 177.235 cv
393.625 177.235 li
394.639 177.235 362.639 177.962 362.639 177.962 cv
360.654 177.962 359.046 179.57 359.046 181.555 cv
359.046 185.736 li
378.953 185.736 li
378.897 185.789 364.83 186.927 362.259 187.043 cv
367.407 202.584 356.136 220.068 356.136 220.068 cv
356.136 220.068 360.641 222.079 369.735 225.467 cv
377.943 216.534 378.064 201.083 378.064 196.134 cv
378.064 196.134 379.875 196.979 381.806 196.979 cv
383.737 196.979 393.794 196.979 395.725 196.979 cv
391.927 197.773 li
394.305 201.299 398.605 209.935 398.706 210.74 cv
398.826 211.706 406.431 209.412 407.517 208.929 cv
408.604 208.447 410.173 208.809 408.604 206.515 cv
407.035 204.222 398.223 191.909 397.861 189.857 cv
397.647 188.648 399.654 186.939 401.34 185.736 cv
403.468 185.736 li
403.91 185.736 404.267 185.434 404.382 185.029 cv
406.431 185.029 li
406.964 185.029 407.397 184.596 407.397 184.063 cv
407.397 183.175 li
391.856 182.373 li
408.725 182.373 li
409.258 182.373 409.69 181.941 409.69 181.407 cv
409.69 176.82 li
409.69 176.287 409.258 175.855 408.725 175.855 cv
404.434 175.855 li
404.434 175.734 li
404.434 175.201 400.325 171.107 399.792 171.107 cv
397.789 171.107 li
398.969 170.583 399.3 169.852 398.491 169.043 cv
396.895 167.448 395.601 166.154 395.601 166.154 cv
393.716 164.268 390.659 164.268 388.773 166.154 cv
385.883 169.043 li
385.074 169.852 385.405 170.583 386.585 171.107 cv
346.56 171.107 li
345.631 168.699 li
345.631 168.128 345.214 167.424 344.699 167.127 cv
340.249 164.563 li
339.733 164.266 339.316 164.488 339.316 165.059 cv
339.316 171.113 li
338.795 171.127 338.375 171.549 338.375 172.073 cv
338.375 177.05 li
333.311 177.05 li
333.226 176.605 332.852 176.261 332.381 176.261 cv
327.684 176.261 li
327.151 176.261 326.718 176.694 326.718 177.227 cv
cp
f
383.557 37.5711 mo
383.557 37.5484 383.563 37.5274 383.564 37.5049 cv
385.815 37.5049 li
385.824 37.5048 385.831 37.5024 385.84 37.5024 cv
403.56 37.5024 li
404.997 37.5024 406.639 38.6675 407.228 40.1048 cv
409.318 45.2049 li
406.54 40.7554 li
405.642 39.3181 403.75 38.153 402.313 38.153 cv
390.951 38.153 li
391.099 39.9582 390.509 41.7272 389.36 43.0848 cv
388.902 43.553 389.949 43.8777 390.921 43.4858 cv
393.181 42.5749 394.743 40.6501 395.209 38.4495 cv
396.123 41.5366 li
396.123 42.6117 li
396.123 43.9823 395.008 45.0973 393.638 45.0973 cv
386.043 45.0973 li
384.672 45.0973 383.557 43.9823 383.557 42.6117 cv
383.557 37.5711 li
cp
364.057 28.4117 mo
364.057 33.3478 li
364.057 33.5689 364.237 33.7482 364.458 33.7482 cv
364.629 33.7482 li
364.629 36.8059 li
364.629 37.192 364.942 37.5049 365.328 37.5049 cv
382.736 37.5049 li
382.735 37.5275 382.729 37.5486 382.729 37.5714 cv
382.729 42.6114 li
382.729 44.4418 384.212 45.9255 386.043 45.9255 cv
393.637 45.9255 li
395.091 45.9255 396.312 44.984 396.759 43.6825 cv
401.713 60.4035 li
401.827 60.7896 402.233 61.1025 402.619 61.1025 cv
416.046 61.1025 li
416.432 61.1025 416.538 60.8061 416.538 60.4035 cv
416.538 53.3304 404.612 40.9624 412.747 37.5049 cv
413.133 37.5049 413.446 37.192 413.446 36.8059 cv
413.446 28.189 li
413.446 27.803 413.133 27.49 412.747 27.49 cv
411.091 27.49 li
411.091 34.0615 li
411.091 34.7602 410.524 35.3266 409.826 35.3266 cv
369.779 35.3266 li
369.08 35.3266 368.513 34.7602 368.513 34.0615 cv
368.513 27.49 li
368.314 27.49 li
368.314 27.2213 li
368.314 26.6965 367.889 26.2711 367.364 26.2711 cv
366.839 26.2711 366.414 26.6965 366.414 27.2213 cv
366.414 27.49 li
365.328 27.49 li
365.005 27.49 364.745 27.7136 364.665 28.0113 cv
364.458 28.0113 li
364.237 28.0113 364.057 28.1905 364.057 28.4117 cv
cp
385.559 29.0102 mo
385.559 28.6289 385.869 28.3197 386.25 28.3197 cv
401.025 28.3197 li
401.406 28.3197 401.715 28.6289 401.715 29.0102 cv
401.715 29.3915 401.406 29.7006 401.025 29.7006 cv
386.25 29.7006 li
385.869 29.7006 385.559 29.3915 385.559 29.0102 cv
cp
368.951 27.49 mo
368.951 34.2575 li
368.951 34.5032 369.151 34.7027 369.396 34.7027 cv
410.208 34.7027 li
410.453 34.7027 410.652 34.5032 410.652 34.2575 cv
410.652 27.49 li
409.755 27.49 li
409.755 26.7494 li
409.755 26.5055 409.557 26.3077 409.313 26.3077 cv
409.069 26.3077 408.872 26.5055 408.872 26.7494 cv
408.872 27.49 li
368.951 27.49 li
cp
f
404.931 264.24 mo
404.059 262.843 402.22 261.711 400.823 261.711 cv
389.782 261.711 li
389.925 263.465 389.353 265.184 388.235 266.503 cv
387.791 266.958 388.808 267.274 389.753 266.893 cv
391.949 266.008 393.467 264.137 393.919 261.999 cv
394.808 264.999 li
394.808 266.043 li
394.808 267.375 393.725 268.459 392.393 268.459 cv
385.012 268.459 li
383.68 268.459 382.945 267.329 382.596 266.043 cv
382.15 264.4 381.826 261.145 381.826 261.145 cv
381.826 261.123 381.831 261.103 381.832 261.081 cv
384.79 261.081 li
384.799 261.081 384.806 261.078 384.815 261.078 cv
402.035 261.078 li
403.431 261.078 405.028 262.21 405.6 263.607 cv
407.631 268.564 li
404.931 264.24 li
cp
410.963 261.081 mo
411.338 261.081 411.642 260.776 411.642 260.401 cv
411.642 252.027 li
411.642 251.652 411.338 251.348 410.963 251.348 cv
409.354 251.348 li
409.354 257.734 li
409.354 258.413 408.803 258.964 408.124 258.964 cv
369.206 258.964 li
368.527 258.964 367.977 258.413 367.977 257.734 cv
367.977 251.348 li
367.783 251.348 li
367.783 251.087 li
367.783 250.577 367.37 250.164 366.86 250.164 cv
366.35 250.164 365.936 250.577 365.936 251.087 cv
365.936 251.348 li
364.882 251.348 li
364.568 251.348 364.315 251.565 364.237 251.855 cv
364.035 251.855 li
363.821 251.855 363.646 252.029 363.646 252.244 cv
363.646 252.912 li
359.472 252.912 li
359.472 251.761 li
359.472 251.258 359.064 250.85 358.561 250.85 cv
329.536 250.85 li
329.033 250.85 328.625 251.258 328.625 251.761 cv
328.625 257.397 li
328.625 257.901 329.033 258.308 329.536 258.308 cv
358.561 258.308 li
359.064 258.308 359.472 257.901 359.472 257.397 cv
359.472 256.247 li
363.646 256.247 li
363.646 257.041 li
363.646 257.256 363.821 257.43 364.035 257.43 cv
364.202 257.43 li
364.202 260.401 li
364.202 260.776 364.506 261.081 364.882 261.081 cv
381.027 261.081 li
381.027 261.094 381.025 261.108 381.023 261.121 cv
366.202 261.708 li
366.202 263.881 li
366.202 264.082 366.365 264.246 366.567 264.246 cv
381.468 264.246 li
381.575 264.914 381.688 265.564 381.791 266.043 cv
382.166 267.782 383.233 269.264 385.012 269.264 cv
392.392 269.264 li
393.805 269.264 394.991 268.349 395.426 267.084 cv
395.426 267.084 400.274 271.638 400.24 283.333 cv
400.239 283.725 400.745 284.013 401.121 284.013 cv
414.169 284.013 li
414.544 284.013 414.583 283.72 414.647 283.333 cv
416.255 273.606 401.201 265.037 410.963 261.081 cv
cp
379.55 251.869 mo
392.161 251.869 li
392.747 251.869 393.223 252.345 393.223 252.932 cv
393.223 253.518 392.747 253.994 392.161 253.994 cv
379.55 253.994 li
378.963 253.994 378.488 253.518 378.488 252.932 cv
378.488 252.345 378.963 251.869 379.55 251.869 cv
cp
368.835 258.358 mo
408.495 258.358 li
408.733 258.358 408.927 258.164 408.927 257.925 cv
408.927 251.348 li
408.056 251.348 li
408.056 250.628 li
408.056 250.391 407.863 250.199 407.626 250.199 cv
407.389 250.199 407.197 250.391 407.197 250.628 cv
407.197 251.348 li
368.402 251.348 li
368.402 257.925 li
368.402 258.164 368.596 258.358 368.835 258.358 cv
cp
f
402.773 90.8394 mo
402.773 90.2614 402.305 89.7927 401.727 89.7927 cv
382.211 89.7927 li
381.633 89.7927 381.164 90.2614 381.164 90.8394 cv
381.164 91.4176 381.633 91.8862 382.211 91.8862 cv
401.727 91.8862 li
402.305 91.8862 402.773 91.4176 402.773 90.8394 cv
cp
365.68 101.382 mo
365.68 103.462 367.372 105.154 369.452 105.154 cv
374.295 105.154 li
376.349 105.154 376.318 102.307 376.318 100.675 cv
379.398 100.675 384.512 100.675 384.512 100.675 cv
385.039 100.675 385.565 101.102 385.689 101.628 cv
389.388 117.41 li
386.073 100.794 li
385.968 100.267 385.456 99.8406 384.929 99.8406 cv
374.679 99.8406 li
374.679 99.8416 li
373.75 99.8416 li
373.889 100.525 373.844 101.254 373.572 101.953 cv
373.299 102.655 372.838 103.227 372.27 103.637 cv
372.128 103.529 371.982 103.423 371.834 103.321 cv
371.895 103.203 371.951 103.082 372 102.956 cv
372.411 101.9 372.309 100.772 371.82 99.8416 cv
366.013 99.8416 li
365.801 100.313 365.68 100.833 365.68 101.382 cv
cp
410.7 88.2472 mo
410.7 95.8581 li
363.025 95.8581 li
410.7 97.3479 li
410.7 98.1922 li
410.7 98.4809 410.466 98.715 410.177 98.715 cv
408.267 98.715 li
407.984 99.3772 407.328 99.8416 406.562 99.8416 cv
406.562 99.8416 395.328 99.8416 391.583 99.8416 cv
389.277 99.8416 387.613 101.272 387.613 103.694 cv
387.613 106.116 390.475 117.343 390.475 118.333 cv
390.475 119.324 390.475 119.764 389.374 119.764 cv
388.75 119.764 386.498 119.764 384.664 119.764 cv
385.493 147.54 li
385.89 147.54 li
386.112 147.54 386.292 147.72 386.292 147.942 cv
386.292 148.268 li
386.292 148.49 386.112 148.67 385.89 148.67 cv
376.639 148.67 li
376.417 148.67 375.356 148.49 375.356 148.268 cv
376.237 147.942 li
376.237 147.72 376.417 147.54 376.639 147.54 cv
376.688 147.54 li
375.891 120.089 li
383.885 119.473 li
375.065 119.473 li
375.065 105.825 li
374.814 105.868 374.558 105.895 374.295 105.895 cv
369.452 105.895 li
366.959 105.895 364.939 103.875 364.939 101.382 cv
364.939 100.84 365.039 100.323 365.214 99.8416 cv
355.456 99.8416 li
354.687 99.8416 354.027 99.3732 353.746 98.7062 cv
353.499 98.6644 353.311 98.451 353.311 98.1922 cv
353.311 95.769 li
349.622 95.769 li
348.867 95.769 348.22 95.3159 347.931 94.6683 cv
342.374 94.6683 li
342.374 92.1367 li
347.931 92.1367 li
348.22 91.489 348.867 91.036 349.622 91.036 cv
353.311 91.036 li
353.311 88.2472 li
353.311 87.9626 353.539 87.7321 353.822 87.7256 cv
353.822 86.303 li
356.353 86.303 li
357.775 87.7244 li
360.866 87.7244 li
360.866 86.7433 li
362.847 86.7433 li
362.847 86.5231 li
365.159 86.5231 li
365.159 86.7433 li
367.47 86.7433 li
367.47 87.7244 li
410.177 87.7244 li
410.466 87.7244 410.7 87.9584 410.7 88.2472 cv
cp
419.794 81.3095 mo
414.745 84.0606 li
414.787 84.1971 414.817 84.3394 414.817 84.4899 cv
414.817 93.3474 li
416.121 93.3474 li
416.121 99.6214 li
410.948 101.272 li
410.948 93.3474 li
411.922 93.3474 li
411.922 86.0574 li
395.335 87.5196 li
394.539 87.5836 393.841 86.9896 393.777 86.1929 cv
393.713 85.3962 394.307 84.6985 395.104 84.6345 cv
412.971 83.0594 li
413.037 83.0541 413.101 83.0599 413.165 83.0633 cv
413.232 83.0537 413.299 83.0426 413.369 83.0426 cv
413.442 83.0426 413.512 83.0537 413.583 83.0642 cv
419.11 80.053 li
419.457 79.864 419.891 79.992 420.08 80.339 cv
420.27 80.686 420.141 81.1205 419.794 81.3095 cv
cp
f
292.17 317.029 mo
292.17 316.833 292.329 316.674 292.525 316.674 cv
333.192 316.674 li
333.388 316.674 333.547 316.833 333.547 317.029 cv
333.547 317.225 333.388 317.384 333.192 317.384 cv
292.525 317.384 li
292.329 317.384 292.17 317.225 292.17 317.029 cv
cp
334.258 311.346 mo
329.285 311.346 li
328.795 311.346 328.397 310.948 328.397 310.458 cv
328.397 309.968 328.795 309.57 329.285 309.57 cv
334.258 309.57 li
334.748 309.57 335.146 309.968 335.146 310.458 cv
335.146 310.948 334.748 311.346 334.258 311.346 cv
cp
326.089 310.458 mo
326.089 310.948 325.691 311.346 325.201 311.346 cv
324.668 311.346 li
324.178 311.346 323.78 310.948 323.78 310.458 cv
323.78 309.968 324.178 309.57 324.668 309.57 cv
325.201 309.57 li
325.691 309.57 326.089 309.968 326.089 310.458 cv
cp
322.626 310.458 mo
322.626 310.948 322.228 311.346 321.738 311.346 cv
321.205 311.346 li
320.715 311.346 320.317 310.948 320.317 310.458 cv
320.317 309.968 320.715 309.57 321.205 309.57 cv
321.738 309.57 li
322.228 309.57 322.626 309.968 322.626 310.458 cv
cp
319.163 310.458 mo
319.163 310.948 318.765 311.346 318.275 311.346 cv
317.742 311.346 li
317.252 311.346 316.854 310.948 316.854 310.458 cv
316.854 309.968 317.252 309.57 317.742 309.57 cv
318.275 309.57 li
318.765 309.57 319.163 309.968 319.163 310.458 cv
cp
315.7 310.458 mo
315.7 310.948 315.302 311.346 314.812 311.346 cv
314.279 311.346 li
313.789 311.346 313.391 310.948 313.391 310.458 cv
313.391 309.968 313.789 309.57 314.279 309.57 cv
314.812 309.57 li
315.302 309.57 315.7 309.968 315.7 310.458 cv
cp
312.237 310.458 mo
312.237 310.948 311.839 311.346 311.349 311.346 cv
310.816 311.346 li
310.326 311.346 309.928 310.948 309.928 310.458 cv
309.928 309.968 310.326 309.57 310.816 309.57 cv
311.349 309.57 li
311.839 309.57 312.237 309.968 312.237 310.458 cv
cp
308.774 310.458 mo
308.774 310.948 308.376 311.346 307.886 311.346 cv
307.353 311.346 li
306.863 311.346 306.465 310.948 306.465 310.458 cv
306.465 309.968 306.863 309.57 307.353 309.57 cv
307.886 309.57 li
308.376 309.57 308.774 309.968 308.774 310.458 cv
cp
305.311 310.458 mo
305.311 310.948 304.914 311.346 304.423 311.346 cv
303.89 311.346 li
303.4 311.346 303.002 310.948 303.002 310.458 cv
303.002 309.968 303.4 309.57 303.89 309.57 cv
304.423 309.57 li
304.914 309.57 305.311 309.968 305.311 310.458 cv
cp
301.848 310.458 mo
301.848 310.948 301.451 311.346 300.96 311.346 cv
300.427 311.346 li
299.937 311.346 299.539 310.948 299.539 310.458 cv
299.539 309.968 299.937 309.57 300.427 309.57 cv
300.96 309.57 li
301.451 309.57 301.848 309.968 301.848 310.458 cv
cp
298.385 310.458 mo
298.385 310.948 297.988 311.346 297.497 311.346 cv
296.964 311.346 li
296.474 311.346 296.077 310.948 296.077 310.458 cv
296.077 309.968 296.474 309.57 296.964 309.57 cv
297.497 309.57 li
297.988 309.57 298.385 309.968 298.385 310.458 cv
cp
294.922 310.458 mo
294.922 310.948 294.525 311.346 294.034 311.346 cv
293.502 311.346 li
293.011 311.346 292.614 310.948 292.614 310.458 cv
292.614 309.968 293.011 309.57 293.502 309.57 cv
294.034 309.57 li
294.525 309.57 294.922 309.968 294.922 310.458 cv
cp
339.763 312.944 mo
339.763 312.454 340.16 312.056 340.651 312.056 cv
358.232 312.056 li
358.723 312.056 359.12 312.454 359.12 312.944 cv
359.12 313.435 358.723 313.832 358.232 313.832 cv
340.651 313.832 li
340.16 313.832 339.763 313.435 339.763 312.944 cv
cp
359.12 323.599 mo
359.216 323.599 359.306 323.618 359.4 323.628 cv
359.064 323.628 li
358.947 325.022 358.198 326.228 357.106 326.972 cv
357.875 327.741 li
359.556 327.668 360.986 326.674 361.693 325.251 cv
361.861 325.614 361.961 326.014 361.961 326.441 cv
361.961 326.618 li
361.961 328.188 360.689 329.46 359.12 329.46 cv
354.325 329.46 li
352.756 329.46 351.484 328.188 351.484 326.618 cv
351.484 326.441 li
351.484 324.872 352.756 323.599 354.325 323.599 cv
359.12 323.599 li
cp
349.869 327.693 mo
349.869 327.963 349.65 328.183 349.378 328.183 cv
343.212 328.183 li
342.941 328.183 342.721 327.963 342.721 327.693 cv
342.721 327.422 342.941 327.202 343.212 327.202 cv
349.378 327.202 li
349.65 327.202 349.869 327.422 349.869 327.693 cv
cp
342.527 330.933 mo
342.411 335.681 341.495 341.518 338.415 346.508 cv
338.236 346.798 337.783 346.75 337.542 346.509 cv
337.301 346.268 337.36 345.924 337.541 345.636 cv
340.354 341.149 341.174 335.548 341.266 330.933 cv
342.527 330.933 li
cp
340.598 347.015 mo
343.698 342.071 344.377 335.773 344.329 330.933 cv
345.596 330.933 li
345.629 335.894 344.857 342.403 341.471 347.887 cv
341.292 348.178 340.84 348.129 340.598 347.888 cv
340.357 347.647 340.417 347.304 340.598 347.015 cv
cp
343.655 348.394 mo
347.059 342.966 347.544 335.904 347.353 330.933 cv
348.623 330.933 li
348.81 336.018 348.238 343.257 344.528 349.267 cv
344.349 349.557 343.896 349.508 343.655 349.267 cv
343.414 349.026 343.473 348.683 343.655 348.394 cv
cp
389.31 321.69 mo
389.31 321.519 389.449 321.38 389.621 321.38 cv
412.796 321.38 li
412.967 321.38 413.107 321.519 413.107 321.69 cv
413.107 321.862 412.967 322.001 412.796 322.001 cv
389.621 322.001 li
389.449 322.001 389.31 321.862 389.31 321.69 cv
cp
404.275 330.566 mo
404.275 330.193 404.578 329.89 404.951 329.89 cv
405.324 329.89 405.627 330.193 405.627 330.566 cv
405.627 330.939 405.324 331.241 404.951 331.241 cv
404.578 331.241 404.275 330.939 404.275 330.566 cv
cp
405.231 329.217 mo
404.858 329.252 404.555 328.977 404.555 328.604 cv
404.555 328.23 404.858 327.9 405.231 327.866 cv
405.604 327.832 405.907 328.107 405.907 328.48 cv
405.907 328.853 405.604 329.183 405.231 329.217 cv
cp
406.658 331.267 mo
406.658 330.893 406.96 330.591 407.334 330.591 cv
407.707 330.591 408.009 330.893 408.009 331.267 cv
408.009 331.64 407.707 331.942 407.334 331.942 cv
406.96 331.942 406.658 331.64 406.658 331.267 cv
cp
407.614 329.7 mo
407.241 329.734 406.938 329.459 406.938 329.086 cv
406.938 328.713 407.241 328.383 407.614 328.348 cv
407.987 328.314 408.29 328.589 408.29 328.962 cv
408.29 329.335 407.987 329.666 407.614 329.7 cv
cp
409.041 331.967 mo
409.041 331.594 409.343 331.292 409.716 331.292 cv
410.089 331.292 410.392 331.594 410.392 331.967 cv
410.392 332.341 410.089 332.643 409.716 332.643 cv
409.343 332.643 409.041 332.341 409.041 331.967 cv
cp
409.997 330.182 mo
409.624 330.216 409.321 329.942 409.321 329.568 cv
409.321 329.195 409.624 328.865 409.997 328.831 cv
410.37 328.797 410.672 329.071 410.672 329.444 cv
410.672 329.818 410.37 330.148 409.997 330.182 cv
cp
272.963 313.508 mo
272.963 313.69 li
272.963 314.867 273.917 315.821 275.094 315.821 cv
283.778 315.821 li
283.778 316.061 li
283.778 317.238 284.732 318.192 285.909 318.192 cv
291.704 318.192 li
292.095 318.645 292.672 318.933 293.317 318.933 cv
372.528 318.933 li
370.662 318.985 li
371.255 318.985 li
371.637 319.366 371.874 319.892 371.874 320.474 cv
371.874 321.635 370.932 322.577 369.771 322.577 cv
368.61 322.577 367.669 321.635 367.669 320.474 cv
367.669 319.926 367.881 319.427 368.226 319.053 cv
335.856 319.959 li
337.559 321.429 li
337.559 328.802 li
337.559 329.889 338.373 330.784 339.424 330.915 cv
338.922 341.358 334.649 346.895 334.649 346.895 cv
334.649 346.895 338.255 348.427 346.431 351.913 cv
349.901 344.729 351.214 337.388 351.44 330.933 cv
360.531 330.933 li
369.674 333.253 373.096 344.035 374.153 344.564 cv
375.338 345.156 379.859 344.304 382.156 342.313 cv
384.378 340.387 380.672 334.785 378.894 333.007 cv
377.565 331.678 375.16 327.7 374.03 325.776 cv
374.185 322.701 375.196 321.747 380.349 321.747 cv
381.392 321.747 382.301 321.184 382.795 320.347 cv
382.806 320.352 382.817 320.358 382.828 320.363 cv
382.828 313.921 li
384.127 321.016 li
387.628 322.776 391.475 324.71 391.499 324.726 cv
394.163 326.502 395.554 323.067 397.124 323.067 cv
398.367 323.067 li
399.936 323.067 401.208 324.339 401.208 325.908 cv
401.208 325.908 401.208 328.684 401.208 329.609 cv
401.208 333.189 410.798 334.432 410.798 334.432 cv
411.975 334.432 412.929 333.478 412.929 332.301 cv
415.933 313.804 li
415.933 312.627 414.979 311.673 413.802 311.673 cv
380.079 311.673 li
380.079 310.248 li
380.079 309.555 379.448 308.795 378.936 308.406 cv
378.936 308.406 343.755 308.401 343.634 308.341 cv
378.894 307.243 li
378.894 305.673 377.622 304.96 376.053 305.086 cv
369.735 305.593 li
368.736 305.673 367.859 306.26 367.352 307.08 cv
353.559 307.08 li
353.559 306.043 li
338.151 306.043 li
338.151 317.325 li
337.277 308.117 li
292.406 308.117 li
305.112 306.841 li
305.112 305.664 304.158 304.71 302.982 304.71 cv
293.761 304.71 li
292.584 304.71 291.63 305.664 291.63 306.841 cv
291.63 316.496 li
291.58 316.562 290.749 309.154 290.749 309.154 cv
285.909 309.154 li
284.732 309.154 283.778 310.108 283.778 311.285 cv
283.778 311.377 li
275.094 311.377 li
273.917 311.377 272.963 312.331 272.963 313.508 cv
cp
f
211.591 41.9025 mo
214.2 41.9025 li
209.041 61.2433 li
207.896 61.2433 li
207.479 61.2433 207.142 61.5808 207.142 61.9971 cv
207.142 62.7992 li
212.607 62.7992 li
212.607 61.9971 li
212.607 61.5808 212.269 61.2433 211.853 61.2433 cv
210.274 61.2433 li
214.94 43.7547 li
219.468 60.7308 li
218.026 60.7308 li
217.499 60.7308 217.072 61.1575 217.072 61.6841 cv
217.072 62.6984 li
223.984 62.6984 li
223.984 61.6841 li
223.984 61.1575 223.557 60.7308 223.031 60.7308 cv
221.405 60.7308 li
216.382 41.9025 li
218.741 41.9025 li
219.267 41.9025 219.694 41.4756 219.694 40.9491 cv
219.694 38.3261 li
210.637 37.7969 li
210.637 40.9491 li
210.637 41.4756 211.064 41.9025 211.591 41.9025 cv
cp
312.34 28.9334 mo
312.34 28.3993 311.907 27.9662 311.372 27.9662 cv
310.838 27.9662 310.405 28.3993 310.405 28.9334 cv
310.405 32.6087 li
310.405 33.1428 310.838 33.5759 311.372 33.5759 cv
311.907 33.5759 312.34 33.1428 312.34 32.6087 cv
312.34 28.9334 li
cp
307.961 28.9334 mo
307.961 28.3993 307.528 27.9662 306.994 27.9662 cv
306.46 27.9662 306.027 28.3993 306.027 28.9334 cv
306.027 32.6087 li
306.027 33.1428 306.46 33.5759 306.994 33.5759 cv
307.528 33.5759 307.961 33.1428 307.961 32.6087 cv
307.961 28.9334 li
cp
303.583 28.9334 mo
303.583 28.3993 303.15 27.9662 302.615 27.9662 cv
302.081 27.9662 301.648 28.3993 301.648 28.9334 cv
301.648 32.6087 li
301.648 33.1428 302.081 33.5759 302.615 33.5759 cv
303.15 33.5759 303.583 33.1428 303.583 32.6087 cv
303.583 28.9334 li
cp
299.204 28.9334 mo
299.204 28.3993 298.771 27.9662 298.237 27.9662 cv
297.703 27.9662 297.27 28.3993 297.27 28.9334 cv
297.27 32.6087 li
297.27 33.1428 297.703 33.5759 298.237 33.5759 cv
298.771 33.5759 299.204 33.1428 299.204 32.6087 cv
299.204 28.9334 li
cp
294.826 28.9334 mo
294.826 28.3993 294.393 27.9662 293.858 27.9662 cv
293.324 27.9662 292.891 28.3993 292.891 28.9334 cv
292.891 32.6087 li
292.891 33.1428 293.324 33.5759 293.858 33.5759 cv
294.393 33.5759 294.826 33.1428 294.826 32.6087 cv
294.826 28.9334 li
cp
205.711 26.3406 mo
205.711 26.0638 205.278 25.8395 204.744 25.8395 cv
195.199 25.8395 li
194.664 25.8395 194.231 26.0638 194.231 26.3406 cv
194.231 26.6173 194.664 26.8417 195.199 26.8417 cv
204.744 26.8417 li
205.278 26.8417 205.711 26.6173 205.711 26.3406 cv
cp
205.711 30.5195 mo
205.711 30.0143 205.278 29.6047 204.744 29.6047 cv
195.199 29.6047 li
194.664 29.6047 194.231 30.0143 194.231 30.5195 cv
194.231 31.0247 194.664 31.4342 195.199 31.4342 cv
204.744 31.4342 li
205.278 31.4342 205.711 31.0247 205.711 30.5195 cv
cp
205.711 34.9551 mo
205.711 34.6783 205.278 34.454 204.744 34.454 cv
195.199 34.454 li
194.664 34.454 194.231 34.6783 194.231 34.9551 cv
194.231 35.2318 194.664 35.4562 195.199 35.4562 cv
204.744 35.4562 li
205.278 35.4562 205.711 35.2318 205.711 34.9551 cv
cp
190.993 26.3406 mo
190.993 26.0638 190.56 25.8395 190.026 25.8395 cv
180.481 25.8395 li
179.947 25.8395 179.514 26.0638 179.514 26.3406 cv
179.514 26.6173 179.947 26.8417 180.481 26.8417 cv
190.026 26.8417 li
190.56 26.8417 190.993 26.6173 190.993 26.3406 cv
cp
190.993 30.5195 mo
190.993 30.0143 190.56 29.6047 190.026 29.6047 cv
180.481 29.6047 li
179.947 29.6047 179.514 30.0143 179.514 30.5195 cv
179.514 31.0247 179.947 31.4342 180.481 31.4342 cv
190.026 31.4342 li
190.56 31.4342 190.993 31.0247 190.993 30.5195 cv
cp
190.993 34.9551 mo
190.993 34.6783 190.56 34.454 190.026 34.454 cv
180.481 34.454 li
179.947 34.454 179.514 34.6783 179.514 34.9551 cv
179.514 35.2318 179.947 35.4562 180.481 35.4562 cv
190.026 35.4562 li
190.56 35.4562 190.993 35.2318 190.993 34.9551 cv
cp
176.276 26.3406 mo
176.276 26.0638 175.843 25.8395 175.309 25.8395 cv
165.763 25.8395 li
165.229 25.8395 164.796 26.0638 164.796 26.3406 cv
164.796 26.6173 165.229 26.8417 165.763 26.8417 cv
175.309 26.8417 li
175.843 26.8417 176.276 26.6173 176.276 26.3406 cv
cp
176.276 30.5195 mo
176.276 30.0143 175.843 29.6047 175.309 29.6047 cv
165.763 29.6047 li
165.229 29.6047 164.796 30.0143 164.796 30.5195 cv
164.796 31.0247 165.229 31.4342 165.763 31.4342 cv
175.309 31.4342 li
175.843 31.4342 176.276 31.0247 176.276 30.5195 cv
cp
176.276 34.9551 mo
176.276 34.6783 175.843 34.454 175.309 34.454 cv
165.763 34.454 li
165.229 34.454 164.796 34.6783 164.796 34.9551 cv
164.796 35.2318 165.229 35.4562 165.763 35.4562 cv
175.309 35.4562 li
175.843 35.4562 176.276 35.2318 176.276 34.9551 cv
cp
161.558 26.3406 mo
161.558 26.0638 161.125 25.8395 160.591 25.8395 cv
151.046 25.8395 li
150.511 25.8395 150.078 26.0638 150.078 26.3406 cv
150.078 26.6173 150.511 26.8417 151.046 26.8417 cv
160.591 26.8417 li
161.125 26.8417 161.558 26.6173 161.558 26.3406 cv
cp
161.558 30.5195 mo
161.558 30.0143 161.125 29.6047 160.591 29.6047 cv
151.046 29.6047 li
150.511 29.6047 150.078 30.0143 150.078 30.5195 cv
150.078 31.0247 150.511 31.4342 151.046 31.4342 cv
160.591 31.4342 li
161.125 31.4342 161.558 31.0247 161.558 30.5195 cv
cp
161.558 34.9551 mo
161.558 34.6783 161.125 34.454 160.591 34.454 cv
151.046 34.454 li
150.511 34.454 150.078 34.6783 150.078 34.9551 cv
150.078 35.2318 150.511 35.4562 151.046 35.4562 cv
160.591 35.4562 li
161.125 35.4562 161.558 35.2318 161.558 34.9551 cv
cp
136.454 28.4229 mo
136.454 28.1361 136.221 27.9036 135.934 27.9036 cv
95.431 27.9036 li
95.1442 27.9036 94.9117 28.1361 94.9117 28.4229 cv
94.9117 28.7097 95.1442 28.9421 95.431 28.9421 cv
135.934 28.9421 li
136.221 28.9421 136.454 28.7097 136.454 28.4229 cv
cp
136.265 32.8604 mo
136.265 32.5735 136.033 32.3411 135.746 32.3411 cv
96.4695 32.3411 li
96.1828 32.3411 95.9503 32.5735 95.9503 32.8604 cv
95.9503 33.1472 96.1828 33.3796 96.4695 33.3796 cv
135.746 33.3796 li
136.033 33.3796 136.265 33.1472 136.265 32.8604 cv
cp
108.979 24.8823 mo
108.979 25.8209 109.74 26.5818 110.679 26.5818 cv
112.945 26.5818 li
113.883 26.5818 114.644 25.8209 114.644 24.8823 cv
114.644 23.9438 113.883 23.1829 112.945 23.1829 cv
110.679 23.1829 li
109.74 23.1829 108.979 23.9438 108.979 24.8823 cv
cp
116.06 24.8823 mo
116.06 25.8731 116.864 26.6763 117.854 26.6763 cv
122.292 26.6763 li
123.282 26.6763 124.086 25.8731 124.086 24.8823 cv
124.086 23.8917 123.282 23.0885 122.292 23.0885 cv
117.854 23.0885 li
116.864 23.0885 116.06 23.8917 116.06 24.8823 cv
cp
125.596 24.8823 mo
125.596 25.8731 126.399 26.6763 127.39 26.6763 cv
131.827 26.6763 li
132.818 26.6763 133.621 25.8731 133.621 24.8823 cv
133.621 23.8917 132.818 23.0885 131.827 23.0885 cv
127.39 23.0885 li
126.399 23.0885 125.596 23.8917 125.596 24.8823 cv
cp
101.573 45.6009 mo
101.573 46.5031 102.255 46.9752 103.672 46.9752 cv
110.133 46.9752 li
111.842 46.9752 113.228 45.5895 113.228 43.8802 cv
113.228 43.4612 li
113.228 41.7518 111.842 40.3662 110.133 40.3662 cv
110.133 40.3662 107.967 40.3662 106.065 40.3662 cv
106.286 41.5753 106.985 42.6127 107.962 43.2783 cv
107.193 44.0474 li
105.574 43.9763 104.197 43.0469 103.466 41.7091 cv
102.429 43.2601 101.573 45.6009 101.573 45.6009 cv
cp
314.962 28.9335 mo
314.962 32.4153 li
314.962 33.4836 314.096 34.3496 313.027 34.3496 cv
292.33 34.3496 li
291.283 34.3496 290.43 33.5179 290.396 32.4792 cv
290.396 32.4579 290.396 29.0809 290.396 29.0595 cv
290.087 32.4153 li
224.478 32.4153 li
224.047 29.172 li
224.047 32.9956 li
224.047 34.7049 222.662 36.0906 220.952 36.0906 cv
220.632 26.0504 li
220.632 37.41 li
220.632 37.6237 220.458 37.7969 220.245 37.7969 cv
210.637 37.7969 li
210.001 37.7969 li
209.787 37.7969 209.614 37.6237 209.614 37.41 cv
209.614 25.8873 li
209.126 36.0906 li
141.644 36.0906 li
140.78 36.0906 139.999 35.7355 139.438 35.1642 cv
139.417 29.3463 li
138.657 35.1642 li
131.317 35.1642 li
131.071 35.3029 130.805 35.4446 130.518 35.5882 cv
127.015 37.3392 li
125.338 38.1781 123.329 38.8173 122.184 38.9167 cv
122.103 38.9239 95.418 38.9282 95.3456 38.9297 cv
95.418 38.9282 120.915 39.7269 120.915 39.7269 cv
119.959 40.1972 118.657 40.5016 118.024 40.5016 cv
116.653 40.5016 li
115.554 40.8938 114.307 41.8395 114.307 43.5366 cv
114.307 45.7344 113.155 47.7228 110.748 47.7228 cv
108.341 47.7228 102.585 47.7228 101.225 47.7228 cv
99.8641 47.7228 94.4221 58.7117 94.4221 60.1768 cv
94.4221 61.642 92.5382 61.4327 91.701 61.3281 cv
90.8637 61.2234 88.666 60.4908 85.7356 59.6536 cv
82.8053 58.8163 85.0031 57.0372 85.0031 57.0372 cv
85.0031 57.0372 89.5032 50.2346 91.9103 46.7809 cv
93.8006 44.0687 94.0118 42.5797 94.0158 40.394 cv
93.1951 40.1706 92.3217 39.6153 92.0814 38.9318 cv
91.1236 38.9318 li
90.0553 38.9318 89.1892 38.2532 89.1892 37.3392 cv
89.1892 35.5882 li
89.1892 35.4446 89.2065 35.3029 89.2372 35.1642 cv
88.7166 35.1642 li
87.8879 35.1642 87.1866 34.6406 86.9111 33.9083 cv
85.6383 33.9083 li
85.2849 34.2919 84.7827 34.5363 84.2199 34.5363 cv
40.5617 34.5363 li
39.2686 28.826 li
39.2686 54.3702 li
39.2686 55.4385 38.4026 56.3046 37.3343 56.3046 cv
33.2491 56.3046 li
32.1808 56.3046 31.3148 55.4385 31.3148 54.3702 cv
31.3148 29.0401 li
31.3148 27.9717 32.1808 27.1057 33.2491 27.1057 cv
37.3343 27.1057 li
37.9947 27.1057 38.5764 27.4379 38.9254 27.943 cv
84.2199 27.943 li
84.8315 27.943 85.3702 28.2324 85.7247 28.6756 cv
86.8189 28.6756 li
86.9897 27.7819 87.7731 27.1057 88.7166 27.1057 cv
97.7441 27.1057 li
97.7441 25.6911 li
97.7441 24.6227 95.916 23.7568 96.9843 23.7568 cv
106.876 23.7568 li
106.876 20.8264 li
136.493 20.8264 li
136.493 24.8326 li
136.623 25.0923 136.703 25.3811 136.703 25.6911 cv
136.703 27.1057 li
138.813 27.1057 li
139.293 26.0182 140.379 25.2582 141.644 25.2582 cv
209.614 25.2582 li
209.614 23.8781 li
209.614 23.6644 209.787 23.4913 210.001 23.4913 cv
220.245 23.4913 li
220.458 23.4913 220.632 23.6644 220.632 23.8781 cv
220.632 25.2582 li
220.952 25.2582 li
222.662 25.2582 224.047 26.6439 224.047 28.3532 cv
224.047 28.74 li
290.415 28.74 li
290.513 27.7639 291.328 26.9991 292.33 26.9991 cv
313.027 26.9991 li
314.096 26.9991 314.962 27.8652 314.962 28.9335 cv
cp
78.7678 38.6439 mo
42.9613 55.5915 li
41.5735 55.9201 40.4152 55.5576 40.4152 54.7012 cv
40.4152 41.2072 li
40.4152 38.2041 42.9896 35.3152 45.9653 35.3152 cv
80.8318 35.3152 li
81.7723 35.3152 80.7469 36.8824 78.7678 38.6439 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (1506.m00.i125.n030.P.c25.270933473 Vector set of guns icons.eps)
%%CreationDate: 6/26/2015 10:15 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N<dQdZBT'Mj6i%--!J8+[#FTY2h2C9[r&0Uj:N,?AH>J0#jk/IA,5?0"P\("aJbaaW/DU4^rn8#F2-'_)&V36.=Br=+-
%<U6d1SbBfV10/#3orJT$Z2XQ[V5<AJj'$A1M*eg0B\$AcUMd\Alh0i97_@F0aQ.i9>FC-7,s3Vh51CL1p0X5Y7_*OKn)X2UZXUUF
%/%3(7E^.IJ(4jaK^&4`4Da=R%1Z@>0^Br7YXks@-TPeN=G]-)j&dcJUQ9Td52Z#$fr`Q`hr9M57hIe"!r7AhN(B46n&QY+MkH`d)
%>,U.-pZq2^1piBRnD>u`bS4e.j[#Xpl,gl?i5bhl$s'Wr3U@m:UUN2o_<=*Vr?m))IKY?(XYKa'>\s0_r7T@T)-=7fFB$%6Cfu;K
%.)9=s]tf@@5\-:=`83YZ2*6e<^IH+SgKrISXN>ta?c'Z65#cJqfNHKUCY\Tg!RH!KrQ53>9pL],T_>]uqeIGJ]N22d\n\$^h>U"E
%h_:csC_V7ZB[jV3>4k($S#e$""*)\jef)>9r-GVFVIA)dUq]oddrP2ged"3P2[25O)]@N?T=l."9BBM<PXqYi3UG7!VsUr]kaLfs
%);Ci>Ebm\p#@9AdSe)cOo4S9ep94UG4fhcDi#I<$*d6k9p"%-O&*(fLVM'/s>Hc&P/*r3Js.V!L^@io[s!UKjms`%&$;"n(=oL[U
%"]k?T"In7b<V,T)%R:PSh5LDe0Jsd99D(.@Kq:RFK9"rFJ?r<oGbO!2MZ<L5=7Vc/G17AE_nBr7d+N>C[/]r_j]o3A?H^!`<Vl)8
%$u%S?GlA_4H'DI/)4ESQQ7Gc:r#V-FQKt)32cL'1G&%uk'],Zn_gg.J%oX0!8R-g7G?[:INHRgm=I)TYj&)T,.X*]@+KDYFrs;KD
%cqeYH=KpA+T;kWtQ4A!EeO!g[ohR!/4\F1&WSSPnK!9:)s&ZgZN<<4`Q"(i)VUC[o>/,*CXB)%p9uTWarY;LD[8s[OonE<$mUtm5
%M5@1+?Z%^cQec]FWa<g6F9fL[b\=]FLh\%%4DIH;7Z[&`P\fu-h:?"-nh]($.ZeHX'V'P`L0KSm)V#H_S>TE)NnLPc5t-d$MA+1'
%r)Erh0@eBI$00.2k'=R9mkploFlWg?:;,)SSc%dGCT2F)8VMs>eOSbsW1Oe%>J9[,>JXa[W40Q9aIE\(rE;<BgW^5^S!fJ@Ei2Ai
%'UCk<X7X\F?.7E-[C$rT1hOjb-ZA`E61rVj=c\$WCqsuX%na%@qOjGgoa2TNjmK;k*c5MTs4(qmi8GSr5du2+kgr(^X[9j/[p)Un
%WEdsmeS_KX-1&kP4tJ)/6i="b$e^8ibLY+:bk_WFft'"ur%'c2Wm%Y$79\fM/-/KFP17]*$i`i8_S;tg!jg</nQ3EX^Il=u.Q?,+
%>h/,+=8`igKE\9m:7LTGbs/n0[gSYmjERJ.cmV%//p$o&T,l,Om!-fg8%>03%Y%aLN8;]p]paOE/@:k+JQYp6rB^/t*6D6XG&q$3
%[r1PlW:HoAADbU$CX>2FoZKI7B`qNk4>!.DOD\[2>O)_:Bp;@pE,'/lf(*]jkIfTN't^jq!t`a7Mfb]k[$YX::\o4<DJs-k8*)F"
%PXZ.BdOCI+3"FRd%W5SQC8X!>%?9l!j"Q`A6>QHF-JP(p[g]E4MNNaRcF/2#\&RZ%@kGSrdphC64m5p]HSTi-L8.]V9msa;9@b=8
%/]Di-6WB-jFu'0bL"\t-F5bfs":GU`DUt1XG]n/efsqL:m\3ni^SUJ#?16Sbh_)mH/pt9FqfXE?.LXjGiS#kg]7k%0E:"FDh2n:S
%<lVJo)QUoX'Wb>Y@?1A5F504u*)(?/b:WOrkJ?UF4S4:04Xe5d4S5H::'H>tOfL6q*?$^3RdH^r/9h_V7QNPD9M[pb[8*KeB!81=
%Xk#42.g8F_d:mUNlSRn/'MMNLN='91VI1l+3\@4H;R$"*Ke:%`%W3=BZi&;s4rLeC>8cS>hc9s\Cr4Nfmj=p4hTRkUQprrg"fLOm
%U_1mmV(u]o0Y]Wm#\o'k`E'P>=8>o)kld?_?gae5Sn6$CH-[ql3Nl_c16,AFBsE6rB,C6lGg"_VTh_`F0+?:=A6RZcl&@O;<)(>+
%<Uhe,(T,uf2cIus)>*X!:RQ!?Y0)6t7l_<%7%1V`[8?a'Vt2^D!_[k0C%6?&(crJp0uB?=S\No0q,?gA^%.iJX-[$Pj11Uq*H:<g
%I_QmOS,(E<ar*#$qRI5nq@3bjo[JAicfQU:3GVe@7DSD=>V&Gg$nO4mJ#6H=?SuWt1p_Y61g5bZhK9__G!5NcMq"Wdbj4=H'5$$C
%].kZ#]I;j/?XM5T'.;%d33t=b.JW^']1C6-7`95*mC_fD*n7cf2=/P$mbg\e(44,\4ljR'o&%-9SDlrh@LkI3Qc1$:FL]1.jDp,3
%a^Pd+FdD`_Br/XOAD>g3\`ta>N>MK3MgaW*X=X()(]23.(<i9<\C"dCGd22"fJifciV5iCWnoi\%6VW:"kG/J[q:N68\Qn=ni#gf
%/]CF-]g;Ao*5WBYGLG-:B(;i<")1b>>.0C<1X&k,IW7++eai)C(sT0>RX=7XBlU$V\ODESC5s&AZ7)HPLla24A:Gh&.Em_G&!KS#
%C\+i9X0jk%19#,BT3o?LDuQiI)n#ZW[oV=$GK[+nHXMd,fckmRLnCMOjYk0*]LDa7-B'7B@[Ek@JDX8ES$]J"P:]!&:Z[)XRtF[a
%=[aX7*2Y17a^lru]<l>G:D-!S7S0"0F"-fjUb(LoZQ:c/[l%QHh_,#RYPZ@8+&$BE/B)QWc@7'L2#PKibG1eTpKnq[)1IL[pm";+
%AJ'/i"C;jp(R%Q.As%W\'nr@Vb9HG]#eV\i08mWh,4I?X*p=g;niMDhl.Hf\-dQF;!_=]]iL0!;dOi/6iq=@MriI<dbf@U"GfXQe
%RVBJhX@REbHZ<K5[(MP9K/;g0<i"(.RXM;c)_S2dKD2"am$Q#nD&&%VT0>c[=<(shEEq;]1rG73D7IjT2pM9>!]a3%GimVtgMi?T
%3#mi\S8Qq1:;8NdM]80%2`ON)9\7oKpr$r/->*3$YMO-maD38;(*@f2)4[fJ_*"kQqVq):0>%n@j7(E<j],`6':<RYJ+7,):L+nd
%``ZOGLJBhc[K'9aO23HO]pO8#n)E&ZRF2/G,g/EkjKGGcX/])TXO?U"`k\]OdDBa->kDcZS.4:X2.[]Ago)jIh!IsFLQhM$D7+N6
%BXb#t<I<c=;6F/BAgGmoPUlG+Y73"Oar^>Cm_Fl72_DR5R?9Zlo-bnLo.l;_.!TenMf)hsfmg=*be\Htg'KS$<na[a%XM4<CAY44
%mF#kCSN$&i<N=LaM^-r6/,fGM?]-H5>)Op0VS4Z7Y4PZjnQU6?b"89gkO#M''Y_oaVp)',3A#@mY1m)]Eslc$MK[;t]l,:;B[-3m
%425d-d/V)NFr!QpHl,9[S*4c<A9!3K(.7kT'BHK9gau9_c`AHqS04G4XgU2T5$M4d2B7gjD$dk5'BG(jELO2@=<(u+EgcU>EH-SX
%p(k`g$1c'h3+$I]4@YG4Z^f52o50ouqg0^4B5M2YN;f<=nbAkYbb[^4FN]qu\ac\*:ZKL=pMQ4RW;:dq(XMq=T>L#2%@W&+MEb$F
%]rr6D(/q,`meNMQCSgh<`nYC#B<;l[N9B;/Xk9cS(]a/ANp\49:Q)\_qkRTf=2sWf)CMJfghFHa8f3Q9;dN(6'[#+[jNTGZQf<=H
%\^9:dA#]Jtr=gD6F#u<f,l&IG3:i'Z*k^<uONTN5SmA,I4d\(XAm8!b0'h`0?LdRK:W,tK%aFqm)1O9I0qDOiDSp$'CFQ@RRD1?6
%n:,O$G+,aeN\?g1Fh)YpM7h*L?I`uHT/3[@E@V%p#T\TQV[V]LM;\-JB')OAA^_XLR7DU-+/fmO$0Q.@c+QDkgD'AYMd!SlmnPV:
%0l&#h0;#-[h78>:g6iYE1;r\:[,FNMoTZaTER:^*c_VPj9gY-\)(Td_`GBH9B%%MOG5IQXc;]upaMkt?_5H+0X*9]g$Oeg>o=$@E
%n_8gFAj5MMH\U]gf[4`$VJAaV66DslLJluLNQ/iQq+p*pO^e-!;CqhZ"h3dW8cOQ0$c@Yo*/pr4qLY>m8R_2Hp<2oB@HMLiDuO;'
%,2r97)jro)FJ$iM\2;qcMaZHZM7tbrKst@TGAGIscP-^.(@Z=PI:Aac9Q*2.[8*Ke-=aJhXk*CBZ$[M"HUUB$`Dr\iWg-Lfr)bC,
%.L2s>EinQ4QqF+ao`5G)ImmVt4DJL(l)E!0)JQ9P#0fH/SAt4\$;ZS^EoX@oYAn=6>f-C"DTXhAQCJ^`oiAJD;/`;B5ShjCXkYS*
%fj!(O:5^t_`CO!-0iOVi)l_&_Mf-.pAsoB&e)Niln?CV\r2Y!U_rK'r6-?<U1R6hnF+K^(5H&]tG>`<Sp1Pp7@8;E`^UM=h#bBg'
%*>DJ[nPdm28'&K?E'?A=QCj@a4o?/),7AH\IV0T!\COf?K,1rP!W=)[fp_&Vqs@A,`LQhCF"W16Fkc(aMCr#T\]('X5Ncu8#trQ$
%DTRkpc\prB\;SB+%o'<DI6p&/^+K6:F.mCW3UN-5og,#eNNh?*Fl,KsgUV&Xg6X6HR227[DqBAaU%oImD[nU2$9;C*^AmenDp>_V
%DAJHnkmUKa@7\F,Rd2N%GaekXdkL;n]pe5E<N=hj1NQPhpAq4ki3_.!p&WeLSh3kKKl.]OdV]WU9SOq3#JrVsPFcs@NJ5@E;nj2O
%R81%WWXk09gOY9n5:(eP^'B!(DOX89_lR3'(#RJhqr[_p?SZ2AI<m."8$74;?g0bF/Bc<3atiQ<lo'@AHLX#]'Vi)2SFrC3*,EcM
%s36$i_b7tfN(5bVlu[mMmhBU9Hg3N/;7jR;C@rc"no"hVb^<<!C<L#ID7;`Ej%NAnc1co)M[sjRYVs*F+66[SN&*10Mm$.\:Zog/
%"=.JNSE]RJp`em\MrQo\_7pZJSX5NlM_B(qo6C11.MhhFMef&94.g#FWq"t80P9*$96$hMOfC,lf%M<J@l@rD,#r.(;Df6I"hW%I
%fq8)=i;C(gZSjRg0LdoaK<k!sk.t,'A)>Z3V`CP^@`G_oDV*PNk>n/0pqIcq=PS=Nb9@iRNcZlt)DgF0/0Z"=0l-\k&CF%d_]kg0
%rAhWKBIk>GZSjRsLrLX50ddQm>AtCtD7GG>\kUS2<6Qnf)7(4*TSku'Xpl_-p7++Z_7@4B98LQ(K`>0BhfM;uIdoP6F^o>XQ-ZJR
%1Nsq[_Ekb%-Z,ue[J2B*J,<NQC"gplmjcQ4Tpse[KJ8t2Rhq-,nR[E.^UN_,(B31-hj_'hQbr%#mJbror0VP_[,$GV2f4U/`?6`P
%^4jJ6E;11Yhnn>V3.)&.=A+o-46%sNg24o5B",nF]3Vnjs'P?m4F*P_qK_k>l`0;_r-`Q/q_iq<kI)XIZYYL]qu>_M44CadlkVU^
%Br('5efTCa')g'.+"c!pN/6(PH2TD,\P83p1iDqPH-OK&bkaG/]+%hNS>U<3k%B-=_7TMA'7>g)]lFLid8EQeX=L@d41oXD(O2Ok
%es[ERAYlXO(H[0]G62DX$Kl!ZRIfgi<'rD;RsqhU_+AX"UmLem?ISkIf6I^(k%:#Q_p%R_X6FGCUtG7^?^4it>2uF0W)_87^kQ3a
%(4X@R[R5P:^Yr7k]\4(b]hY>-WASInr^"(NQV1)[%+V3,:n.nha3')8AVPYE`fE&79L#C/ikg:'XV#2o[67:tO.)[u.KqX"@Su=Y
%$a^/&Pf.D([o?illa%h\(JO#_T!&i*Sb\]HMaIcn(Yr9^h^RQ^(\L6B?!^E=H3;m'O`bk(2s"e^hQQrQ@irZYVo;Z2hPui>>iQ#P
%CZV4[ju+6^kd6^LU&FWR$6+I`9\_aDB)--qfkS"E#\0\dBFZAb<u@HAKr;mj\a`bsf/Q.P>R:2fDT\50QCOBcP(K7rg1;bG6^=,V
%.p`Q`WbLn-Pbi!EK"C0SRq^G!.Q4]n8E$PWe+i1p.=2il<kXnn8$2b>$?!b8XLH!S=h>,ER9"3(-;#1gjs>D[a@)GmphVG%RWX>'
%;?W'D/et4']2DKAf9"6i/kR$:S<p'bc>ui\%E7\sU>1VP-\[C>-b1XjgQ[VZL7(I_as%Y`J$I]YE`$Gmf=<%*j`]d\Usb(*^=lV*
%;_CZ\B'.(,T(cKS<+@ZKZfALVU/Z#//kR$ok%3-DS\$`MQrB2`/:U$&9QMcJqnlR91;"AI0n38Abg/QP;(AG7_6(<!OKL?[4F)',
%?"52sT-fH-Vq)kAmdkc#cQE(`iiF2Nr(jHrR]<7`]k_6rMXJ5XF=BCK^//nZ75o'PQU4@^MXGteka$8dbW=Kq<?m2fR"s&AX*3e7
%C?\)SCMO:7_8L$caZogqW^G*[q<Y%7JA2WZnm'[Eeb48?ZdTreXtg7D<r!A-l=%./1u@jY,G4,ANCNkE$GJ!9g28k#iU9(oC;f0*
%8"$G&#ad<fq#d^XTas.#7j1(6bm<(K0[$1Tpn',s-iSSc"8OM"m@X$#2/5:A%51rQ^KU7K:5S(.+:dL!U]1KC#EN*9N&djr4,mEC
%aN>L^?f;1rrqF-ca>*UX%@HMi2e-EQ0=^Dc&"Eg;,N+>B\6Q!,hWOA;(B4"8IsV2\I0]*lk_[MLk0k+s;uJ(+4N>JCNDtIpUGD=l
%!ZNf?8JXJt-9_fuB0H^k^^i's!e9-@%M)ePIeM\1r%%PlcD[s!hdaa"E*SmM&"_)fcUZOg95sf[3PtKo&"(U(*mbFh)uP]Ne#7jD
%BOc@pE#b,^[=5k;R6*J0NFB`][@-AXf9Vun6>$WPrs_'@oq5fW_tX1s6^%/>J,\K,19/fi578tm%Ke/!?s-V.^DdP`].IR\>`"6`
%_K,V^N!]FX!.S<=JVgBJ*::]C*VJ^dc,*Alf/I<uIiuYHEZf/r&+p(,"SD3E=7a)\^oIAuI>(4bj'#9,(>>#SDMo=RIH]plZh4mF
%.>GSUQ3I>X))C4Apluj,7r/#%Wg^]%Q#S^tdb.%SC$BI06*#5'ZeXqbhIoDF@=3$h+Vdl'1OktmY"Ehe&'?c`Q0[.`Xq=MD(1!I;
%#1)W-Kn>f'#b`fjbXnq/jod#.U_j%mL#Tl9P_j#CdTO/aW0bh/V!0'@Bh!F6Jq-Ie1?eDcbs/-BAqJ4`;gfTLdrU@WInS5iW/,?`
%b%R7')@H'i]qkW\k0;#m-[bpFo\?UKgq3>sp6YMVQmTL9]lJJLpmUMORJ#TD\M8Zs)e2Q0^onX'ff/MD@qqEJI7F!'1IA')g-mj:
%TC&'XcI.-WMho`oiAH&?5ger*gQOTYDth(m.b-0JLY[96M^!tEiKn/rINZTX[gqU`B!Yo2^q)E;F>Re3EYU.+^O_d1^F&)L<J<q@
%adcD#+>97lH]@`E\T(m?$lZf5YuB,d4,mFGHAlq9Xk(#XppAiprt*.SIi=>6DEl4,]D_>E\Qd<X0Om'Vp#IrR/5*ZTmF8J9g//Eo
%)8>>(Yi/?f>)eB$;n,uu>plmtUY\X=oj4QPO1R!QT?.Q=mEBR\f<9>_s/mZKaR(dL$2ZW%h#]gU4m6N2]Bqms\878kPWQ9jVH9\M
%I,b.6[9i*AbH5*Kgr8lc:f4n5`G]M$hJ;0=5T-e@agG3H\`Z!0fFH4]W4j%(jGel*;$>q!U?D&sHa[_ej3-.[[5SlOah=s`7K_\2
%mmLa)\732-qH<6W`1>)1c9:IDHF<1e>3<3cYC:)m>47g(l]$5jf?bM6i_d&qgknBF;hX])f30l\<)5`R`C-F<Joi*aH<65VO\B;G
%CG;92reTfp0,tJu*>#Ip?=@j2$kl\l[k7pIb?F&,h212lkMF?d7.b]?IVAb_FZUGOm>VZHrJaFEhLT*#8+^.B]U(mKp.@l@r^N6A
%=o1dGZne;9b&e\KZpI;7L*sCKo5Yp4/@@"i#'P'K$B/:PUXDCsXh.pob3I;Kd7)!N6[A9u;)kRuHQ=6:rj0$<oCIq5j6j\YRX,u]
%(_rcB<prJ[ogu^EY@g*hQ#Gr*:cN](>c--A[]aI\9D:`P_mP0n=dIUUJ_.I2ih4[)`TAcA!$_J>'C$Cq;+Wg_pNfZU$'HafIb#FT
%,As-EJ9I3u6e^)<lbs>O7u7s*@ROa%"s"E!?KU'D*>I@=.$N$a6=lF*[p#hmOIj\mX*3BJ*cb-[$-Xh5Z<nHr[%2ce+HM\V=-@uJ
%8G5m56e0R3`iq"D3iH'EK;LP:^H>,eP22msS+MI_0j$JlZB@RXM3U<S3hGP,:1)s+8k>5Qr`7=]*FflA9K,t6SnqY87oQPS@,rnN
%T?G*H45CfZmPLL=9NRT\Al=E+,*R?>-HV0-D`tQ'f>"f@Zf+ddL;7@P0o_?-@C;$]"cR^tQKhc-46JlaoaU#=h/Xa1]AlKL@-U/f
%o"(J#]"M::E\u4P*HJ@&S^_tEHeL.,kPMB>G"0s)2g+aPg<T$_Af6lUR)N)ZhmmQ0B?sF@[4a/<dXqpeTs<^KjmI80W;J(Cc0>PI
%)JEGTLU#S.lnD,ej-e4'a0.&+nJ@QQ4E)nJ"_PpBj8.9TgHfPQ;.jV7EYLgQINr'^)pL2ldHHRm(Q5>7RboinCo?!?'qirH:IV1-
%A$'c%,;(uki*l:TjX(EA'N4=Q$[U`B*IHj<6WlPpj1?i]N%Jb^2b$FYPc?ZNH=\%'.ASKIDg,+,.8+kB&ggO-b8\mA%!%/5-Y,!3
%lcG3;j1d""oWP0B$p5aB:goSc#63D_@$lr=\RWPmBkWL1RgkKT%`%j;2g<!;XK?@b];`AP\KNu-@cYkkTI-_I?N%/eas.n*--oS-
%An%<1Z@,Sggn^^AipB<[GbaC[a((Lu7Q9'YN4Y3@.d\!&%"7cV-h2aV,I[ajYfcX7_VJt8h5u=C=uOq,aH@?I<a<&Es,I1*,E$]u
%^%tH]K5C<<4';VbTl@UTPPE-3UW[#=g28J:o*.s:Ptn+FCP'-]Kds4]6s572IIM_295QeX0OTl\-Ui6XJs.%EQ*Jn,B5F;Ga'q2*
%BUU?b<(s<AD.60e$PM@#pZ!]e[Crig4ffK6;^QV6KXLfV6BuH#F&Nr5`9L_Ah,Fm?E,ZA,RMiD:o[(n,h;4q.1ej8Tf.*P;?g$aP
%_YS;<_Ud-`8PqOG,Xl.4P#:i7U=IRj)`MFp=fBf_BX]=g4tP;)S4@YK))YS\?oN8:8")1rY]J2KSi#ZECo__^N\7sd>7+k$k^;81
%6WancT%4@Y2&OnGNYib<kFc5OWXS;_D,P:\WELC=*%dg:mZ3M'-&ROV])Q-.X;QbM_pF6Lh'!;\H"2_<NcI$I'i`@dJ(Qh'>u69)
%DC>i"hW.]li`%hlnM)?ES]W4;6R@&BL7_(;#8<%:.+(tuT"cu/'2;GJKkt@iT4i,jcX%qV2-nHr'p`I$da-rY,\ZoV'*fNK?A^%c
%MHpWoPtBCP$`Tdj,a"iNUU&u^/)$Y`;!^XfVpa)>[,p07hG.[42pYXBq3l.'!u%k\]"1a!C?V<%\q4p$D@?PSA@^.d2:8Rb9=F_!
%OXFn`"`e$s4YgE)Mof[A+2*UL#Ki+ms/Ir:C>FeO<#^b)]#4C<n0eka0=Rr2P+S9'RT^*V.No,/Y'c.N(P]j%7U%Y#o\5AIf@%#A
%pVBGsBC,]shKl(s$fdqo>XR>?(('ng[Cm,^>4$Pn+]E=,AcWh(Bk(eO"#0:sHGJ+++'a,Y*r`E"qi/UGN1P2O,CS/C<W!!3jeu!<
%$TF2)8oQ-a.aFABE^-NE/Sq2KR'<TCG,noZlF*1i6MmsPbjuc2P+sM2Yl_IUK_lgmrfN_haMh#g;30LbO_`ooCt;;F$b7?aDbZ\d
%;87\Wll0R(YjO@54e679LII+dqRbJWgNr7j'W$k+QNq4$V'b2(1D#ma^lDkD<^qrr$68fI@#/Hu9!Y*/7nP2*P*BJ.<i)`U9?K$(
%5r6>Ua5Dt!&J^"/7b1<$Mcf1sX&_dhRELr%N"?jqQkdrN-rRsW\b01u.1<!)%7GHjeg&^h[$&&(<fr7fd=[qQ>Ks)`PNkT2(fc3-
%[)$^LlC?43nA8L2S`,<W2<Eh$Tofok^T<N3Cn'1!Sae3CQh;3u*"HX!;57249h&AF^n*._X(kTYf!lnXC7VkrFChgSG@Te-U-ojg
%j/>7<720r$AiMHD2]@?gW1p:CN=%)=h^[,$R2?"#@3^4fXcEGP:`bc%WlpSiVDQAXUg>.185."dfr**DBV;U?f1tra8SE:kdLg6Q
%6EO>ReiPhVCf2d/j`0Cn'A[Fk$gl`VgCTNgdKbs9f(TlYn?cD<rgk_n`I@S!)I2P;[F$^s#$]MPmW;nGA-00\?/\AFd<>.W*:0mq
%qT"p,)seAI^4'OejGYQPE@[YU>j5&"mB?2@i'SSr]I!g"860OA]WAS[kg(1\!_1-IFGU.#N)Z1dI7?Aikd3q*N&#K3QH$iLINp^^
%UjHuU42JcP)(1:EO*1Y`5W_Zl^Y7N01ikAi_0d5/;4/,^?bAB*ACBgG-K'?R!ilYbC"S!#Fk@O(niuE5fPn1a0uiCTES8C7WSDdr
%kO2O3\Os>Z?LF0&^M;/DG>h)-2DgjN:8Z[6PeTX@0frDUdL8mbh5\oC`I8O+WI@^*r8ulU*o3W_4E4&<ds<>io>Y[t0;Ad9&''PO
%[j"FqP$'HLF6JV6<[fj)-:g"2\DslBRRkMl.+,d_PIB&e(iLBl(V_=rRV=HYP`Oq'`NPNOG!\W2E\N>'0Z_$OVuH]*'r\h=lDBMq
%0f/EU4f+t=or_nEKVVmGDXI`)(/D\d^NOo\BV)]Uou<eHHcXU(?B(cM1pJbph>rs!j]'ECNl--=5gH!L'P83mdZ"Z3-"BWjUs"s&
%3>il/(<Osb7u_PrD6^0aLE4!1i$KoA\kp>Y_)C!:]jr>BMtVGY:d3;@i'^tlM;F(uRVfFG;\&t;\Wcsj^@)eO'g)\Q:YfZ=%mI+3
%]mK<hZi#:FL%F5AD.gJmf=]hICu'A6]X,3I0OHJGHh[?*kI^ZK`qGn8V[)XrNRI!F#M\'#720t5"+Q0<mQJbY'ttJ:=0;ASRpWL_
%\$oC"^$XZLHQAR.hCRLIL8A5KG:oN&/o>O;[?H":ajWj*RsfNAe5iRF!?)Z+imNSV\CWB]s0C[6>[,H1gSGsM>Q8I".DIei(>SfU
%G.omV^4U#)(Y4N9OgX!]_1d.2qU=W_Bg2E;I&hS(NA'$jf>TDt)ng'/V6INf-nasg0;'3JYMqL.J;&n7n&.t2]CC@1@csb`^ChWV
%d3INi'Ip3V@sdOp_frC1+M*p>HMOrX5<\d=fWX`#fidp]hp7jph.oS+hNt8FBI<Mg]MdFbGd!J*=74c(<c6$)Yd3k8p"RW4ro'>U
%^,C66o^.Q`=.>IIq&4a_YO#S[Y%6#*=tbeOrVj9cqUZP6S]9*aLMP_2c\#KejM;@;i6h8\M^o%$iL=c#D!+ueLWu)3#Fk%Rq>!Tf
%M"TVYPNu9CfuislMlNim?M*)@c\[E7n]nD>)tj,T)$ZKL4BYupXmIs`;,d&TTsV1thqu$>DKdu-n9129r[30`WQ;Q`Y&(eRIbM$P
%msUmUT=1&9V5O7]4WKb`r#L:C_QJ3rF8^ou.04j$/QqG`]n=1JH0[cdcH=0[2T,($=/pt35Vq!eh0kW==a=3+;Eo$3gO1Nok>ulB
%akH(lp-)%:HY_a-e(n$9nEf_&Wp&9&Xj-/*='oYu,Dr2/_]:CH#"n9qLe.:RPJEKV*+Pt:9:0p9Vf5,]%3#56b<PRdQ/$*4qb#gV
%rT0*rEr"\m*Ie"Mp"&`Og!ea@<Mc<L\mIJ=S_=R25Yc_&E"?9TIb]AOmF`WI,q6K][!o]KC\&LumdkDE5-t\6-bECD;Q.)&B]\Kl
%c$+2mY\%Q\pPc5eh/V>e-uO7@=)ZlRK6PXTP^K[kjY2:I=''S!_:N49R]Pg\+*Nnh>c\:$fj&eX==t@-Cr^k\D89M*<aAbuPb5Fo
%2c'<pF/L\fKAkZ\N2G2!iTS&FhEgKBFkVmm4dYN8_/W:%/jJP^b$X]!O1XT+f&K*!gKh4%7o)#f8n<uNh,2nLS\8DVF'EG;ME#0S
%AdeLn79O=*3NE)#O64X@iRaWQ@fGA@Dm>YleRH8Hr'6]m`&R,N2#*8YETOi?HLc(=q<>R?#pQ#[TVH[4fXkIi6!LP%:t[hZ`Q#O`
%0YPSK(&2LN^Xp#C*X"!_m]/aJD!q&O(\rB\c:N/]I6+YUh:mE#o<h`UGgM+(IJaA)lsSqsMiTO.<\H[i:35@X;X*^Xs/aquSU>c]
%=Kaql0$4MR*^8btdt@AUp=n'pEcK]\r>qE\>-W687m5;R?#@?^M\#U&HPlNDYZn[;nK;Y!-;($aeb"Ji%niQGT01=<2`d#mEj*[4
%5nuS*`UVL=D!pD?P86!MC%SXFg%MCiE0r<W3+^)Bo(YN0,5:T-Yp:;*MeA+=>S/3RJ6Omu>2FPaBda$bi7_:Y[+?D;ZF\ZE>s5;P
%JW>-V%]9$uq^YI7E/1%I:0+i.q0N!^'q)[d78=4D?TqgIDXDb2kUCLmq7%`oT,qf%m5/-O=WFV@nO22\cJNQNgMbEi`R48fa8"7*
%OQn2hSHjB,kO>B^<pdQp9R(>CVtQn_h[B(@ro1'']jk^[iB7&?03Q9h9m6ND]H_48D$>:ABAO6uao_KV'<nkg5:P8Upt';[j_LIT
%j\%UYmEH,F?-Zs/)d(:Q*&Ic)*Ln=d8QA5Ea_$>o8_-Jtl"g*&Fnotql[;A7@Vno?2QZ1s>)8bf;%[IG$Tpear[dC@CJT*SoZ\gC
%F+T@`VIo2$:Ci@KoR#7T2OMD!gXsAOge1L7DGq-PDt"Xp7Xa=q\6_=WHL>M"<oK<S"BrlDK5pe@oPWFcd7J7EYAHQ].ETmZ&^QI9
%HL`m65&(,uU3D[X,,#8fp`%BrNc^,L8m+KtW61KMWW97n02:[m_.N0Qa\jC<<)H2sXE$C;7_VVs;B8^h'Yu0CU'gHGYL!^+HUL<_
%[Z&h7BZ8bcOE='C/>Z/&W>0G@Ehc>V*"b1^Oi[OQ*/Q%6gs&FoMIn5#,G$-BQ#%d:?]u9pPNlEE%G;&]5g-l0JVp7BHl%b%rtmcO
%MM,D";EN3h#Y5Rt8Q@V#Sf4'A.V_*(k_F)T*_'V"W"5k_jk,g+l'ZtnYu;c_iauX+MBq11OTTp)=,?`mS<-CKPWDN^nnBZ<;M$,"
%\p4MKR^/pY"4TZroUM_:eOq`He6c0n@TLm[Tb_nF;Xh0K$Wp]K41$VM1G$VTElSu_0>Rd?fh&8Y\^S#@>>P^>hHS\q",ZN5\Rn)9
%?8$.1chaQ#[l:Fa4"Ip]h`hX<g9pg_ab,V/B"K</42!&Q1"+&C,@O%4-!:6Ie]T!4&5:SDT14*UcjZ$_2F!Lb3Tp8<$h@LqQ<))#
%n_5]JZ+IGji>,``qr-hbm$uUHa/tOa\Wd#AF*FIf^2,uM5VpCH@&Xfc6-#$qLJbLas69/GmP)Cs'H)HrUMmq`7Usj,<ATHLB'%8l
%Gm'aH*#Dq'++G508'ZJ\AO#q[h<U,Z[Ppk2HbI=#=.-!5^&s\?kA95DA4Lo+B\>chHs0;NCD5^PQeKX"`TuC&HN!%@8EoQ']^uXQ
%qsLA8o0rqKiP240hEjMnbfRB1qqPVbnGV0G^Aa\,DdG8e0#80Mbb.b'I`(D!NiR"BE%O!/Pg+X)pbH+/J)U]!1ML-gs2GSDYt=*c
%KmjS_*5sY((,"2[4d.J1G+O-bHh-Z7rbCO^I_GaQabC]ekU1HZj/t/-Ve_Y"fja<_)a/E;S;%#IFm`\bUEg"M$)g=MFFg*Q@5$i\
%;^q8,<&f3\GT1u[VQ6F#BlI@)R0T%X/&cF>:P6O@#B@"irFjePSS%?$#K_:!hg+j>PZJU.qX&FailqgED-.7I]5fBaGE&Y3+>qg'
%XU!JM##<M'.40pZ^HB53ghdM7fh4W[-P>!7]taQg(R<F,S_$Bd^s.Ys.i"BfHs"P)IWb4i=EmdS+2fqlIUJj7?OtGCXO>;`:@-^_
%_^5#sl[/H.cZ_9JT'i/?L%=m_$Y,QP\T<2'!e/5<76GiS0M(hYkLtB*LE;*M*JH2KNG>e.iDT7Squ#LL8BpT[Xk]jclP#`tB5f6q
%HKEi7nrL#/;mF%3o#"c&Gd$P&I,X@Y45$Z`LTu-Q[C>&K$0#rLZ95@,.!QR!_6^3!J4;SE%Jgg.JH`NfFP>J4l`g!Jbr60>>)^f$
%)L"+n#"RQlVf0^"E$<lfh.Tp0ceAq+oR&7=e]H`BcmZ=U`p%%MQ&DNE?55Nfl"747YDP84A"2X&'[GOg8N_u(fo2HC)DO4800^0n
%*Aoa5"n/5"o(9hda2:nP#Ynd/;oL,kH:uschC5"$KjFOa:rj\Zf=!VEID:fnXAaSWfZL8Q-A^S`k=<-j=F\)r*Hp[7]HMS!WqQ*)
%p1dA8\6!pLeEORm*\RHc:@mtSB@nE3gmu?6o+Ciq\@9*@QsXOsa&r17ReZi.5C<l`DnPsEhn42_I_!/^^:9uh-C4iQF9p0+$/\qb
%^n4Qeg1%5-=j+DlY?ui8r4#n.FUh&T@.8LhRPtN,KpS\BG@M9(gICEA(;FMVGL*AAQbp^UiF7#=I5&`fgUU+lQ(u?oKGC>8X-ZK2
%TO!2^U::-eD=4d<NKZ)i/!Yn2hcen)Xp'I5dII("NVZ`V!XAY[A)64.Mpml4&=V$WYZX0).@tB_XX@>\TDiN@0ON\Q:AaR_;N%1+
%O:?70H06s+T"eQ2(lYhOHN2#hEOd)P8j$MEV0tG.+Bi]Gi`BnWNM^haA+T!^,Cd:EpgJNU'<kp-<)G+mr7C>VPDa6VX62\[7HD,W
%\5ohcNt70E)SaRg(<UHkiSX5YHhBmWHfOU<6V3A;2FFc<Rk7Dcmm"YL.3.E/:Ubg!"@P.hYEuFW3Tt<u'UQu?)1TDfJ!GN\/@$7\
%=DZM<T*kI\j.dXhS_YA+rNGt`^e/(L/hXn`<XPFJ0(tQQ*/2"sA3o!Wo$*NqEu0PRHXC$_dE1Oe:9$N"WpQP37`"u/p#uD')%-2j
%meQ_"Nk*ge$1gq7gcm6Zh0X[D1bcK2H2$Y!IY@j&_]?MDh`]kB]Y&6gidAn>Sj'YoaNLpgW8<\pYpn?S8`^P(o="L@N1`;J=3TjA
%JGH^gs1VT;4nYPJVkc8]cL%4c6u[Mk\DMIu^ugY7WX,$X:^WPD1AXn0elo,POkKHH!B9;sp%HtccF]W:bBbk:NnVeO_u>Q7pVYfG
%c_#T.+-,>\EFZ5Rlp%8>jm;0$`qB<]n4e)\q?5m6D-S/i@(^XhVQk1QgkUqV>epX9n%?MKmEp]aIdZ;&<n08,aidc96F@]4)RM)K
%dQbCYN4#oiamF"JSi1/TXVe$a='i;LP>2Kl1^`E,lUsP.>Bd-8CUEM-<&YsZZp2+k._ktnnFG\l\hr@3f-b@Q?$<JXgrLMn%>XT3
%1+WR+lhj=/pN20DFZeB;.Q<ZJZr,lI&TlBd@oTP__TVniq8>,D=reT2-uN8f1Doo<H1B2?<<dp?)gim7@0SaL?nsq;A'9UST?#-9
%U]W)A`Rf&rDL6)N_V?[pml,=(e`U$.MM7gXPN#K\"[2I[G.I#,I!"C?WD"Ncd';h(>E_'eE\F&;5L6gJf!:?+1kS4<ls\-81DJMb
%L1f5Rl^YT"o4E3WGQ%a\$8ZjF-!s\kocoFu9]EGjA"#D,mF[IP:8s6s7Ifk9'clV,\b=S4@re[qJMq.X@`hH5m"Y.&gBaEb6NbBP
%/sK0*5,7/C[.hNE\[`bpjnkn6(D)/bqdcG"bu_W-:rj\aD/$laPcqNRNutKE0TFj6n2.Qm["Z(o$S$)F[N^4k`cMQIE5aWF\@Hp0
%KW@>MNd%K>`T<G5JNh:'YHL1J_ZpW+DU1B\d\jJJh92AO?2qNK5]&aSW2UW;2q6&5B<*RA?QU?N:'PY'@11$>(A=6j*\:b^9lp^m
%f*u'aG-D[>[gEU([Z9qae^D.Y@icO,IaDE)m%1\YY9h=[o-Q)9qV^1rh=A&R]0"9&#:%gda<5d%l9,Q">t[g]<#*_CChAK/>[T20
%?n@p7rW*f1r[U^,Id]IJ?[OQke99W`%QG]kODD!\'ko;tTMDi*NLfOqO1#Gne^sRRN5CM7jWa-^m`W;J>bg("MeT[#@/j!SoLQU&
%1s3=.(2ikQ'r>h+p\OD_"Z:D9dU]q0IPL%jqk*Sj7a2>q>:QNiYJ-S=MVl/%9p@I^8eq-"9@K*Y:Ac"e6Si%l`fbKC$'pMDbCtiZ
%SU8$LZN$_Ff#Y"0c.'M2?G_Nj*fH#].jqjC[?;LKk>BD',JbtpgkQEp!IOPR*KQ`*fBZpY"PA%tjnINC8+5m^?G?4*UJT_AHIj"@
%D_A-E(ELjJT@`nYq;Ht5mn*]I>6#/coB4*!rg1%Pp;>U`\]5PVBVEmo"KV4hg6E0XY3t\*oM7^?StG0%'e[0)oiREs)D#<;7&imp
%/N#)k1a9<5R_S^+oqRm9g?rbsoEK.gPfWY2(*",?q=8[eEIGME[[c1-m`17a>nhiDUe.CX@.'X$EOdR^r3bls%%QZU-2*QFI2&U:
%T!&q<K,j9e^'6CSiEDr-arS9THMV=<H?3jrfdoU@'^NC7I<RG+XiBTS7_Q"omWaeMlat],_PO+je^MuoWgd#_]u_;(9AfNn+-3R7
%fq=]Ap@QYJXjZY&Q^p5-]%r<hG,`5a62k,E2]od_SA26J_mFdeI.+sUk8PkoBGulpHBg6PX,IB<4opYW<kQJbYFe#]S*1_<m$Bq[
%FFX>`EZ_,mMn_9PY/?KPZW^UCbMZ[@5$fhR\8u'f([g5Hal!*-aO)2/>UkSiEKq&l%mF=.$5`(_.hlY8)>I7$J&fTko',!Rg\I:b
%q=0ScL]Ab^4P[%ImXFg>T0&s%Zhe.;GddHl_e:a(k]F9s[#XI[I*5l''d)G$4uG.%NXjsi[=@i"0o>"rn>6-CSi0o;.bJuCIX;Xt
%D`HLT_(\&$529?l50*=CnsdFIH?VSXGd2;8e!k7In*a<&=0(Q84B#ARmK4I-1UQ/MMu`YiZ+]sUD3-j(M_jirX5J]8Y@0%RY+;U.
%@fg41c>mfDHh5FM*RWS*AVDe(?gQQ>@s^A?%J7Y;'ddC<$Q(cqeD9,:]i$6']ZT)V&7@*qk:c+er,h>D7sk!Ug<TOpX'34Z>e]M*
%^!H5c_B"rGhtcn`GNEi+8&;dOetOJJ]9@`g^gCd3"_Zc<q&Y8pQ^ICET)LN,[qo[V($J]W<(C:cAQRGef8X*$>A4VTM\,!th#5fH
%#!]r"+,e_=i(Y3Im?Ci&FV:/g>1^J6QM=e8&q9?WlhICOeL8SIQes*!l8*&I[g4b5p+u?/Xc/$Kl271R=DhO28"!85qB=JXO1K'*
%c$f]i,qLS"[*G?6S*8Qq,k;@.%Rsf$HiFlpOR#U8:0ZuoXC6-,?+8_0K(Mu5<`tRrUE@?c(]XERirRQU5r&f>'f%:I!IdCq>68V7
%r!JiBG[McUGQL+(QGm3Ib6`"]JMFu(,1a3XXQR3=B$KkZ/E]2e>$0]n"!Kc9/P4G(S7sAZm&]Zn%fl,NoAH;K#nLdmj1@#qZBifW
%Wfc%=TisBPf6&*:KB7C*%VJqrGD0keYrG'Neo<:=6.h4<ZJ^T("gLNuA;,Q:+k1Nfbji$V@6O`X)"[kp*4\EDKuj+Nj\pSX$K_^*
%/P.e'7%g6t!<tNi-,d([9ZZmT=4S4`/.4TVa;T3N&[n=Z)dtF4JX=c`;%V7@#?csV_A*=kqED,P,8c#_E8g(6(^O!%V\_]s&RA"Z
%`10lCl2ckQXoBpWH=!gDs&i/?j8.Mh\QO]/*-;dCn=_*^0C(DQ8;o5)M&1`0(h&/En%LC`bR1#9b9c4iQOnrLl;_99mZXTEUEp!O
%nEY`.:SKahX0=D4Z=dAi8i/b;BSWj/!91"E2"3esqa*dfi@_Hub.tuR=P,n`#],3@5)?9dZ:rCg]P[riLk>lji);Q=%-gjpApI46
%kEu1W/F.ZA":@F+\fgL0#!27Vlrt<6C_e;A%:%#Y@"Leb`@6EK\.%Mb-bIA%U-.??^`[FI/E=;a.9MpP_q5*bL0QAN3%3f!!gS%-
%05BnloO-,-&\o7Zq9OQ+ChFO5C(t0`2P@q+)n?">Cn^oYn,ndRYK.*WT^D53kifg;\\i^D()Ae6h8_NP-pU6bha[f1)s%^r&hZjK
%Q\p@:Y_A\M`"n@9>S'X4nE_:5p*'p$$9UghHl-56-Dl4T>97<=^jH3OnH-X:d^[*+%r08sI#6K>9LV2HE$W;:(aU:37c(Ej!^5l\
%&g76\O3tQla;rb7#Y9Rm&_D)P6p-6M'!X!TB2W_g(U])-1JNDr_-(U_7P$Q&d.]X)AdaR1`<.(jMb1%-[mGBhhl[.<3M8tG+.!cX
%Y5meL!QbXu9N\_)K7Jh6:]?CIHpDBLAT(6;#@ZU?e[YB6KYRRjW33+PV<n*4^kS:-paYK$.:GK/mD3n\K$<a""/&'aWXe?fiV"f>
%G^@o_qOkk?Kb:OpL0qdA\fr9eJMH5WCHsQ_/5(ZbL+&"Z_i8\&edl$!eI\^51DAGtb:ss#]OMllLmQBb`4I9jQI1Eh;T'lf2X")d
%Ia!ArA3!nS$ts=#f5XZ!3jSWf@"Z9Xa)@:g!gAe"F>4:X"K?E(eB*_U:Lb+$S'Rr1G#=KXP=1O$QY@j7+<P>LKnXhHK*6uBP62Gk
%3,gQNpb"BIKIuAR^nk?f"ToB&a+`tC*7lC)F;u`j8\m,j*qC,p*'qLbN4!TgBM"qL:#-Z"mK!cWC;WEXJ;?i*6Dk"D":@:@7=btQ
%&g<W+3l<%M_%7'&"s>6T]s!hoo/=r<A`UXa'I:7s6V/BAo`aug_lZ2,,f1p0@*/XH/OY-n3YW`ufhQ"qMG5XM`<'6PbW<Eg>&:Dc
%3GM]=*$uh5;@[c-8WBC2JK\2hU&e2.TSA&D!X:t\ZTnNmKb@oQ;`07!L05Ii,t($\p`A$`KK/0PXUuROeE#`'$4Y86;A(;Q=)0(g
%P"-ABGr"J51uQ1M"ga&O4'_QraT;hi[(gOAquXrYh8T$e<b/3+6+PI5iK-G/i&PQJ!?Fe01Q&.6EgdR['kXE/*1,4u!.Do-"UH\7
%!<Wic>-:ihI[5G:"]H/?;*h2(Kqle@nH"om^Fg+PDrGX;@_6Y%6d<=Z,d?JtH.m;=ps;)?@%+\O:^\/>1L/r@'S2'"Ei9f\Z7V3S
%#0)CEX$U+VUX&Ft>i5_n!qdb]:dN#"kVJ<'5[^&6'(LA5!d"]!@L<Yc6lISoc:4.`#R1gXa(=$6d(TYURDl?mLWd3H>R>uo9rks8
%Uq83X$;_\EluHr._ua[Qr@SI'kZ_.R6X/0)<<6Gb+otUO_NIAE+1htm:Ti=kM$8,UN71\ni,nLg,@S">4ClR2;@HSnM/XEYP+hkQ
%r>5N-V"pZI(FNm[5UM3462QI2lQ<ek6u3t+LHG_!aG,N^Z[pb^^@fU<!+dQ@:i/BKX[F']mQ/]+FsH98VNtm'D-T=GhbqI\^l\Ub
%36KeRFXHJlW'9.>PT+!Z%gPLf6D"L3GJ,-#=YTLefXe)`_<<34M4URt`tt%C%c%R8.B$:Tpk'b;%k$jP?h+I,,>F$q5OhIk!&9L>
%JJE.S>l_+QE2Uk(7a4_=N4R^(,dUl`_aO-,9H*BTNY2':(/e;IW#Qct+k)KAdf=5Ae"_5*r:##%CJ"YRK-Z;IJLSru$t:d',uAQ_
%Aci>Gcp1$t<g.'*W!B,-KFnI;aP$[D`l<]K_\-X$#uXtM:EK@U-#"7m!TS2u^l"(7),)oC#AX74$:)\kY,t"N9]AI)'2"t@-hDW!
%N7Y0_pS<e"NA.!;4GucU!N=tK>iFVGXV<3<m=L=#P,MjsKj*EkOI8TgK.J)$'@Pi^*RC%5!62ko?&+3.UF\fg8*.7_+;#g?'1C1l
%Y6%OfG,h)$":@JZ*?ialU(>]lR$$j3@Nc1T<^6E?YUI$BU4`CS'+^L]&Q,SkGc]g<b',S-@lr*G"g?^ZmUocW-nZDQ5t5cY623(B
%GErN*0g`/FCf$1DD7gA-NCh<Q@LPd:QEi%oV$9t*=r\(W[kRG]a@lfZ;(@+4g]mLHLL<T(_\Km9;.LOi=&;2#]?6LQ!PODnKg#o9
%Z8A+h>jLJK_aoZc35Gbr:'$_'bS+O-F.9-I@0(I+,NN3+%$VY_HnBAj'>qXQkk^`F.TfIM)>UK:K@toD/dEa.QZ4\(//`'j37m1>
%1kZ^IE:hdU8YVlWW@Xu+N%q%0=I)Sk#""[kirk@)pr@;`oTJ4"2B#Z"%(i0YPalE#J:S<<35Jn@fT6pXJg<.O`bj)_^?[dN'W_sD
%\u.6U_(<]96enQS!-q2,&EYbpA)P89-il4=B1imCoXYEr!^_j3:'OH7["rLbN?0dU1a.\F's(S"apbs%&3V&>cmfBA_:DFbPJH/_
%3tg_D,n1++%kaqFfS8jV=T[\n\Y=3LN&qRhC!PbOF7EOe7\;3].Mt@$h@1HcCE3M0idg6Dlf+Ah"g0kc-KR!:\HljkF<R*B#/\au
%ck)iQl`D!W@SdI0!6*$FErZ?l"a^Pl7gu:M%Dl1T@W>%qbbB^9#JqnQ34LFm>D%_h=,o-1T-J/m.M)dN(huuKU'Q<RAP+mK3=!6-
%O3APs@!sZ/.?S)F<-9h=@@q?(Jt!(lS?"U,ifrV"UP.n?^s+7Q*sPY'1=5<:^C@3eP7o#h?4=r,+m:@*a$Vl6&:o9Hfig+d9,0!a
%)?>e^BB_9^KL<hrJd-P2>iUahlS_hfT8htg9HK9*Tcs%T(fJM#NlhB$[,f7=\;QXnL?5.Rd67,Td0;qE%&*Z.88jGP=8Ir5hNT.a
%h%n3KCdH]oE<+`5AqGZ_6KY5#02Pu,j+0*T&LU0B//21sbZ<'`Q-YC>/f4mkb#&Ka1aall1ibKQMnKSRJa>-##7%\p!J!K"B8Cf:
%LbfaCU")Vf_"/=^7jLROo7U0cC$ESb9Q:U##/_jN].Pded.0HR$616oK2A4++U/E*\I_2\ib8(JOloXCKMh1D\Zl,mY-<:])S3r]
%KMq0p"d'7EK&DK9Bdd)pBEJAuj?Ofe'gR,tJXPK=YW1i)m\o@dTbnRL,qt9=k\_!.<[E8I=:ki0*CiH3^77ZsI+]>;M:%K;$?T9I
%?bfA0Kcc7BN>g1%PC5P+,tD#h[&B/iQZVO1'Xqp)L>#phEL?_``qE\^''_/@%&4dW5=-LESmp7E,\3*;)aW,+(c)YDYTuO&gU?X\
%Mc!&-C;W\0%[/NFM8k5'\Gf2j@s2rnZ"'Psjqn6;XDtb:A;>!#+b!7BBF`"bj7KXE_2f)Fr9.f^3LW*k4V<\K0i5t&DO^ur+LJ;^
%jX0agm21[\`"2HM'O6-Y,#Np:Nr_]I(hcURK7Z5uNVUt!`=Jof+:&C-*&L.O,X2]C.lYQ\R-;s^MdH^A+:)V6i^\c5IWRE@*&P!]
%\pFJsnRJ5T+5.HKN"3iZ3@d+:@)6gba%ij+>BRfMHl2ddRA[B$5S6'^)ADPu2Shd<Ak,?+4"c9B\3U]$;%=Q)a&1T&-9km'=Nm.\
%k[:rmC[e)d0g@];;i\SDE$h855<>h>Z#H=-QQe2O4_(5IV,]-Q.kpcbe?qGO]FMXq%s7JV66SQ?)H(H_*8Y1A&fU=NU;W+P4"c(s
%)[(Grp3K;ZE0o>p8UanQj93Kg?nhhF_2a8ggh:(h2TnS<3tdKTd6PYW7aXq&(^?(m"="UR1Y/Ie7(G";."kh@Y2k`Z",^28d"lK[
%*HHWR)KB8[OrXr4]!fEcHC2,q7At@UWm"S<8eSPn-;XQNLRpXfpsGe&+!$=i8+4ltLrTAVW8bkC$D&@G<a3n;,1JZ4R`"M<5@@sS
%`YsOBVgWTF+!$77dF!bjiIZAHY-'gC>JPg\phd6p6fVkpWn0Kr0()gUq$X`";p;"c)M>o&'-]t8*QFa%Q;JP<i@)\"5'XOq=T0"u
%E&$TD@/L+(R)tpf0m&D2+2pno$jAZ<4h-Ch,NPO`pN$F:*_Hu'>XQnWZ=G^dJFPpl)%`7"1/8mckZ=`h7Vp(SY)5.4_F]>eGIeZ>
%_0$_^Ca21Ne=L4T)O)>s$aPi?g:%oeTG4qUBj2#5qS6ad3TCnHaSi=_MDent\9$Xhi0MKm3eYT5V@EkgZkT63=[E%ul7!V'J/(aE
%gfFM%mX#Wg6kim-'tCRe'm.gqb/feP$_B@2H+KRS/92I>EC1Z];'5-6.L7qoMR_B-XFmp3XLf*s2;J_2'o]1fIZAtJFN]'h<N-_#
%XG#O>62Q+%)n;53&-MQ?L_@$6pU+"G`[;Q5&_g5IO,g2cPC#(%N,^A956N+1\LNUHNg+VsToXR=^]4n+;<M*;d33PcE)*ooL6@1C
%3?q3f8J8P7O\)$r+G[#-&D3O)F?(!Y'?Ur*Gl)4_EM0UOK$_[L!ssu$Y.:p!N?JRH%Kg=T)PgP7;.0Ws?EB/rn-?GS&h$;Lle6YX
%QtbO&C`1G;JNc??F$mMjQc[619SN%;i03:V`KHU`_KZin\7*">[ceok#fk;LX.r(nK<r_P?cSP&'lM5L(ZS(*KUW6f;J@8X":A+/
%R-\cP&7jscA#G$.j7o:E,n5rZ_R2'AnfK+g[;?MbTLF`n>#j)1mPUo9$$COB7,uet%:dF%m:Dq1XW>jeNm(*OBcdGg1uLFS@jj`4
%'KsV"P89Fti5?c+*Q`s@)aju\o#@I$MD`>!Bgdp:7=,GE%gK(NJ?(X&&4T\&<)aHe2<*]5[%nO-LpC$KTX^n0,/-m^7LT>IQIO)9
%_[rCs*p!mo>PLc(STW)l^jQ3c+Mknn6jP#gCQuWOjJ$$\!ZT-5_/t?q:H$*eWsJ?:_:1t:aNl!i;)SbJT[4tf.[`7#4Y1,I#GRkF
%FL79#""*mRdu]"5NMk>0+_-%i$Z'=9KLBZ0o<ghBHa7c(\ktd0C/q@_o7\c[9Go0O"WBuj>-rb%[tQ=FTSND45lsFd_Q>T;)PLI>
%7HM+j!=%ilGsDX<J_IT>0YJ*!&7l;21:BW@K!N^BEs6c<@1Xt:j=%MX>(tYO\>u(*d@&!kBM=0m[\T:6AP+^:_7*YYoR2u*&0kSI
%=Bkq^%7/n\E:d$n"\3@!`X&n;dG!a,OjXX.,/OHb$"C8>`;k=ld"Em*U%8n.de]=dBS)VX^psY1R!-EEpiBDr1#QPNN*OCi%#p.[
%;X-VY2Jurd=lH(7k"#WP*Rp(S@O#:>/ngmjDZnaHbf@@QT;2L9!"VHMN)Yp,M;TGWYRI,>C?fF54=,MY!PZY&'X,SG:tk8IQsbOC
%/-.)9d\&rB!EoPheqMC1$ZLJVg;ebqK:,4PAntfr#YL"DjEknP771ImCh`0J+H2h#;c\j<3rt":BFH$*5"^3U<%+SrZ52IuR)Xe[
%=H!BMo&cD07H?r]mYfc(HHc)A=[mi!iPn?@`"cmcO!#oaQSMhe8h=@`a5_mh-N,Y<4\SX=90-fD&gN^i+Uh+KPTQ`q)!8b)+G=.,
%R=kXX<@5D59h/#KDB/P@hPM$p*DDb.$j[k,ZqH@%1&2/F9J6[[(7Bd\q.QO<&8iNs3VRV0"),p-$W>t8',lN:,&Bb\5/=Hi\J3\%
%[MQ/e#G%Rf,n]0BVT<F!$A>Go+/2Yq,Do?AJc[;NBZn:\F='IC9U[kq8fn77b2foaqk'qCJ6\T;mOe't!5`"iBo+<=km60F7g]52
%ZkF4?,o$#Zi")S<[3'/aQ0fqqo\(<DKYiBHMh@%]JBIQHr+-qO(XZE=P63e&="@5hW8\Xq&uhSgMD,oDODC[O*_!5KQ"nDpBj<(9
%AJ*'Fo+d.`QOROjUHenpBUpluJ3^.hQ-gJ%,2,%D?/`t,<<pp[EKo/]O,bNFK[H`)6YqmD!C7UX#nWm9oDNbmaN"BF@#Sb'PCiA&
%EMZL5&?U;qL&O-E!OQJ[2kiTqR(Rf*7$W$t8ts`Bdi&O0[:*!0b>EC:Xk]2DEHJ[YP[<M+T$T_=(4PluM,*#+*$@Xg]Yfi85j+(/
%#"BS.\Wh1Ifg[/[&=[WQN?`),@0?iE*GiP]mj(AAf`Nm^:<u=9M*T@'*>H"#L$oB<>4G"971!R^pqd[/\;SIV8`cm2=ireGFkXf2
%9eufR%d'kQJID*[!Q+RO6<m\l6A5!,MqKC]08>n",ar^Y3^diIV0\FUXrf8(<M,<2^1l@*Wa`2[Qps[N.9\"=>!^,/>aYdmS,#oe
%U:L[I"A@Z2M:#B/.N)d\aBH%'$[CCAk)$gh5pnN&obGP--"gn>V*f60KrE[+3\&ejRu"[!Ur;JsLg[!JA1O\(5bcOBmZarbco.!J
%P29D(Wd5$We<9--fNVYt<Z'TX0&6!7KH6g)D4,*<Bh6`V+_^M5%SH0+lEr5MaY<TA,ZcK51)8E<,B7'"F\14eGRRC$!Zmg(9`p&;
%KD[*O)\qE8!9@Ql&4/8qM2EG;``ReqJ`t&U\3%eh&D'Df^.U%kLa"*?0.P>hBVe[C(nd)X(sQNK!AYPEU'C+o(to^LIYd>+Zq*?&
%I)s.JA6ZKNd6M/eM_A]_L=^9fo#R(S5A$"UA7I`6,qQ$P"$ASu"`9NFL"&\T()L,r[mCIp%P+Q'/[!<H(fa]K#cD_,KjnL?Xj=:2
%0C)/)7dFOfQ6`EK6@nZO@;Rp!gI;I8B7'3E`]B=bTlSJqeALkZTaWVFBV;Z<@C6XZ`0<nMWTBj>=Wf'LfeVa3!1B?CED8,:%\<HT
%>Jr@D))ikkV#Wl=Q9sm7&7iM$gN=6AEMaj^3H/%"rBE`/7H#f.SGSHd$Sul2!ln=g-c7K8/MK,fjh$oG-'Tjo/@6*'Ek%hSbRGmB
%(6W,e.M\8s$.:NAA,ER)F@+*n[IN`-UKf>s+lT@u;1NZq'M*"?p+sT3!`b>oMA2Jj5nG^f^?\X4'2_iXO^!PpAm7Td01:uCKdpZG
%DT"19_A\hWQH?oD,)l)S.C?6#b6uul:IirJ=Z#2ii&NB>Y]ChW+BVJC"^r6R]dbFY&5dC@".;?u'k#3$4WGh9-uW;&kQ]HX_)#,t
%:"OC&EjCHPQ-_r2*^<N*g0WD7VZXhMg:GL/&0>IOaKcNc?D(mhk&S(k#>YKnjE)Nr'fm0AX>!7q%8$.FI%]?XgfL#oGnbp:hc9-V
%\=nP:*Ondqe@U["N+rO<ginbCd#ng#c/N/q5T'-%\D)!3/hj<afa2PEQ+n)Y$6EK98h0*e4S6Pn-dfuu=*S-mE\K&gp'e;/6\*HO
%)Zu"DRc.r/pnQa+GciYC(*25:'=)-TNE%EL#Vh\1U5;IZSfK(E(cUDA3:!BA@r*ILN]&%/g1#oW`5)kJJ-GcXUXQY(fB4=>WpjsK
%7M?Qb:asJBNPX6iS9/fJ,K.8<TdT=pHf0X-Zg;*WboL"i4*YXI\LO%s6I]L3=(E(`hg)fE6\pH]37<^%b40:RJ)]uD8na*i/4(CR
%BO_)aTrW$^FOcD%.jAi6('Z7#fnkC`:ri)HI9j\![@Gq/ihIaG)Pr'p(Pc"i`D12HY).E2lI#DkI@\<dMGuVL$;c_:CT3#]@L\/c
%cp09XaA.UB;ClRbR9]ih]>Io_o2#hjR(bt_DqcbQm05Bd@ca>W:j[7Z7qiEFiCoEbdBXgN9Y=iTk(LHXj$'&B)N#(B_UeM4+l.O%
%;:U/BFg@'`XdHbA1GP_p<YO8HJE98sR2AhE<.Nc$@i&"VBb]]!#UYt\(u]EB[eZ.n&Jntgf]iVhTWe&9'U4rmTJ,B<0(9ie=$c)#
%C0S]UWTU;J9\^o_?./0+/<tl>&PXD1aGh*+4ZQ#LbDHWVKQ`G','+!N%p'[4*7$>Ed/b1tXWtun6ELXC"^qUekIP54@RO:uSO*aa
%LRTd#V:1YO*S)C`_pfogH3kJ8a&O#gMr4W25VA2_;S)-M0j["O97d<0;)$1j$mpDcBXmGkVDo]q2TV=6lGsg<WgQTc-UH)=JQ>'N
%A@80j#'!f>.:E[P9#m36`un?@@K)FHikf*`k+&W0'-S10D`5jVb$GAtMG>q^Y')Y/,Z0:F(bmK\+t%aYjbZk.%;!'pKSqY:L_2*&
%@n[^RR,(Y<-q4(8j;&ad#NNp)`B4rm7_^CFQ%KFsC-LRh72@1K@@Eo<pJK=RnYn(6*)fSQTopjlGhdq3N=eS3<%(AAb_mU)LJjbk
%Pe_N(<p65RO$m8GXeQ#i!71B!-AAN7cRIlp9aJl$1"aU63f-Z$>3]Be>9JT.`g#"gTiGYh2BK.4?WAL,YVHJ9d#)GO&4l>a&0n5#
%TYq;0pR&mn6[2j?Ai&["HIu-?BHTYU"NDm._86X00;B2T+KEaScVcDu1/Y]7`GpZ1joe5aKuTNqfd=TCVk`QnLhaqmq+2`e(#k7Y
%]Fl?5)^.ikD&<frP?73V,"XbeQFt(C%'$RBTM\W'PCaG[KXS?\Yf$"dS2J4p*d)P;`7mt)ZOIq4fniRsE4j"3S1gX6SK/_N9aQ(N
%>pfnRDgOd5+12"K5KOFRj>k6<E\uH3P91g&q2%t>EXu(lL\Q^'SKAkP9mPsgfEOX5]Z;J:O,IZM7?S`/'o^6FVMr&t,<?P1';IVM
%Yc7qm68Jhrq9`'iP_41]0nUV&jr<:bP<-Vn5E=HPf3ZKl?cQtNLLP^A<2\N;HX1,YSKAl3RY!uFj9IX-m@j?.HR,+/q8%$BjWn0A
%4ko$fLLP^A<2U_R"FQ#t(tJH0;:QAP](-;V^fKEQ-eRqj]N)d@YiD]g*:7m%.+]e`_giqS1fP^T_k#e_b)8QF)')]D?m't)"uWb7
%%P]1^mboL\ThJNtBE8`sd6nD]N.dQn0cm?Y181J1_J8Bm$mCm[BJGci"H\6j&V@Nf>SDnJ#?sPg-L/[ChunodR>f<>%fObEiY]YT
%NT,J3kTYhmnR0b<HtHXX71e9P(m`]L4Ai4hGhWpYrR@u8,>(<;IDeb]>4Qj,;?Ff+.K\P5q?gZL"[]5m*HdEqK=372dt49f7*(5o
%0)3P`e*hAe5).RQO?+m/U89,MF-ReXTFSuAjA(gR6C?Yg&<k-p6:gM<\5j/SBM"qY(V'>-N,D.,ogT@GW)5FlBLFkjQEK[%q(^6P
%*s5M;@>)i_pqaV]+;ELr+1*@`Or\Qm9QoWk"4(XJLLPFK1aX2d,-2r2F>RT"7o`Jmm7q?udIi$-Or`?"E0KX5(tS;;\*6@#P8t[$
%g!S37E/`(qWa[e'Z_O:q.IsN6G48fk5/[rf1D4HRQlcQOOYceVhjGFCkYTKaNlI;nY\f1f%?.jF^o/9s0kH')CG3d;gAV!^0=\>$
%:@RIi(3sDi%3:=OdF"=t\hRh!)"XJQWZBgY@Kn^RVclI3=K'p?,Vs\qROa?Kl/8m%)UY7G)'+_#`]uWsfH`:_a$=37#h_\>e)dLE
%k\uCbiN[DbaUb*u1\a8W1+/t#7Jn!99Y%rLY9A@:2!.:u<Ds`B0Y3gLk44++K-*2V'0&R40F[=f>#?o>-9jO*o:r'8jdt2N*KS5<
%kbr6R[Rs8C0TXiLF(u`a+ll56L8\Ub=r=Q?`$MMt*K'[?d?nr:jUq?.UX>GN*K?MnR*k<.\]p*tVq*T_ar01DEuF?fn[]GhP91g&
%q9dTWEXYt&8JP[,0g@_!RR4K7);5B?AuGuM*Np=NP3XM7Jg)A@W*rr;dr[##7n7(3;==pmDZc!pd8AF.q$?,97_Rh0pq_3CD3thh
%kJ7mf!J-'EFCkq,jM_*dU'%tt=%iT]7LW,%Jq5bR\*5N,Up5YudB]RML=nB<&5bi3_br:PL^P5^#faQ\Ut.H>L^P5fXjG`h]p%[n
%dA2VRGIoW%j8sI\Taq^>4bF+_M7CpKLg[kZ,,qUP0]GD(ALi"2Z-g[<>>YqW\\QDK'(\8Z,A"%RWb!,]R=Rb"k[6e3-#j,&^k`:;
%Pc`k%U=%#+L+5aJ@sA>.BoV(`(cUd`\l:dGR*^tO#p"ugAa%nqRF&d+#p#84YcQk']nr(*3(Y/BF]"[F"J1Q+Mul%cAJeh[&i$)4
%+h`!9_]Fkm/Edp.JUjebL<%,_V"*PF\0/Tg?<ue5AcO#sZX6tNNeAAh?plU'lk,2s+q?G'2F6kZK*?gqj[g6O(=@fGL&2=NZ.R,<
%#[M'[8Ap)i7c\md!rh^t`.SWC<]le^TMa^JHoHZc:M&`.>i:H_@u6o&=bSQqO-,5+*K18I_ZR+iB_dD0q$q"n.$`hd\Y1/`!`GXZ
%LdAZf8VWik$/_'M*Y$&/0=HVo_07C<ce'l,IZ)E@pAqH]Pt.DKY!]W!koKo=PLl#GC-9-0rJZ$EJZ#4o>^cVQdh+.1%29(Ii4]J\
%+]egS$SPd1@XWO%#.G?f+q-8nn5sWNO-ek:8QQ!eng"mF?Ug]@#;YdmN(<0JJa'7r)G>kr4c&SiP_AN?^4g3a_j_>[]\^]F'<bj)
%%b;p"X'NBEQW?np.1&?nSFTGE7D*=IMd]qK7raq.WDLV@3c,FZGTX"]pW:etPrS[cCX_GO#f5Jd6P7smo<cY4/]jbenu<,29F);e
%n8\WRYJAnLk[NVFFL/9lahFu6n,O_BnrZ$7lo;N<n'VB`660RQ'C@uM[lN1DR?.p7SL6)]Fle`'!pS'0>RGDS"W<1$e$8,c!u5qr
%1-$=rmkGl%6X"2Yi8&aif89?$p&s7$Cs2EfR(Ge!"iZ1[U5^<M]7gRFGa&:%0(-Ks<RAaU$;b5W<NMj=&0`U;egHFpK$&BTFEfE)
%d2R%@P3K1S%14O]^.=3GlmRA*QD"XiFXEr,aUXZp*l'1cE(O!=JNWQn_*CUL7RgXMRcknl\qCJAiVg=Xb$qsU;LZj-TaPdU$>M:U
%jm_PZMnYatBS&#D6H?,D0J)-GM6r;k%>,?f`@)6dN_L5V0!s[W4qeYP;]"am2[8_('Y&YYqT&cfTY,*3aZGkV<70dME)lPALPMJc
%`e:9&"!VKY`X"H3FRdLo4,IG3K<+U(!I@h]NJHg^'sa2'h3chCACcFhPUCkuU*YN9WK.@SNnh;15)"g_N^/?58t8Ha6@"t#Ts>.p
%Zm7FC<-gleC.Si$nqh]X-A;-:k)EmV7`V*"VF?#mSCD_4U5NZSn6E6J`d$hVD^71_L@_kuh[NG]Rg]%0=<5CrR6dIfa2l;VG<Aj2
%j9.2BIfu=Ra#tj8P([5"5`a<iBaA`AYiSN.0)3iq%i&c3?AgMM%`kRq5RhY=7S#^/(P*k6\O2LX&0r\;/?[h065g8o-oG``AqiB6
%p6(0*ruo$C#:\$d+9fctU[\D<U'!;#`#B_MTCr90V:C4M4E4`s+bc:HUd28A'WCQ)l8Ofd$3MPW[Ajp&_d+Ft#X@,i0;6m+LqY)W
%KIK95H)OO);:OtkY"#QX1cc8/TFTC0lSV72cl3D4a<3&K,J4OUIbuCR!TA'/6<.q(+V=oLZl1e65Jqn(e46b\BdC`.Ui@1DHd$js
%2EDH[Tao5-NiNM`+`9$#,`T67Ou1`(W3NPk2is+0"!hWhWY@t@]ch`Z:8W?/.7l.`bnJ<c,hE>e=V^TlICi$O7g9S8U(5UJlSV7J
%cl3B>aWN1",eS+f3bfgo()u'8*EI(Y+V=oLZl1e65JqoCqC$eoFa>hE;Q":FW\2jPN&t>*2&8K[9>U^fHS$4:*JqdB#Gm6p<J=lr
%[ht$r7U%Eq)@Hm/fVJA!H_Wp@KZPDJI<u-W0m(@=QgdouFPDZ>j4R@V%l]kA2MIV$'R6_._$i9.Q14-!IMtR@^smO<riHCah%VEQ
%lTp*c*ROJiA.2'18s7!#_U]<tN76Si)HJ%'e?+EJaJ1^SIEVs*Z=,qnPb:BVX<C<<O3;J5BV!B;6s-)m&B>`N66.4N,TV`m/KL(V
%>?k1<!6-V1+r?FY9,qQ^\m1Rr9$NZ>QE&e,67ND*Lt/M'$k;kuZA[5f27k9.jVhL"aV+3JX;W+89HP:>#*N;V[%[*r_ca-@(+MG+
%/HomjX6L->Ur!+cm+Jlq@V;Veo$LT=("C4K1#U)URW@__a_OU<PWg'!O=Q2MlBn]J6R#:'^e\Q]b!'mn.<jmM&i(]\`Oiq%Ac=,A
%/b#Z$M1W2W:r0r,4Y9lE80LO5\9Q8T]G6)LU_Ia[1Q=Tq84StoZAJ*`2-ZYSp>m=*XtB*'W^qSE\^-.?7r[]##'`K:`M,[W50/=!
%)Y&_End3q3Q(dW0\k-4$(<AN%isDlc%Y@XFd`qrmRjdbYA))m9qtisI-pYdu6U+a`.Y'%?b4%hMX-B3W3;bXM>_ZGtL6p?n@I.#s
%U%98^-(T:NeQ7dENMe'V?7oI!YK=rZ+:Q?3c/FdT6n&)-hS\B,G[X)bagU\XU($jl[\G"D]?rnOn[jH@c4)nV!=jE@-ZG<Y'0+,L
%l3*C3J=jYF]mqJM)>Wn!XV\WA<'rd9QnMgr5R\MD&m@U&H>!qr'k5@U%fkZQ<&"D+#P^;7V3hi$Cb<R;,'eIqOj[7DLsHUD#,m@`
%/V(9iJD,3Y$uK+(9$rJs7qHq>2sn`5j&gE5N,*+:P:/pF7-3#2?'UanUZ8LESp'*f7i=d#p$2$m,N32*Fqp6#BiM%R%gm-`pCP'!
%fgQtFH6WV.T5fh;ODM&1OLa>a;5t,4Z<Wg=l,ld`2<EHA*4_915T.Fu)'[F/-]TX1)k]E5+C&3sBRk3#>H<YL_kq@@Ke4c"D\AsE
%Q#>`1EplYp#k>^^=tl&"&-F2(osti9,C2b#'h1W[(QBhUnuL,^CIf"sSL&4+UEf*1%ZY=c]^?3sc*\R=(emt6)KE3=4s,Ed"OOV3
%kZZIQF.ire;0TKW&s&4V0r.0PM!a3RN,1RD@2X#08iP_gECND6=@<Eg7HV/7RsFg`56m7u)6I9n+ep!]9pAC=inXk]-=<d'=,c,Z
%RWrc[5M&8:c@fRb*Udk:IBF^E<Oi,K8eF?lT+5o>$4K7Q1@c%J0G$tq_9q6^5u]"uA'i"h!Xo,l8:VP+pZ1L,3UVV5AGc#0;-\#&
%hM`!i=f.*/FHg;R%iAD0b/bKf4VK`J6&M&BHoFM>\nrUo`gVEIltC(^Pe]*M[QtIkf97NU_,&?ZG*3sDig0C$IO`Gqg5$<2)\%bJ
%`gaL6&;rRf1D?N\6g/RL/t5<>*_9j)aUDHW_3<)nFi>BmFo8rT1OC[-FEVa_VVI?l^70Ymr5<9u'W054K-!.e/qO3fN'?/4,hSgX
%Mnfm(>!.JA\"Q)+3sHT8No,&C=.kOA,Bbn#C'q`L5pslcK(.!hlQl;r:rbUgIQ[P:](nB.rG[`[dib2'*K;Mg;pF/1QT?&V';JE'
%kb'oP+:)$s9-j>LoCJPEo#";?R]fYgh<_KcdeV;<LiU)4J?D*VMamVXB\4#I/)E&B%IZ1l@Y^]D2G:9,BC`PUD0Y!r#pIhe$u+K6
%BM>m33L*1c[0(h&)'-mVQ3&)C'gjjQ0Y2Zg8r`E'MAV!:G^ML8]g.#>9g`4ad'QD0UcV1gZ1Mn=.e.g6bL)uqgt]6'YCXhC[F>K/
%H!V(pSZ0f2d&fZ.#1L>OU'hREjjMQ5<;BPL;.=<\Gq:-^ordAo5neq>2KqN"MFVYD7'W5JkuJ/0V-%X8dV#k^MP?lX!ct.g:F]6c
%__QJS]'Ust`O4gT"<VQH,g#W@F6+n3K^KjJ$cg,c;?YM'LmQ;*gAAip-tZ,2r+u<#0_ZhX.Z1qe/:[E`bG,fXB78)6CD%[p%^!G_
%O%+tcT8!;1>Oh9'"G3d&^O,4lD<&cdiTLn7GhSWV&'q"Y6pX1Zk?Ol:`1Xn]'@^*S@Lt>""Q%=^_h<Q$QR;Ju)Q3Ip&?u<4ogjl+
%/6.ria&69uP$bR#&GNX'4'Qr.&b_5-;j+kG9"-taK"$gr\N,37!$FdV>#SIU+2eM"2<V>f.mmk>[:CFH]%2o%=7qY3DT`D[&[5ru
%E;'Pi)4%%5;;.T.iGcmPj"Z@6&%hCa3s,o\RW:XjE\(7)iTX8<dZeKG+aNW-"M(`K-o4X9Kd%cJ6flc?k<L4"Y86f%:sEu4%n"Ln
%jQF=`7sn"4`6U?aqXLQr]PHTks52G;[G$ol?+i2hJ(QC`qG9W;09<^>"CZmG8814YYq91rdk0*eM>uEm7RUcVcF$G66e<AljX"Bu
%2)8VDHWujn'4=6g8=p00*2;q[0\npHo4'$)'/a;:kQo=aK>IamA.^*]qq1e0=<<jY"lOpEN-Q1a5XT\s4DH&X#TrSfUb3fe8=n8!
%MHNC*T]?VT20;n]BLq)45*,ec(ZqI2eRKcfq&;oW^X,XPRt]>9:pQl*2HrcLS7I+W0)EN=07BR,H;^4STk-CF9Vb:J%l>M?S5ceK
%im]$]5d5Rt7&X+#Zo6n4eXOD)=ksk"0@=N_\u/fm?)+=!,8?=nEZ.iZMP.\<'*\]:JuB1>L4]IbZ'ZWcn[g@,Pm:_e+0J)QrX(1E
%l5cNI5B=WWV_XS6&C-tWZ#A%:fmE`_WekBGcqOFD=K\[+E0VSZbd#WsK5dLgj8.\Sm!mZ'c&_-J`-,Kcekk8E$3KShIFS#HUY=52
%7[J4?k[#3DS'R[YG9chALJ;:0>]h+A4l<4,@n5$\rB@g-)OW3es"4TF!MQb]^s:^j6K11?#_cCBg)_-T\Y,9K8JGe!?DtG@oO]=E
%Mo289ct^Kdm#9M/W9ZBU]_M-j4k,=0T[Hg#P'b8;5-e?6njGYc4QV-6TB9'R4DVToCW&S5*euY8h?`.4`2V-bOT88u=Ba^O3\'U_
%<Xu'a=m&^W15=69H%,PRmc3$7C%u9b/9U(-)):Yd?^Q6okJ75"Y[YKb1C5`#jB<G,TiRtP0?>hGFV@P)pARh\ehK.9Z,GJi-0+VN
%3sb9580kGPKU.@k`t/ERfd;BZ)l2;UViF'+,#0)Q=%#rRTekgpMG[i;3V,^B$ct<FQXgl\l7MXV_P";Z\<GXYi*r?([u$dP*m9>b
%JW+aJb6GD%A@,,uGJ&eXc-LF/XKm_Ge!kaP+g_^V`058!;lBA<)GU'/E&=P[BGg<;*$etcBkiK2BFD*o@&k#_5BMY`%ZH2-bsPr)
%+&(4p5hY*P;O;9?1;-DJFpC-B*&8eMihr=.(K_9.4CR?0\q"<:H=^"NY*1G<iDKm$3!%TbXQRe3.m)g?"9?8%XrTVegcusuS;-ZT
%Eo1RbQegCIj%GO:+CpmV[gEb:4Q.H3ZlUJ?ps;'N(/)"Z#G+%90]60_Xh=m=S;^;YB!R5F9Ef+67QhKFPUs+PfNqfu<sHtt\q8+E
%'me9M$jI+9PcpRp,eAK8LVXPQXtN8!4H8<]&rPm),&jg.OF^>7p8HiLgYeX=:t#"GZIWLh#jjmM@cMS%.'o\\g?`k@RPdXL5eC?I
%'tja8]U(kg<e!Fb/(CdCSrd7$:6\s0+f&Ki'QMr<]7W-p+S1I@n@%Y"=j^fGiC#C7:lKGJ-KA3T5hQDW%lEeLm],SlRnb'>?%pd]
%*;"QYW1IRYhI*I1Ar_K,)`aSARfepn]BW'Lf<3Rs_D+'ZLMgM?:&3-e?3tC2o^ALPTff>^[,K[n+5`WJL>t")p;lsF-IZ?[rMY@^
%Sfn,]C`^qA`"(>6^2$q/idF/,PTgOf$8[_9.aL(:6FEgOX9t-oq8&B1F?uHMb,_TbMs:kKMLT\U3fs>/hceVp_]9F9*,+teBqn5L
%&G4>a&"qfIK0HVf'Y?-14l+dMibQ!_OK?g,*3efem=&_]mT&(t[,'>Z3;7jVL]6b9]B:,=:$qhtlHm84pn$pnbkg;4kH*r,jEp=B
%h8arkqARnf``jMNEOEQVP(A1M,c,8LkW\_-;u]pdX7LbhaDg\Tm6.!;!Ik((U[I3R/,0`>RQKCViP.(fZ,q2jEM)1uB&N\U00o\q
%k<`b=+[p;t@UAS$KgB#BarPd=nh_.ki-cD[n*#0e.T/V=:%r48Iq3d7b!AV55p64rl\Gh@jsBPQ5qeoS9S3baL@Tsjbta%X_ZWCa
%^6)Mh`?tX5!uPhuF"nO(dRRgDX"X*+d=gSYiuR713MAuu84Hq'MZ=H?P)7(!["AoQrB?*FJlZ<r?,ZgNp[i4]JCkgCd88G9dZh4*
%5b1"BW_G@(opd$H$"eY/F0>pfcDNcnf^O9.U^/8^p27f9>FpiNSq@DqquQ*EnYe@"PC5VVPa!'SP_W!?odLD\c0+VB@2^0ZBYtut
%RK^9?,M*qb'u,Mb@1H6TJo/)"ha]#!6."139F'NoNXoPZG,:RdiioYoFu83P-&t?@cfpYD^Q3\d4K;+eEM;qDb2?r-:O*L`>fK\`
%4<UPA'M!d6bHqilD0\&)HJWTUaa\h%Gn*fB!^rroh4YeQWJuZqD.m>N+V2prb#'-b75i>r&J$I=*9qk\*ffdrW0bQ"g([e`_V$)W
%+H5lU#J9a%o71Up[,^HZ-grd8%VUd,;;Z@1T\CQ]?6##@;c,lh?%9Zarf@;mpiFSbK(ddoU+RF-q3[f[["NFtlS`XmGs"#,LH8iR
%<1CH0b4Lm:*J.Q>4u])1gs\oDDEKlfQ$KJ&'b8FKfF8=(bHk('o*ejJ+.up]O(qV7Y]`]f5cNo/`e1Uo0Q/'(6nmpIlhh3Wg5b"I
%J@7QZFZme4%%_%f7@cOG.SUY>@CN"!\,tg%nQ'$:/^KES0\t?ce/(;Y*,RZG8[C_?D4!kdle2QV-k=a-.`*^^Y0[R;\a(A.oJtk`
%6.7C*LBSCTZ0NCVQ=Zhohf'u:o/Uk-$A05G9X)AV)[T7n_BTW"l0/kZ\LcX7BBG:187ue(go#mI=U@<)=lHJ>eds13JVsNcj#-tF
%Q\G``&3f5d/Q)o[M7$IY,E!l)L3GQbH-(;p*ZIX=_hf<BSuXDE(<N+u%%)3(*u4I$\-'B)C+QkrLo?s`"dknjJ(%%E.Ld/DhNgZ>
%@0AZTEPhAe8A^?,bqYA$Q4gdO0166qHu`Gag.<K*`2bFe4d+iXaZ^GJg+2fiLkc*hM;]NmW9,gCX[QeaLcHuJkS+>MO?eRrq9?X/
%jWIeN_VNJ[d=W]UVi)M=q_sZlmsuau2]/:g>Fc6?#$q@C)V.qlUnC>a^9.5pd`loHJ]u#r2$FbuU.nUY,W?-F^k^"]7[EQ7`cUr]
%DtN'fm4Q'q>!+aAE=hu'G3u=uMb<_N'X>SeQM4`#YL5iS/7n?0QA_pg4Dr4PEcg\T!&?@OqlXr+Lsj4)-e/)6-;[sVEhqU&KN9Pk
%,-sjK&eB[K+XA3+RR5@TK**LGq8iXDCrjI_YV80A$D[C9n>:S_qH`\U@nS#>K=7o_Kj25iOM[D6ME,BbU$j'u.:)W^eU-G`fYG[_
%a6JKA[U^IDd0tAm7jWL;='Qa&R$D8,D>=eb+JUIKD'TQN;`G?I;mJ81#iecp3X9WC,@u^!L:iAU(u(`,1Iqh=Ce"tCmVXC#W?hrT
%5j&4nG`Dq?Qjagf/u(rf+K7@H)\mi<3<S>TpM@aLKru^IC5gDhb2c5<\^8\sF!'8ZPSOs$po@qE"#B=t4h[\*V_CLgbH5Le,H+.P
%J75#Zd%#W^&c#f[M'+B?#c-/[ZDM2C)DMef>G77TUrnsmZ#'p9.sqG(aJV-%L1T`Q#fF.tlW_I/JL1&].p/f^YAld:PZ8En1^V&N
%3N1?(b(9iLp;D&%n3WH>)OW^ujYF4\1hHa_"d$7W-Uqj*.OGK+09X:"3@H9[O"O#RJVOt&0cWa5eRjFOT.:i%N.KmjKsR1I&*B+l
%85S\@AjU?P+%X^L+"qllgfk9O(_/u>(>q5;n:Yp/^$l$F"MjaSEsRSfUh:1Udik&Dq"J><!"M]n8;J5\I4Dah+ZW@15Up-H8:",:
%mcp5._a,-VoV@ur"%bZSr6S\;\@4he,!i9`?iclZ5DTCr,]?u!l4XG$qT&#V!dLAmoh:UKi,sQ0Ft#oagpqZG5J\feAIQKdI+ln%
%;Sms$BSse@>8AbgCR[*,&PF&o;sP]s1O%^f\?mO'm1^G@gHXJVUkn@S;66Ptb*I#h:q>FVGWlgX2Hb&YV2/8B=1P,6'?P1Ad,a6#
%G5YMLL?i02aHIUn+KG<Ad]&EO"rW^GZD%lVGr#[BE\>[0.Ne#)P3+c#@52ad_dK4:*$(MgUruT]Vdi<YYXQkbPO8nUm^#M:gf,PM
%I*mc<;AG<*nTjU#Hjc??DP//e<I97#$ttQDD)V#IcqHBRpl>'B%a"J/kp"Wjj\!su0$,<D:),oY-9e<d[ZKjKO#AAlOTCG5Jgq-'
%)56[l!ql^'g@5V!'Q)\"jY#3g;0A(f`rD?PJC.-0&n/QUMnh"LABYsl`R#GY[3;ahKl"eF71n7@b@5)HoD&]%6`4qR:lLU>)s'=C
%FT_j';bF>A@:mHO=#1D/1>aIr37HA=a?m/O:/0a8d"+j-r@*Wc,EP<4pDSORI-qVfI8ic9^?@nq;8#r/XU6:Y:=]][mC!6V\/VZ;
%.L)u2GHKgIA6ZEB!/DcSEa$e6qI4E:?+mN[M?es%ARho_-pegq^9JC*lPk'Tq0nJ!20km^TL2DJL*h.',WV>.'T%Kr3K&jMn;qq;
%$^HYm8O"Ot7dcE$9,*UUE]cG"#,6VA49SD:"Lbjb,_KFDS!0PE&bA/2&BK9_CVGc1$MpX36$mU_:=Pl4<YOftlM^PE[Cs#QcM+J#
%)^^#Ci\KAEk6<Z#HKIAF+(T\n8E)lubV'ML)s?m"'fa^+">jkOMU:$b$:3;C)($6GWN3%Y\/%#:*SXSrc9Gl>-PtS1a>7Uu"GYIm
%W::Z/N+S*'#m[U^I:6SW>!!AFQa2l)cZ0Al7Ks;)mYBG]Ed"kLR"s@8>[\6d#4^Ms:DS1[<gFk8UTT4K/f2NSpM.:D(.hO3QRfTr
%(aq>-9SV@,i\>cM;%K9;52.$,Y?r"LWssZ;lNS_H=/R)j\d"c_WsF?tVKd3BWqTnN38cD</'n=*cIX()U#@7+T7JEf"`ahPL?]Sd
%'(IKf`[/o4pL_kHoS)48CpDfXO<qnr0])t.>-P)U8utW&>(=DW(Lr^bp=pqOG=KW\mLM7[5H>$9IN3XsTf%U_7Gf_"'=k:jMg=5t
%G<o!9*gMe:(4)%\IAeg5Z:oVBkaXrB.eaFa]E+3AFZ39<_)$c.;#1H`Tl8FieN4o#qgD(6"-F'ZWPZ%upe;lbZti[8f@`M[q50G9
%d8t^8A9jCaVmYKFh3A),0"]8"Y]mdnhOOtg(tkZpG/gUmjKf)hp^^[9MC9*B]Pn=ZS/:6*]t[/$[>"nqK5gM+Y\D&:cqD_/F*&/;
%V2O\JHrU>I1S>_u(k<*;B!$'gLV,\?3`$Z1\f;tY$L_2<Ic?G?#Le6/N!MKH8#*_b)ME:loun)"J_'oHCR^!+D6OOBd%'VE<$clA
%%+Y)ccZlK?%\V9(]Mtp6;;3pr1flTo>7?'0Ghs$3"V8p_MF5d/.&O6VX/LY9(Jp%<Y&;`\#:@lfdlXR1&"rDhbK'fU!1n,2Z\PO.
%/-Ll5&aIEl^g0?p>HlSn:mp:OS/E2s`Nn<Pb!_qG3[OV1TgkPQiB!1P^&Y26">($a5s/qsa$4kd`%Mm7IP?7gLke'3:s0kF1&OXG
%g?o!'6'adn?UK8IG>lLIUq30mKKg7`J.&bGKV&kekH#[tb8T=Do2]8o$@+0F(0FZ?rL.-RJOou@%o`l%5b.&RmWAQU9,>rZQthdF
%JrLNBF+K[;YR81CQ6b^:_9"[`q,>^;f8kOEgmrnl@0h^Ss&F]TEg!_6p5L0TE#PRn8RC<uUNj!fMFqJF*`@\O.FUSN2d#jkJCu7o
%G@flA&L.HH\0(f<T)G0q"_VF.[J>piFF($];m#<F/bHp#M0VLk07`tPopN*$H3l&m\/&6n7J2abUXDt[5kHLQM.R0-(mf\[*""^R
%8,?(c8"eS]E4,k%,t$6(!=NgA>c%aro0[ji7Gll?g>RN"<eVJ=UQK<oEJn3BGC;3%2&9kD3:qNk4m2X$-LB:eo[k\]pjHd*r6h.F
%-pq;r,5SMPlU3BDgU#9aM+k?&9pSP;ru1;?2&-V514qneI)[lF:KUqkYdP[O'[s>/].AQQ?m>PPQ<%T"A'S;iLhH4a<nakrKLf4J
%CfV7`-A=DiACg;tBV7`lmNTYYOG)(0#coSaAU64uL('sTTa&j^1>)eX65mAfhU%)B69ltlC1IJD('N;+I0O6E8J!\a*Gh7/<Z-p%
%8bYJ$U`p;e^'C^#'%7a#1\!UY4bC$6e?*nfk]fd:;si%EjQc3BA;!O7'>fX0/DUd>gN_)Y)uG"Vn*%IY2]:K^)lt"ukRE:jO5+L<
%HsmT?fk1ma01#9XZAQ9c%asLp>(/[P\P"8-Wm:Ke6@Q>1L2\GjP_MBI3:GiTJIQdE\g,6EhR7rL)[_iS\\iuq<YUP_$dTH:_$sgD
%A,m,S&fQ>17>1'$/5i5ue"m2IJb0P*jW$I:)3o;j^!TA,o9^.QSnY-gV%@nU$@!kj'Fnc#*J-tTD*T,SN"!X%:E2lDIuolN^`.DB
%FDhd\=s2!!pY:9^7(/J>?1/1"rN88RaEL=i.5DuTO@-:*ZiS(<Q_5ULrrI#)*BYj?=VYb:C,e$OatgMi%E!EG#K*UPl16[H.GMgt
%KA/A_4+7m3VgtquR`HI^:-A4M/bl,/.H1Xk]IL/e5-,DiqP=ahbXY\p:kKf!bL+"5ZYYrC*'clS`l%.HW^`q*'UBu#dI_+kj()Wh
%]D4!S+h]2rkMd%*E"Q6g4aIFWaB_k,J<_\_-K%0M9j-h@Suna"V3%*N/7(G51;sA:BL+_2+!t.em<a<PiFTa^UrY(p\Dcp;qV)&1
%Ne<#iToi#a!iTP'!kPQ=h*KifJj&96H3md:0P;f,)//6?7QdK;q380(SbEih[=OlW#\;10oFa0cMi(hmROj=;>!NbiCAChOJN0=d
%rJ@,ohk"K])]#)<[RT*cG[Q9,(5!PB`0CYSS2hTSUiEOYeTlu<C0<oD.SirCX2@@/;;JB\K0H-Xg;3a*/]OgY9jUg&,',dMZ<+tq
%9$]eF&S-MKq$M1BbblY:k*'hC^o&jQ:kXV4+u[#Y^8bE.m<6/eFpIaP[hr0%]=b!H*0F0J.`.s\LoQT1:(ctFinX3a5T0WJkMJKl
%IV_%'YNe6W']IEho2XV4Dmap?@WcYiE/V!$H^!%q_<`61W<eQ"cger:k91q-*'HM$!IiO;%NQ,+SE%d9>7CsFh-P5@iDu_/(09nt
%&%;tJ\i4%^&*&`K:J="ZVlAaB6S\m,ar&(h.@NiIKD4menTGtSE2Omp:[[QCl+Cm:CG'WBK^O;4$)i]<'a2sp7U#`q_JX%(!_R\0
%'%AE\e@pI;Ym^6g!EN=@J5kVe_/!.#@ZdsJHqM5j*GbZ`De=qE>#dS9/\^9YW1`hMWU@s#/!2<YZ5FY/6B]gD!b%iGP;eNLE:*te
%1j4A=?>(lo#i!A"=)m.E@,X2VJO$eC&8M.Rd;F>(_$+F)"1bEYSB'B>CJb\81KNBIe9dF;T\ptTl[RN@%,lO9c]<SKY<W$0J+dCI
%hH&]!+sT_p1ZeaY[8=Tt"6;`f8E-TeWL@6-#?"+5B#mUP2MQ>nGT@oCkB/u(qZJpU^.BZm9FkMkU!"n5&8DQU9k5bUn62Jm3:7De
%YWn4)g&pScq,ng]>GL&'2FtP$SF0di`c;CRI)O4fHNiP@2T0Er9EJTE&"cCkKf*Y27EdmY)F8PcgGY3!ic!0bM.<'7,htb+@1)!]
%=SU6q`=@(o";DVr`\G(P\:sEu!2S#E`"4O+9t5upGR7JkM:uNT.E%MR_?8Hf%YW[5P_&rl]?G]$JDm9n`Kml+n@=AuE@1SHrcTTN
%0Kj7a81?-n;;_Ep.p>]``5$Z_rPIKbP!=-OZ=N;CaPX'H9$STh">0ri$SBpgYeph]lY.Yt(`WeM:lj.E89Rfu3;i:l6rI.k0*-b;
%_a(;@Q+dc0s+.Bn03JD]4OusCQLctU?Qo"C`*L'u[;uc)?dNR?&eSF\"nW-`nkB$apF&n)/$!A-g>GU20$lXke+\AZW!gJ4QO@@k
%>#/J5iG2J*kmc#i\#%)0>sMph1@SE',#Si`YB\nhJHT7Fs3;?FYL+CB1ji^<bh3aJ6crnAU62*5Q6l=A1922,+hJBI15Ml?Ce,Id
%7F]=]-'=:@C0d@9\R-,`q2cqN+Kn//5rLH%brlY1:ngG,9J[.%A&7kf:_*#>]iK!#U"60&"n(UskZ9Om!9b]4]&^phB*.:nqqeC6
%_UR3WkQ23&(.9$Ok,<raZUDorL'r4fb>od?Z<k&WGL!$#.`hP<,a0g?K*[<GH[J59)^Q>35%X,@1i=$RpZ#HY`YR-XK!S:01k2AV
%V":EV?*p(6,*s^B)V5!:=kHI\/30pu@;QMli<TG"]8ph1I3Z>6YK_YA`s1D+;fZI$cs-0]7(`!cC=lj2421a`o-G&f\]d-)P*IMr
%E!i.(NU&"Y;3pqFS3:'NG/F&S))C%YLm6f7Nc^""KBYp-A)J$9pX"H.<IIC+nPhKX8'B%C'To5t0MbgBO?UqM1%XF\;2At7FW5(1
%DXclX,P5"jjh?YQljm'\`0G_Ylr<f"Qgec(mRe6=O,S$OTYbLOc(UJspGS?YMErXaSG0uE4GF(pZeFV$R),PRTC&Z:bCM$.f;:kf
%h`Jg$KZ-XK].hk_Kf!?ui?6a;"(dO!D'me3-0j.`F^]XJT7_7uSl4HV)j`[K$O(W*ESU1o&*8G9LPc;:3#&_.8KK'<)WcS4)R5F`
%H=N&=_DT(;rf-X5M<IfQ>WL!P.:aGPGP-!iMQ(hkcQF[h=<jhuZ3me1Tp\<;D7E%tUqP0bBg_jWLNtlB5=0uL.<T#`=p[?=#`i/n
%3J(5@#G_Tf>\63LLn"tBW,3d-kY'2>)pI_&15:okGdOpI^C?iP^T5GA+pST^)2>[,i/!NI^oTsNL@&Hpe]MDon;V-t7.F/D8=<Hj
%SiL+TG,$jn2[-L=`r96t0#jLsAJ,dT0XRoL)?\;TnAM9Bk%YH7KAc`24aIDQEpC@un%hIS,)mS(YnD<rcbfOQGG#V@_S-UAh;[Y[
%HD?RJRomuO<N/\\/++*[N>rLVo/\a`H[&cPd([ELBO>2B-^rtDkD''%U#ie"@mqO]5tT_!%)!/#QDHO)lPIUEb]d:Qg`SOHh_IMR
%L/r@C<E.Z8mK6Yl&?%!oCCIjO"%l$lS&2BsIgSXcf7TOS*K$45I=uSg1'/c487XaH6`a05U"\4>OS6<mQ_0u*o.!Om0HEPF:a*o`
%.tqBmC4R0@54a>A2\`YlJd4XkO1@0fahq/Bq]f-<fO+H9/Vt2NHHD0tGt]!"a`]_`JRoRg33\UJ%+d5d(NEn88]ZFE;Q*!1Db7fh
%MsSg$b?IMHi5U1t!dR3\AKjs2EVSDK]E(E=;"27Cc!cDH41ZPPBR!52c-F[/cs"Rh*73Um$]Q:a(f6EKJTXH,!3+-&%0<-o#=7"=
%:`EG'$FPpJ[Usa/iLM=]-VV%mHkS3\I2E[E"!1@IF79Ks,7VI"OF4,QfelA'f7cD_s5>9f9NA'g9.NAJ+%a'_nH+`_8'4he$B;*f
%&L>6Soj[,%p4blR\1V,C+Y&Q?C3B$X8:&9"Q)'GR^rm,>mil_hD?=@gW=#(m]Q,]LaDE2TH]I26ALIe)IA3AsW,`"T?PX'`;E=A/
%Cd"Tg<ZC%U??4)J8SEe_*h#KJGhNn.:,*i(=);2CjoE3rM25pCN\QYTQ]Ap.?4S_9oeDYH'kWL>kV707,>Ee\013cdga]FL_e:qq
%kBAG&8RE$A*s/k]<#qu2?>CrcglFgs)$3!LObPN$+GhkX>3O)r&1n,e.[QjpX0I*oY71Zl%sYS]!E@uCk5mu199K#5cpUuf@.4BA
%b6j?ILbOKYh#lY)80OmhJ:Nj'hI:ZDR-<c5,re1$>3n7Y=t"79pl>S"V;^F#SlH\bqf"D'VgA(R!s/B%ENW_V-1&BV/SZ9O9U,Y9
%3#Fh>^bGq0+KjCPoa2Ul#:o`$`2c^Ee_B.*#B&$n6@n3lk#(1I_mdA#IAluPK!ZCh,=A\'YqXV.?[a?abK/9n+AKLd!@HN#q(j#?
%JP=][J<\Q>AA4<GnnBGq<6q2eBS]YgOVD,*Pku:e%dY?`:)!L4&GiKFQ*XmU+=%s?_M8-c@CVOWJd%B6&h=>`>Ro]:!09@ATo(TL
%mk(Ab]T5ombl<`_K2,`(/>K$h)86<<gi#SB/;;"cZU+=YA;'7>!Q(QY.AIBWi-<(NZ:6Hs6.^@$ie6'E!c!lhc!cr4e1"he;Z_nl
%3oD!MFAHX.Z;p&#1ZYCMp@oMkqE"0OI[=n!dB@0\C4MZ$\8O?\4G9*F@Lb4!2W:@T9]r5QAf7A]+UCff=XLrdVn@R%8B6hNhUbDD
%d&38f*^<$;Lu&UIk1QN*DBaeQ)J!d.nqoo[k'UVH;G7SFRplg0V4bXb+Yu/=OC*$.\5BDM^(%<4IdE*a:Dtp#3%YNM"=k,)TuD=H
%lA=f,4s9PbCQj[MFn^36,*m#\KQeG6aLXk_ha;VW5NSpKK4i3\WlNK4<k>m;h`hQ4=apZFP*i%7lHW+$6QcTgbVKP-/4P*(M$X^q
%k;K-EL-bt%L$DNbMMM'YN^Ja<`P@G5[XWoRU22\Io0rf`H7Ek-pPPLF@QGu(.I+QOEtSdXQsms!?44m:gYEQsEt.K^1?[2cVt4Lq
%pMu1+\/40cA[uLDKEdSWQA]kjq-,tseOdq5=F]ZMIg,;*7diO%h.K:TB.F1:4(]3t;L!c:9U6R?3D$MB`s0-+)L*8F_LHYen)>D<
%2F&K09kkao:?s")UB6qe$$LU<f(p%JN("AWV96kES=pOI#@rpl&I;WB[06`m30;D".l.?a`t0n#[(94YY^r:7j=jqmE&5l"cc\^0
%hZmr>d@R<]0-K-SGObRMcKo[\K=ad'96u-Mke,Y=6"2PY7!7l*TBMLORd)0pG+uKaL`^@I7k00_<LV;pGIrK6Z5T[BV4kJfjW3^,
%idcu?1XiOU,G:%IpRD^`"V5&MWT(m1d*I"KaeKk@XC?FLCb\?JIpc_.67kds05bD@G70kD:i'bM'&eU-o$$DkDDpOe\lWkD9p^s`
%.3XB.iab5+6W>k$d4GQ/DkO6n4`_ir5XX?(`UE>L8BK$9Pn9GgW-2aER8pa,!2_cA0<A.l`tQOs27Su=Sq']L$FO\F`F+Ac3Y!Wk
%3:;9Y[j;n1G\$*LA/.OR1-\e67VTsIXt5m?;1Bqt*;HQf.b';6d8+KL53j0&hrH\^,b]j<$b0ZO!HR&m,og".R.I:=pg8eil[MT;
%n?i:WbT/NG^WcoOKYd>a1Ct4;^ffMl%Zp,GI+]e6ggGA]qY[/O&G6l3ZH+JnQ7+*!?6G>ce'Y2q5hM&l.B"AWcfDMc<D=eR9cpu9
%6d.]HI5C@*TgT"cSX<U\]/JOEL$V-`$raL[q[BqDQnQ0:;23V+-OMniHPjXM1aC3MbcV@E!TXLoe$;.Joc9]rWVbRY#DfbK@V0a*
%ir/9T_/.)]Kpe;Q6ELou3!\2icj8FFYpM+8omqCHWu]QAo](H?D8AoZNBC)EVU$`J69;Yll5o%TLEh%AE9N3fk6u:tBOcc_UtEu6
%LWi?;76eutOZWaNQX4coD%sC^Cd9Wr+im-!e%e3]'J5,2/4;5.JDu$64FP]1[Lq-V!om6e-@1rq,S9e?,grCsJV*_(A9,:t8[[I8
%rOQ01ooat1d%dhNadpbQ;uB`C5_cEIaGA#qac&D;D`a?[U:OrIAg[F`VYU]ZM%%*2q@p`%G"f;8j^DL&kC(Q,r,Z:-HR-^ahnr61
%R[YJKIC"a-)#cNMK/3gD7OD$#F-0bMC.i)(*;Q;&l6+Tpfa\F_=?\bYpJ>5<Ru%"%fP)Q$@0!>$4GF58*qUDOOs5V-RoP,oon.F(
%=QNX(h)@/[",(,]1e8*67PS9QJq?%(/P&,W$npgK#T@a:OgC%h]g7WKdoo95P%_QS6q_hGaOm"K@*mLX)OV-DK<HLfN^YZL3"A!%
%+^pTX*UA<![A7`(q]/_M-qK#BLsCA*TAmZ2V6*aeVEf_jaf7Bm2(9)1Z[g+P6`=]=ejbcA.E,u_`gCS^"Pp"qBucW0A-61%X9+)G
%er1"]!I%(";e3f8BmOWOH(LXp^9UFf"P6EFS-d//B/F<:LE_@aN'Nn3lOKa'D$kXK!l[2RrI^A3]iY^f^Z=*S$jCcI3I]$0Ip&?f
%(5fKRA'3PMTAgSh`4bYQ2>rX]GG2CSi=V;c$gju)iceCD)W#J5RE-`k3B1pg]S)jLc7,@l6W3g_#?Nnhpb;kUn]D'>'4b'MHD#A0
%Y2Y"/aJYWIOAR?U4&(eLKFSN1lFg)!U-TdS>NS%7p6u]+`+Z@-"i%16V[8,ZiOcmYA"XOaZd5Y[KHQlFjG'XDq&bbt(MK@R3M^c]
%,jUXo]5iZpH@j;;8`\RcmX_n1TrGJ8<q#%%?7/@o^T>e$ro.8U,m^923QQ`$W]/I3N,j?b``nfN_5$3LUFB@5.)J@6;.NkL"&-N,
%-m+4#m8c7XV0iJQcq@JeHBX@=WialMHuYYn)G*h.,9G:ikg;^o\C<"U,LG/T,/R\&S-*I0TkVB*MTCqU1X7iC\7-j^3pU$\W&spm
%\*k*_+X#1_'QkJ@>o_Sr_98VNKVk\4a!E_>NfPiRJ]A/TPa#8)dN[[#^1kMCKD9to#ST%B=qY*_'3tBCHU&;Rc)3V;/2SQ(fi<ep
%!Oa'$/r9^bPRYf3Af:lHI;2#slZ+V0,At^9W0C2^lpgHg6)#s<3XEe#ei.U9RXkHPmP2fUM.u\NM,qi8MC4/d&-PeZ6Y@2)"_iGf
%mpQ$JkRT-6G'+&.G"iL)_P8SO=fX0+U+[ST.V/D-%_<aN(foJ)]VYt%Y#UBB#^d:>'m`h,/l=I+:NEu:)cZ[tGmKG!T1VME+RJg7
%R-i%N>kM?s6i;-lc+;f?BT?'k!%4h-RQ@q^H>'`$N>]U[M&32iiN&Ge;JmTFZC27AGg#`0PZlO[m>V<AQ68!l5nAV`em6!TjP1`N
%Z?.EQF?`0BKNX?#2Pf`?//rGOM@-Js-t*q+?%kuNg;3GL0:Z);-EekMFLPC0P[Z<>^s@3H6#.0PMTT0Fr!MpO4/!FqNX(UlMa"B1
%]!)Y>G2Y8]2$t)%[A>@!mn*F#BampD`!1Z5V9a$*(H?/u+24las+0h4Ks7EXUe.^\5MiLke&"T7j=j';k&/e@8UqcjqR:Y0hFWq.
%9na*o5O.bM)`7($3jY.&b4+@^XKG,^9^C+]s1@*8XmJhX;#i1i@G1m+#'"<>cjD*g5_Za-!AWapTU%ogO?V@S-a;RV9-839.V5P@
%g@DIVNLUQ,UT^j?*EWPoFg,sV3MTci$E43WqP^?=SX;*gSg(M'06Es]_jPN#7l0"e^56,[OI?9<\Oih&*f5bZdP+A$5Zs,&rq_J,
%X^kMqFoB6/!7Q4+d.h)-j#[:tf[1!n\a\%8\-sUG6W6nbDO;\2#$NOL1%&O1rB^eK7NmA&8?o74'gN._(l/COK*Y$g(OA.3ddsUE
%dgh[0/ih9Le<ir->co.p8_/1\OcQ`n:;?8`!i9%kg;/o^Ni.%SBm?2'%>2#("m\mL2G-LQ>["_+"CMegCN@8"bl^B8gDhaTKiY[c
%&DUS?LKq_7Td(k/-VXZ*.0rb4ZPpPp?pELI@(Jp%K>/]-->865("!40B$bJ1lJ]Lr6Q<9Bj@^j:99?9?[ZN*r2`TNAKoAd?MSMZI
%7[ate.Onp2-5$#Z'"u'Zi"'nh]q%H/Y\?b`,Z)[lD`nfBh(\"Hs.a6**gNn>cuZ7+KDeLNQYHah&Q?/s2YG>U5UXDWp_m21DDb:G
%,MiiaL\/HMR(@I7qCFSKg0:@464;*t*5]F;9$%5P,gl7,J\>,3Q*i'^98'P;$#$N'.Ya5]Z>'J[9$snsKH&]_15M2a=!1t/@^/dp
%6nG-&"OoDo!6qLX\h=Va:9>69nj\HMTsE%^`sQ'TLn0nW8s>Vh]`1PABgB!PFl)M1:`e'V?=Gd9i*)TWc.FE]hr\TUA&B--di<eq
%cu)/]'5u9#RcOTKH+jA9oq7'dOq]Sk.Rft(%[:_<:)"oR;ZJXlA+&B\0]>G2]]AlL-T_;>V/Q`,>Os8%-f*R+'+WI)YXX\Zhq*]#
%"Chh%KJg&!o'VK(Y:iA$:,@t\nSWn`<!c&*Y^f.L;k,*dKL4cY&;2]J6SB<%8M0mulH&3`#JH%"Io[3m?q3CdVr;\#k<E<NL=`-/
%aBOQ0]jsjChC3aWC1:<8/ZZ;LV@o;,i:!4q`Q8P`f0l#33l1\(W7!Jk(\Z:5"MW_1U*bm=\2Ga[#oNFg\'#tqN$nV\J;;d@:GIkX
%MX)pe:L.ggoSN+U[;+&]UsKSiH3pU'm,C[nh8l'l9OYI*nXt.UbbHWumqdcr&:*!%$7";2I4225G'bVG:Wi'(R"r,e(:n'[[;Cb%
%X,"Pm#7lM?6$DcEmV_)[0=m&$-+<<#j:ld3PQt#.nWsQQ6/C#6OK&Wi.+sUjKu)brkSit1gj-?B4LFdhcn1,TB(EMkS[r)#S@Y4-
%]D*#igA!ubVCjje`&Dga<7Q]DK7'U*fgPC0>rWOR;dBB]08Kk!<0#ZqAGpT5(.>1VZEEm2<NWDEW`gV5i_.YS_OF"g<T"$3:JEiG
%7DWbFX'XYcq%+'*F`mRA'ErgPm#-JnWLid0BWGmA>7diO9=rn?PdS)H-u4[EMjpf[M5NsF<=raNrLk\OMC:4%bP[Zms$':R7?Es`
%X]tp>L6l^ViMC^fWq+M;eO#TB]='$PDUn&fp!9[RMm5pEXLj=e8k`7Z<UHca"f[qU;k+=T_3=CDo--j@1Hj6P6)Ztp;(rBsI+7VY
%V5B5i)-1TYd+.ET-L9Q_VBs57/X#N+:1]fM^a,9/;bJ03613^1;o>CO5LM.I:_XDcl)?'6Zc,:/LsdiPU-,dt[EpMGWbm[*>!3R2
%rAt_$`7UoQYe,lRXf/fDh?iLmW9Z];S/Y);3b'r*\N0E)qu\$gW:A@RdfK78)5!)VoBR=ad*gN8QRobW-1Pm'lYC^k.r5U!M_B'o
%,B%l_Kf(h-^F@C%.M%^2`'[sD^E!i=d:;jKYQD_`TeO]fE,;fbZk^$r/^(/29>"Fk'Xg&I-u93qM_B'o,B%m*KaIdFPFD?:nhPD]
%XgG<:kTRd@?>'jdTbk<;A!QFVY;X)<]6djrG^;'[_(M<FU0irrBLBKi#:dFDeX:)h>']?E*YFdH3[.!;/8X3='ML>T*3sH"oc:I!
%+e+P#W=0#/^^TOQG3C5cVM"e5!EHB_=<em8hL%rKNT,!BCP/N\q=(Kno$Z-#m@]"+`,(#2Gj5;%J"`.R,=nnG&Yq>DYEinpU`C;i
%[Z]$=.?*\U#to#eJW2<,58J:gi^]9*J-OrF40%=r@YLdSeZ2M$QiI6Fd#s&iOj8b6TQ$m,bDcQVVW\q?"ubhN$'Dai5rK-s]F$64
%pLc`8W]00K(0uU,o+k4PJ0lI:^NgC4lAU%$K:n"AE\7W,fVQ,^[eh1K#t81oI;#f^:g`a(%94sATN)uD^aMF(.%MG9/g\'U!#4`*
%,-gKI<S6(._NmrmMDYQF+>^-`.A\4@1/BTCFQ*<nSL>8>_8fa6"2q+O%r+WUcpUAufZB4a?o%DR+m@)Y2N<7jfsD1J"_K_u^Hi=l
%3?Y.JF^#)b&Wjpr7RPN&T%o`#^q`UY^e?*s`)H>J(k?t[&(d[K,d;S^aH\j*hZmPbn#V@l8]If38q);0/DLe7Inaq=W^9#WUrYnp
%'i3[&nq^"7%>UkAdPSKOBU:a3op;!j%F25F2_akH^V#V^PBhccdq7B+JJ*N)3Wg58LU_1E)dXZa+RJDs;ii0I&CX(a(T3>8jLeW_
%pBKCm1=J9QEIL3f;0gn>)#/aes2fUC,'H*ZrVLIFOXd1c"luBLq&=u:9mKL$E-<JdI&%E(3M#YIM)72Sg(B!-,TqZ@DMGeL-W=N>
%[=O[?4K;"b2't-W_XA*50>)m9O(9DZqNUWd$K>h:Un>6MEfa&pJ<2?.EaZIUmUq9I+C2LO"!_l1i)mE"U^P$eEs3qD1#9#[0'"]?
%<g&gD%5^J2#d*mA83V[%Js?fXaHhh1Mk82amlAM@%-MLf/-/E.^>"83)kqpW!mUmA'7k)BoIKL>:+&V(?\_nW&<fE&)),>='Ga7T
%VaSQ):dIO#Zq9bG`Hm>Q+=q<C1DSC^%04%BgRqfq3@aB#;h6FU3t%Ge(qfY5N'YjRaU.9Q'FqC&71\8/,O-u-in'1fa5R]1fL>$,
%5GMX0=r1[1>^UU5JBjAq,u[L8e9,5jG_>'<FjEb^N"U:A!!4T0s4satHl$nR+2mDr5Ct]^/M9AZ`PR4k8J:KGGS`hq(j6M'n*.,P
%h:pChMWUTXYn`3VUoW")N.>a3[70g7\qhQ>K.uKubJU%c9`86=O;8&O@%?eB4F@'X+>%P=:lAF<%H)47N2CT)4S[bgj4M$P7SV1@
%Wa:4acg.65M(V;E)`.uY7!LAjWfoUZXnE2h:"E+Xk\^^8WpU3(35mE6@V5<Q34fPPKbA*6=J:Z"OM+O7`1ZiI7"u"sq3Z3>We0_<
%$%9G#\`A8ulln@PH'FP]"L2BuO[a]-`g7>Jq*Rc2LM.Xe`?q/npfF_H+>5M8K$u2)WhF_'8:d,g',>sK`@d4&LSIEn87^);Ul>0`
%KShUkf+#/6**N$uRZM9jJ`9f*C?D?U&GH,M"VogE17`4)nGsh4M@_B_\bj(`@'QD.L9H"nCtgo0H"nIH*?YDc-#!5W)'lf=.1+t.
%#^KRN)+4%(-&3WGob8]bVH%f3^T;aBYSZIWc1Q9$kRPtbI0R8MA<S7I6bl>BO6Ho%ofC!K6$tqUYdB%A$-25!KTHF/VtdMmfnR/X
%W[?nK"8*cia*%R@-%J`rl/V_GnCk^@fRk\aSI/L\,h:oZamfui]0%(U^p+C<-&0doS&5dY4TahYis'f$^]QpGXt6LmPj5L`*^'oS
%(R!@WZ(e=*)nU<8(s-%=E'eF+_f\6W:/,sG[,ufAs(d@7)tK3:ehfoQ*$r-Mo?Rr+6'=mt.tLZbKRbh#fn#MLGZ%m0">388=@jV8
%W_,Bf+r=UV8mWBSWKY\-D6X?Ad*Qo$Ea1L'(QeBPoWrq]<$fR!<t.PKIQP?&pnu3/^R<RiI+(S]R&jL?=Tj#lR<m5UBHS)s`.3g-
%b2t6c-bKA;BK'l1g`YHV,*E#2WXp,+oY%k*7J)89I8fWu%)j]JQ/,nQrGUEbe81ujN[q#n2J>uV5'f%5.<65+,7$1Z_.#BhSUG2Y
%))Fd_?GdoT&o(2=$4CiWg>J-'<OF)X/NPKN^,[c^&Zk=7e*;G3L2%$2Ul=F)>1t*n%Kf2e]ll2D$R%JSb435h,u#`'md]i(JNA47
%Y\(#C37jGVlJIEHdKYiAK\)Pj'nU1>s4]+TU'm.X9u0K/C5W?uG)L)-^M-'CPi82[ArP-U7FPbR-NOLs*'m)6ma;gYA:5[U-C-6#
%\mJa]+qkY.L6G+:GusD7p-:6pMIe&+8ft[6N6Rk!=g]gb?BX2M4/JUA3OJ5^DXk+)2]Z_b'IN!q:GCG$^-0:/%lpkU&=[;tVHAU@
%AhIX>0=`=n=_0(V_IVNOZnZehOAOcup&KF^2oC@*.kK"e=q1D/&lgJWl//KZm?3($)XY(eLNKWq>m[O$L1H_3)L?n6.bUU\fW^]1
%&q,TQ..XY"!$0bU!missGD]*\0_>f*T.uX;&.,m)E`)/r#eTRTjV4Ltp@rSa+lj_lj_dj+FCKGf_+OpZmT\?rU=K:@M)Pm;"6)^m
%J,od(]*ZL0h,f<d'136M)0dQDQ/1G(r>oB+:+[p\UXKha%->j!,,^_@4LJ^2\!U4rRl6jA_M20G_tO-5=;@BmW`jVTQ4u?eUu83u
%/%``,om;AJ34)(T\t5IY&gG/rqs5(53OE>TTqtc?M^e>6Bg]92?D4OAlo!N[-o1p860'#p8V9QB+[=kjXatdFVdm/d>)1lLCRTiX
%Y=1[>*O9;3#1mZn26@b&g2jT;GKe=?h0gfc7C;pK2"@Fd2qpGCZXG_rB$BOsT5CXTI^UiUp.ScOYM&9(2;:%!B#E'FRP@H.DROC6
%\_4F!A7`6;<r\XISm(]kc%@bj[[(aLCb<3N[^G1.gXafAW@%V9bmmm_c%A%r<`NqTX;9W.gO4.LD2Ve5]pM^tRl45=a>GXt,%8eU
%&'BjH`E/e0FOIr-aeZjm[NQgPE;L[QL/>tRVs2,7]).o^O>YcN\7WXYa_&b7ccroS0fRj1pT<ctdHZ51`1)M:D"F=DL=O520rl[N
%[]MajfsX<'1NePhB!XkUCtmm:%80>PA%%]YCti-6ZYaL"b&/r9r\n[V[H(ti#A#f0/_Q*9>&prdCWXi0XedmR:&I/D*O9:H#B_r+
%Wbf]A(>Wf]I<2`3MdU,0Qr<sR2FL1e<'5f'-clJOMu]%;fNT%&E;*7jabHRpKFdFk7aAC#B.8X=UH_:qA50KAY0!n_=qbMU[jTqu
%f:Hc\o*RMZ[JG)1]]j(T[0,JpfM1"G=WR$2D=uOW[3aIsVG$\APo[0-g'6/.=?9X7Aa*l([B62ee!uF4F@'a8n%*c/aN_'oj@jMR
%db1pKj<iU3Odg#g7r+9Vn9Z?@A5+lkl9n`SXi[kPg_4OKD9k!cJ:`Q<XSuKAT.Ab`E`\+JZrjiS!]+/nJ`N6[-"=`Q#T*NWUtpcQ
%8mjq[qPp8S9/+F$?^4"2U,lNbLcBJ#(#_F5amX(nf+3oM,YHhI0]Z1/0>61+1Pp9T$df_s?YSOu/`EhXDUV6O%TLj6m2M6*Iu%%h
%TqoDp/bE*bCqIU:jH-Jh!tQ\0E(O[7Ds=YGLQ8I>qc>,jY%]%c7o*E(OA?u>EBA8aJ<UI5K_N]R4u5o=4\$.#0Oj`?_u%[!^++o*
%OuDNgj?OGsf5K[;DE'68hX7#(7(]IQCb<>9_mBPd@XMk2JLVQNN/d&?a3-uE%kYU-1WT<tHQsTG.Yhgl)0fh/JP.i#IuA7$34*50
%h*3]PG#\q?>'arD>41o@cc9/YTSNe)U!W^>,'ca0Vj?8?SqeC\E*Wl0q5PF?['W*%V%&l,X8XFElA!p=lL"S=8[PO%LsseA2Qf!5
%^(d>=6/[TR=jsTA_=p(M!+qlf<!L;;d31o'8eXN2k^W:+l,:"q+H^*G0M12^rBTN3l>*dmKZK)G;$&fmGp^60[J1E"<Y-2M54%)=
%4Gf1&bn0Ok972Zg;W(iBg(Q(c=Z&KBa##!]SW]79OFB[/q&LSeYc%[.JHUF,fPZeQlTgnNno.t<iOjK\+eK_1gqO'$p_/lmP%AuE
%4i."#M1#ilq^g1>eqXeGj='74#k4R$+RoJI=T/AQ1icDIZMbgh%Y:hP<,i?M).-;$U[L59$#%:RE4$=4e_]u[3Q>FL+nkcAJ,[o(
%rlr3]s7Kaup><#[rnjoorU@]6r8g0Bo%.7Kdr3#!ci<\(Dh%c8?iTZ>n%X>Lo!cC4rL^k&o@O"js3o"qJ,Am\s8;b4^OH+@J,K9F
%!^WM[i%KTUQiHRDrqr\o%kBir*W~>
%AI9_PrivateDataEnd
