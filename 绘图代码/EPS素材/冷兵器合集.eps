%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1602.m00.i103.n010.P.c25.243041878 Sword icons set. Ancient swords signs and crossed sword pictograms. Vector swords.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 2/14/2016
%%BoundingBox: 0 0 540 430
%%HiResBoundingBox: 0 0 540 430
%%CropBox: 0 0 540 430
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 14351 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDA2FFA8FD7EFFA87DFD1BFFA827A8FD51FF5252A8FD0CFF
%A852FD05FFA87D7DFD05FF7D7D7DFD05FFA8FD05FF7DF852FD07FFA8FD0D
%FF7DA8FD06FF7DFD06FF7D7DFD0DFFA8A8FD1BFFA8F8F87DFD0CFFA87DFD
%05FF52F8F8A8FFFFFF7DF8F827FD05FF277DFD05FF2727FD06FFF852FD05
%FFA852FD05FFA8F827FD05FF52F87DFD04FF7DF827A8FD05FF7DFD05FF7D
%F8F8FD05FF522752FD0CFFA8FD07FF27F8A8FD0BFFA85227A8FD04FF27F8
%F8A8FD04FF5227A8FD05FF277DFD05FF52F8A8FD05FF2752FD05FF7D27A8
%FD05FF277DFD05FFA827FD05FF7DF827FD05FF7D27A8FD04FFA8F852FD04
%FFA8F8F827FD0BFFA82752FD06FF52F8FD0DFFF8F852FD05FFF87DFD05FF
%A852FD06FF527DFD05FF7D27A8FD05FF52A8FD05FFA827FD06FF7D7DFD05
%FFA87DFD06FFF852FD06FF27FD06FF2752FD05FF52F87DFD0CFF27F87DFD
%05FF27F8A8FD0CFFA852FD06FF527DFD05FF7D27FD06FF27A8FD05FF7DF8
%52A8FD04FF527DFD05FFA852A8FD05FF52A8FD06FF52FD05FFA8F827FD05
%FFA827FD06FFF852FD05FFA827FD0CFF5252F852FFFFFFA82727F85252FD
%0BFFA87DFD06FF27A8FD04FFA87D27A8FFFFFFA8A82752A8FD04FF7DF827
%FD05FF52A8FD06FF27FD06FF7DA8FD05FFA852FD06FFF852FD06FF27FFFF
%FFA8525227275252FFFFFFA827FD0BFFA8277DF827FFFFFFA8A827277DA8
%A8FFFFA8277DFD05FFA852FFFFFFA87D5227277DA8FF525252F85252A8FF
%A852F8277DFD05FFF827FFFFFFA827F8F852A8FFFFA827F852FD04FF52F8
%277DFD04FF52F8A8FFFFFFA852F8F87DA8FFA8A852277DA8FFFF527DF852
%7D7DFFFFA87DF8A87DFD0AFFF852F827FD05FF27F8A8FD04FF7DF827FD05
%FFA87DFD04FFA85227277DFFFF7DA87DF8FF52A8FFFFFFF852FD06FF2727
%FFFFFFA8A8527DA8FD04FF7D27A8FD04FF7D52F8A8FD04FF7D27A8FD04FF
%A8F827A8FFFFFF7D52F87DA8FD04FF2752FFFFFF7D5227275252A8FD09FF
%7DF8272752A8FFFFFF27277DFD05FFF87DFD05FFA852FD05FF522727FD05
%FF5227A8FD05FF277DFD06FF2727FD04FFA87D7DFD05FF7D27A8FD04FFA8
%5227FD05FFA8F8FD05FFA827F8FD05FF7D277DFD05FF2752FFFFFFA8A852
%F87DA8A8FD0BFF5227527DFFFFFF27F8A8FD04FF7DF827FD05FFA87DFD05
%FF7D2727A8FD04FF52F8A8FD04FFA8527DFD06FF52F8FD04FFA87D7DA8FD
%04FF7DF8A8FD04FFA87DF8FD05FF7D27FD05FFA852F8A8FD04FFA8277DFD
%05FF2752FD05FF52F87DFD0DFF27F8A8A8FFFFFF27F87DFFFFFF5227F8F8
%27A8FFFFFFA852FD05FF5227F8FD04FFA8F8F852FD04FFA8277DFD06FF27
%F8A8FFFFFFA8527DFD05FF52277DFD04FFA87DF8A8FD04FFA8F8FD05FF7D
%52F8A8FD04FF7D2752FD05FFF852FD05FF52F87DFD0DFFF8F8A8FD04FF52
%F8A8FD04FF7DF852FFA8FFFFFFA87DFD05FF7D2727A8FFFFFFA8F8F852FD
%04FFA8527DFD06FF52F8FD05FF527DFD05FF7DF8A8FD04FFA87DF8FD05FF
%7D27FD05FFA852F87DFD04FFA8277DFD05FF5252FD05FF52F87DFD0CFF7D
%F8F8A8FD04FF2727A8FD04FFA8F852FD05FFA87DFD05FF522727FD04FFA8
%F8F852FD04FFA8527DA8FD05FF52F8A8FFFFFFA87D7DFD05FF52F87DFD04
%FFA87DF8A8FD04FFA8F8FD05FF7D52F87DFD04FF7D2752FD05FF2752FD05
%FF7DF87DFD0CFFA8F8F8A8FD04FF5227A8FD04FF7DF827FD05FFA8A8FD05
%FF522727FD04FFA8F8F852FD04FFA87D7DFD06FF52F8FD04FFA87D7DA8FD
%04FF52F87DFD04FF7D7DF8A8FD04FF7D27FD05FFA852F87DFD04FFA8277D
%FD05FF5227FD05FF7DF87DFD0CFF7DF8F8A8FD04FF2727A8FD04FF7DF827
%A8FD05FF7DFD05FF5227F8FD04FFA8F8F827FD04FFA87D7DA8FD05FF27F8
%A8FFFFFF7DA87DFD05FF27F852FD04FFA852F8A8FD04FF7DF8FD05FF7D7D
%F87DFD04FF7D5227FD05FF2752FD05FF7DF87DFD0CFFA8F8F8A8FD04FF7D
%27FD05FF27F8F8FD05FFA8A8FD05FF7D2727FD04FFA8F8F852FD04FF7D7D
%7DFD06FF52F8FD04FFA8A87DA8FD04FF27F87DFD04FF7D7DF8FD05FF7D27
%FD05FFA87DF852FFFFFFA8A85252FD05FF5252FD05FF7DF87DFD0CFF7DF8
%F8A8FD04FF5227A8FD04FF27F8F87DFD05FF7DFD05FF5227F8FD04FFA8F8
%F852FD04FFA87D7DA8FD05FF2727FD04FF7DA87DFD05FFF8F852FD04FFA8
%7DF8A8FD04FF7DF8FD05FF7D7DF852FD04FF7D52F8FD05FF2752FD05FF7D
%F87DFD0DFFF8F8A8FD04FF52F8FD05FFF8F8F87DFD05FFA8FD05FF7D2727
%A8FFFFFFA8F8F852FD04FF7DA87DA8FD05FF2727FD04FFA87D7DA8FD04FF
%27F87DFD04FFA87DF8FD05FF7D27FD04FFA8A87DF827FFFFFFA8A85227FD
%05FF5252FD05FF52F87DFD0DFF27F8A8FD04FF52F8A8FFFFFFA827F8F87D
%FD05FFA8FD05FF52F8F8FD04FFA8F8F852FD04FFA87D7DA8FD05FFF827FD
%04FF7DA87DFD05FF27F852FD04FFA87DF8A8FD04FFA8F8FD04FFA87D7DF8
%27FD04FF7D2752FD05FF2752FD05FF7DF87DFD0DFF52F8A8FD04FF7DF8FD
%05FF27F8F8A8FD05FFA8FD05FF7DF827FD04FFA827F852FD04FFA87D7DFD
%05FFA8F852FD04FFA87D7DA8FD04FF7DF8A8FD04FFA87DF8FD05FF7D27FD
%04FFA8A87DF8F8FD04FFA8277DFD05FF5252FD05FF7DF8A8FD0DFFA8F8A8
%FD04FF5227A8FD04FF52F8F8A8FD05FFA8FD05FF52F8F8FD04FFA8F8F852
%FD05FF527DFD05FFA8F87DFD04FF7DA87DFD05FF7D27A8FD04FFA87DF8A8
%FD04FFA8F8FD05FF7D7DF852FD04FF7D27A8FD05FF2752FD05FFA8F8FD0F
%FF52A8FD04FF7D27FD05FF7DF827FD0CFFA8F852FD05FF52F8A8FD05FF52
%7DFD05FF7DF8A8FD04FFA8527DFD05FFA827FD05FFA85227FD05FF7D27FD
%05FFA8F827FD06FF27FD06FF5252FD05FFA827FD0FFFA8A8FD04FF7D7DFD
%06FF27A8FD06FFA8FD06FF527DFD05FF7D52FD06FF7DA8FD05FF7D7DFD06
%FF527DFD05FFA87DFD06FF277DFD05FFA852FD06FF2752FD05FFA87DFD06
%FF527DFD06FF52FDFCFFFDFCFFFD1EFFA8FD11FFA8FD21FF7DFD19FFA8FD
%19FFA8FD0EFFA8A8FD06FF52F852FD07FF2752FD05FFA8F827FFFFFFA87D
%FD13FFA8FD06FFA852F87DFD06FF52F8A8FD05FFA82752FD06FF7DF87DFD
%04FF7DA8FFA8FF7DFD0DFF52F852FD0DFF7D52FD06FF7DF852FD06FF52F8
%F8A8FD05FF2752FFFFFF27F87DFD07FF527DFD08FF52277DFD05FF277DF8
%27FD06FF5227A8FD05FFA8F827FD06FFA8F8A8FFFFFFA8F8FFA87DFF5227
%FD0CFF7DF87DFD0DFF527DFD06FFA8F87DFD05FF277D52F87DFD05FFF852
%FFFFFF52F87DFD07FF5227FD08FF52F8A8FD04FFA87DFF2727FD06FF7D27
%FD07FFF827FD06FFA827A8FFFFFF27F8A87DF8FF27F8A8FD0BFF7DF87DFD
%0DFF7D7DFD07FFF8A8FD04FFA8F8FF7DF8A8FD05FF5252FFFFFF52F852FD
%07FF27277DFD07FF7DF87DFD05FF7DFF5252FD06FF7D27FD07FFF827FD07
%FFF8FFFFFFA827F85252277DF8F8A8FD0BFF7DF87DFD0BFFA852F82752FD
%05FF52F852A8FD04FF522727F8A8FD04FF7DF8277DFFFF7DF87DFD06FFA8
%F8F852FD08FFF852A8FFFFFFA852FF5227FD06FF7DF8FD05FF7D52F8F827
%A8FD04FFA827A8FFFFA827FD06F82752FFFFFFA8FD05FF5227F8F8F82752
%FD0AFF7DF8F8A8FFFFFFA82727F82727A8FD04FF7DF8F8A8FD05FFF852FF
%FFFF52F852FD07FF27F8F8A8FD06FF7D27F852A8FFFFFF525227277DFD04
%FF7D525252FD05FF27F8F87DA8FD04FF7DF87DA8FFA827F8F8F827F8F8F8
%7DFFFFFF2752FD04FFA85252277D52A8FD0BFF2752FD04FF527DA8F87DA8
%52FD04FF52F87DF8FD05FFF852FFFFA852F852FD07FFA8F8F852FD06FF7D
%27F87DFD05FFA8272752A8FD04FF7D27FD06FF7DF8F8A8FFA8FFFFA82727
%277DFFFF27F8525227A8F8F87DFFFFFF277DFD06FF7DF87DFD0DFF5252FD
%06FFA8F8A8FD06FFF852FFA8FD05FF2752FFFFFFA8F852FD08FF52F852FD
%07FF7DF87DFD06FFF87DFD06FF52F8FD06FF7DF8F8A8FD06FF27A8FFFFFF
%52F8FF5227FF52F8FD04FF277DFD06FF7DF87DFD0DFF2752FD06FF7DF87D
%FD05FF52F87DFD07FFF852FFFFFFA8F852FD08FFA8F8F8FD07FF52F852FD
%05FFA8F87DFD06FF27F87DFD05FF7DF827A8FD05FFA827A8FFFFFF7D27FF
%7D27FF5252FD04FF2752FD06FF52F852FD0DFF5252FD06FFA8F87DFD05FF
%27F8FD08FFF852FFFFFFA8F852FD09FF27F8A8FD06FF7DF87DFD05FFA8F8
%A8FD06FFF8F852FD05FF7DF8F8FD07FF27A8FD04FFA8FF5227FFA8A8FFFF
%7D52272752A8FD04FF52F852FD0DFF277DFD06FF7DF87DFD05FFF827FD08
%FFF852FD04FFF827FD09FF7DF87DFD06FF52F827FD05FF7DF87DFD05FFA8
%F8F87DFD05FFA8F8F8A8FD05FFA8277DFD06FF52F8FD05FFA8FFF87DA8FD
%05FF27F827FD0DFF527DFD06FFA8F8A8FD04FFA8F852FD08FFF852FD04FF
%27F8FD09FFA8F852FD06FF52F852FD05FF7DF8FD07FFF8F852FD05FF7DF8
%27FD07FF27A8FD06FF5227FD07FF527DFD06FF52F852FD0DFF527DFD06FF
%7DF87DFD04FF7DF87DFD08FFF852FD04FF27F8A8FD09FFF852FD06FFF8F8
%52FD05FF52F8A8FD05FFA8F8F87DFD05FFA8F827FD06FFA8277DFD06FF52
%F8FD07FF277DFD06FF27F827FD0DFF5252FD06FFA8F8A8FD04FF52F8A8FD
%07FFA82752FD04FF7DF87DFD09FF5227FD05FFA8F8F87DFD05FF7DF8FD07
%FFF8F852FD05FFA82727FD07FF27A8FD06FF5227FD07FF527DFD06FF27F8
%27FD0DFF527DFD06FF7DF87DFD04FF7DF8A8FD08FFF852FD04FFA8F827FD
%09FF52F8FD05FF7DF8F87DFD05FF52F8A8FD05FFA8F8F87DFD05FFA8F827
%FD06FFA827A8FD06FF5227FD07FF527DFD06FFF8F827FD0DFF7D7DFD06FF
%A8F8A8FD04FF52F8A8FD08FF2752FD05FF27F8A8FD08FF7DF8FD05FF27F8
%F8A8FD05FF7DF8FD07FFF8F852FD05FFA82727FD07FF27A8FD06FF5227FD
%07FF7DA8FD06FF27F827FD0DFF7D7DFD06FF7DF87DFD04FF7DF8A8FD08FF
%F852FD05FFA8F852FD08FF7D27FD04FFA8F8F8F8A8FD05FF7D27A8FD05FF
%A8F8F87DFD06FFF852FD06FFA827A8FD06FF5227FD07FF7DA8FD06FFF8F8
%F8FD0DFF7D7DFD06FFA8F87DFD04FFA8F87DFD08FFF852FD06FF52F8A8FD
%06FF7D522752A8FFFF7DF8F8F8FD06FFA8F8A8FD06FFF8F852FD06FF2752
%FD07FF27A8FD06FF5227FD07FFA8FD06FFA827F827A8FD0CFF52A8FD06FF
%7DF87DFD05FFF87DFD08FFF852FD06FFA8F8F8FD05FFA852272727A8FFFF
%A827F827FD06FFA8277DFD05FFA8F8F87DFD06FFF852FD06FFA8277DFD06
%FF52F8FD07FFA8FD06FFA8F8F8F8A8FD0CFFA8A8FD06FFA8F87DFD05FF52
%27FD08FFF852FD07FFA8F852FD06FFA827FD05FFA8F852FD07FF277DFD06
%FFF8F87DFD06FF2752FD07FF27A8FD06FF5227FD0EFFA827F827A8FD0CFF
%7DA8FD06FFA8F87DFD05FFA827A8FD07FFF852FD08FFA82752FD05FF7D27
%FD06FF277DFD07FF7D27FD05FFA8F8F87DFD06FF2752FD06FFA8277DFD06
%FF52F8FD0FFF272727FD0DFFA8A8FD07FFF8A8FD06FF527DFD06FFA8277D
%FD09FFA8527DFD04FFA8F8FD06FFA8A8FD08FF52A8FD05FF27F8A8FD06FF
%7D7DFD07FF27A8FD06FF7D52FD0FFF7DF87DFD0DFFA8FD08FF52A8FD07FF
%7DFD07FF52FD0CFFA8A8FFFFFFA8A8FD10FF7D7DFD05FF7D27FD07FF7DA8
%FD06FFA827A8FD07FFA8FD0FFFA852A8FD4CFFA8FD17FFA8FDFCFFFD6CFF
%A8FD0AFFA8A8FD0DFFA8FD58FF527DFD0AFF52A8FD0AFFA87DFD0DFF7DA8
%FD23FF7D7DFD0BFFA87DA8FD09FF52A8FD0DFF7DA8FD0AFF7DF827A8FD06
%FF7D2727A8FD0BFF27FD0CFFA827FD09FFA8527DFD0CFFA852FD0AFFA8F8
%52FD09FFA8F852FD0AFFA8F8275252FD06FFA87D522727FD0CFF52F827A8
%FD04FFA8F82752FD0CFF5252FD0BFF277DFD0AFF52F852FD0AFF52F852FD
%0BFF52F852FD07FF7DF8F8FD0CFF52F8F8F87DFD05FF52F8F8F8A8FD0CFF
%52F8F8A8FD04FF52F8F87DFD0CFF7DF8A8FD09FF7DF8A8FD0AFFA8F8F827
%FD08FF52F8F8A8FD0CFF52F852FD05FF7DF827FD0EFF27F8F827FD04FFA8
%F8F8F87DFD0DFFA8F8F852FD04FF27F852FD0EFF2727FD09FF2752FD0CFF
%A8F8F827FD06FF52F8F87DFD0EFF27F827FFFFFF7DF8F8FD0FFF7DF8F8F8
%7DFFFFFF27F8F827FD0FFF52F827FD04FFF8F852FD0EFFA8F852FD07FF27
%F8FD0EFFA8F8F827FD04FF52F8F87DFD10FF27F827FF7DF8F8A8FD10FF52
%F8F827FFFFA8F8F8F8A8FD0FFFA8F8F8A8FFFF52F8F8FD10FF7DF87DFD05
%FF52F8A8FD0FFFA8F8F827FFFF7DF8F87DFD12FF27FD04F8A8FD12FF27F8
%F87DFF27F8F852FD11FF27F852FFFF27F87DFD11FF52F852FFFFFF52F87D
%FD11FFA8F8F8527DF8F87DFD14FFF8F8F87DFD14FFF8F82752F8F852FD13
%FFF8F8FFA8F852FD13FF52F87DFF52F87DFD13FFA8FD04F87DFD14FF52F8
%F8F827FD14FFA8F827F8F827FD14FF7DF852F8F8A8FD14FF52F827F87DFD
%15FF52F8F827FD14FF52F8F85227F8F8FD14FF7DF8F8F8FD16FF52F8F87D
%FD15FFA827F827A8FD14FF7DF827F8F852FD10FFA85227F8F852FFA8F8F8
%F87D7DFD0FFF527DFD04F827A852FD13FF7DF8F8FD13FF7D7D7DF8F852F8
%F87D7DA8FD0EFF7D527DF8F87DA8F8F8527D7DFD0EFF52F8F852FFFFFF7D
%F827F8FD10FF27F8F852A827F82752FD10FFA8FFA8F8272727FD12FFA827
%F827A8FFA8F82727A8FD0FFF7DF8277DFFFFA8F8F852FD0EFFA8F8F827A8
%FD04FF52F8F87DFD0DFF7D27F8F852FFFFFF27F8F852A8FD0DFFA8275227
%27FFA8F8275227FD0FFF52F827FD04FFA8F8F87DFD0FFF27F827FD04FF52
%F827FD0DFFA827F8A87DA8FD04FF7DFF27F87DFD0AFFA82727F87D527DFF
%FFFF525252F82752FD0DFF7DF8F8FFFFFFA8F8F8FD0FFF52277DA8A8FFFF
%FFA87D52277DFD0BFFA87D2752FF7D7DFFFFA852FF52277DFD0BFF27F8A8
%FD0AFFF8F8A8FD0AFF27F8A8FFFFA8FFFFFFA8FFA87DF852FD0CFFA82727
%2752FFFF52272752FD0DFF52F852FF7DA8FFFFFFA8A8FF27F87DFD09FFA8
%27F8F8A8FD05FFA8FFFFFFF8F8F8FD0AFFA87DFD0BFFA87DFD0BFFA8A8FD
%0BFF7DA8FD0CFF2727FF7DA8FFFF7DFFA8F852FD0BFFA8F827FFA852FD04
%FFA852FFFF2727FD0AFFF8F827FD0AFF52F827FD3EFFA827FD09FF7D27FD
%0BFFA8F87D7D52A8FD05FFA8527D52F8FD0AFFA852A8FD0AFFA8527DFDFC
%FFFDC1FFA8FD0FFFA8FD6FFF27A8FD0DFFA827A8FD3BFFA87DFD09FFA8A8
%A8FD0CFFA8A8FD0CFFA8A8FD09FFF827FD0DFF27F8FD3CFFF827FD08FF7D
%2727FD0DFF7D27A8FD0AFF5227FD0AFF7DF87DFD0BFF52F87DFD3BFFA87D
%F827FF5252FFFFFF52F8F8FF7DA8FD0CFF27F8A8FD08FF52F8FD0CFF27F8
%7DFD09FF7DF827FD25FFA87DA8FD08FFA8A87DFD0BFFA8F82752FFFFFF7D
%F8F8275227FD0EFF2727A8FD06FF52F8FD0DFFA8F8F8A8FD07FFA8F827A8
%FD25FFA827F8A8FD06FFA852277DFD0CFF52F827FFFFFF27F852F8F87D52
%27FD0DFF27F8A8FD04FF52F8A8FD0EFFA8F8F8A8FD05FFA8F8F8A8FD09FF
%A8A8FD10FFA8A8A8FD09FFA8F8F8A8FD04FFA827F87DFD0CFF7D52A8F827
%FFFF52FF5227F8F8F87DFD0EFF2727A8FFFF52F8A8FD10FF7DF8F8FD04FF
%A8F8F87DFD09FFA827F852FD0EFFA827F87DFD0AFFA8F8F8A8FFFFFF27F8
%7DFD0DFFA8FFFFA8F827FFFF52F8A827F827A8FD0FFFF827A852F8A8FD12
%FF7DF8F8FFFFFF27F87DFD0BFF52F8F852FD0CFFA827F8277DFD0BFFA8F8
%F8A8A827F87DFD12FFA8F8525227A87DF852A8FD11FF27F8F8A8FD14FF7D
%F827A827F87DFD0DFF7DF8F852A8FD09FF7D27F827FD0EFFA8F82752F87D
%FD14FFA8F8F8A8FF527DA8FD12FF52F827A8FFA8FD13FF7DF8F8F87DFD0F
%FF7D27F852FD08FFA827F827A8FD0FFF7DF8F87DFD15FF7D27F852FD12FF
%A8FFFF52F87D27F8A8FD14FFA8F8F8F8A8FD10FF7D27F87DFD06FFA827F8
%52A8FD10FF52F8F8F8FD14FF52F8A8A8F852FD10FFA827A852F87DFFFFF8
%F8A8527DFD10FF7DF8F852F8F87DFD10FFA827F852FD04FF7DF8F852FD0F
%FFA8A827F87DA8F8F8A8A8FD10FF7DF8A8FFFFA8F87DFD10FFA827F8A8FD
%04FFF8F852FD10FF52F8F87DFF7DF8F852FD10FFA827F827A8FF52F8F87D
%FD10FF7D27F87DFFFF7DF8F8A8FD0FFF52F8A8FD04FFA8F852FD0FFF52F8
%27A8FD04FF52F827A8FD0DFF7D27F8F8A8FFFFFF7DF8F827A8FD10FF52F8
%F827F8F8A8FD11FF52F827FD04FF522727FD0EFF52F8A8FD06FFA8F87DFD
%0CFFA87DF8A8A852FFFFFF7D52FFF852A8FD0BFF5227F87DA8FD05FFA87D
%F82752FD0FFF7D27F8F8F852A8FD0FFFA852F8A8A8FD05FFA82727A8FD0B
%FF7DF87DFD08FFA8F8A8FD0BFF7DF87DFFFFA8FFFFFFA8FFFFA8F827FD0A
%FFF8F827A8FD09FFA827F8F8FD07FF7D7D52522727F8F8F8527D27F8F8F8
%27277D527D7DFD08FF52F8A8FD08FFA82727FD0BFFA8A8FD0BFFA8FD0BFF
%A87DA8FD0AFFA87DFD0AFF7D7DFD0DFF7D7DFD07FFA87D522727277D7DFD
%04FFA87D522727277D7DFD09FFA87DFD0AFF7DA8FD23FFA8FDFCFFFDFCFF
%FD68FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Печать</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-02-13T22:44:14+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-02-13T22:44:14+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-02-13T22:44:13+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtaaJZFiZ1Ej1&#xA;KISAxA60HemKrsVeL/8AOTH5p+dvy+0jRbvy5DAsN5d8Lu9mpIQYgJBb+kafDMobk4NQBQUJBxV6&#xA;9pU2oTaZaTajbraahJCj3dqj+qsUrKC8YkAXmFbatN8VRWKuxV5nqnnHyjB+eGlW8+uafFcRaJqF&#xA;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&#xA;bxcm+03CMKtT3NMVRuKuxVLtF8teXNCSaPRNKs9LS4b1LhLK3itxI425OIlXkfc4qmOKuxVKdA8p&#xA;+WfLy3A0PS7bTvrcjTXTW8SxtI7EsWdgKtudq9O2KptirsVQup6Vpmq2MthqdpDfWM44zWtwiyxO&#xA;PBkcEHFWtI0nTdH0y20vTLdLTT7OMRW1tGKIiL0AxVF4qxPXPym/LPXJzcar5Z065uWPJ7j6uiSs&#xA;T/NIgVm+k4qgtM/I78otNkWS18p6cXT7DTwi4pTof3/qb++Ks2igghhWGGNY4UHFIkAVQo7BRsBi&#xA;rEtZ/J78rdZna41Hytp0twxq8y26ROx8WaMIW+nFVHSfyT/KbSZUmsvKmnLLHThJLCJ2Ur0IM3qE&#xA;H364qzVEREVEUKigBVAoABsAAMVbxVBXOi6TdanZ6pcWkUmo6eJBZXbKPViEy8JAjdQHXqMVRuKu&#xA;xVBx6NpUerzaylpGNVnhS2lveI9VoY2Z1j5fyhnJp/QYqjMVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:39731d11-13d5-764f-9df3-d0a09bb4ddec</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:39731d11-13d5-764f-9df3-d0a09bb4ddec</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:3ce65390-7879-3645-9787-d78bfbd8ad9b</stRef:instanceID>
            <stRef:documentID>xmp.did:3ce65390-7879-3645-9787-d78bfbd8ad9b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:18ed965d-35a9-c741-99f7-a05d0a294b84</stEvt:instanceID>
                  <stEvt:when>2015-09-28T19:21:44+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6b32299d-71aa-464c-81dd-4e9be1ab01fa</stEvt:instanceID>
                  <stEvt:when>2015-11-13T13:51:53+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0a64df09-0824-eb45-82d5-a187a932581a</stEvt:instanceID>
                  <stEvt:when>2015-11-13T14:44:43+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a7254478-ad39-4a46-a5ab-f4ab66ae767e</stEvt:instanceID>
                  <stEvt:when>2015-11-13T16:48:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:102dcc29-4666-0546-97fc-e45ae3b16979</stEvt:instanceID>
                  <stEvt:when>2015-11-16T20:13:35+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3ce65390-7879-3645-9787-d78bfbd8ad9b</stEvt:instanceID>
                  <stEvt:when>2016-01-21T10:37:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:39731d11-13d5-764f-9df3-d0a09bb4ddec</stEvt:instanceID>
                  <stEvt:when>2016-02-13T22:44:14+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>540.000000</stDim:w>
            <stDim:h>430.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=92 G=92 B=92</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>92</xmpG:red>
                           <xmpG:green>92</xmpG:green>
                           <xmpG:blue>92</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -430 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 430 li
540 430 li
540 0 li
cp
clp
540 430 mo
0 430 li
0 0 li
540 0 li
540 430 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
75.8982 44.7733 mo
72.7611 41.929 68.2265 40.9838 64.1473 42.489 cv
60.0681 40.9838 55.5336 41.929 52.3964 44.7733 cv
52.0292 45.1062 52.095 45.7002 52.5309 45.9362 cv
52.7384 46.0485 52.9896 46.0543 53.1978 45.9432 cv
56.3165 44.2798 60.8796 44.2873 64.2762 45.8781 cv
67.6729 44.2873 71.9782 44.2798 75.0969 45.9432 cv
75.3051 46.0543 75.5562 46.0485 75.7637 45.9362 cv
75.7637 45.9362 li
76.1996 45.7002 76.2655 45.1062 75.8982 44.7733 cv
cp
.912474 .787625 .619837 .97467 cmyk
f
64.1473 97.4657 mo
63.8386 94.4899 63.6692 91.2697 63.6494 87.9982 cv
63.6037 46.3519 li
62.4032 45.8467 61.0285 45.529 59.6264 45.4298 cv
61.36 103.89 li
61.489 108.242 62.4344 112.531 64.1473 116.535 cv
64.1473 97.4658 li
64.1473 97.4657 li
cp
f
64.6453 87.9982 mo
64.6255 91.2698 64.4561 94.49 64.1473 97.4658 cv
64.1473 116.535 li
65.8602 112.531 66.8056 108.242 66.9347 103.89 cv
68.6679 45.4413 li
67.2726 45.5595 65.9169 45.9074 64.6908 46.4646 cv
64.6453 87.9982 li
cp
f
67.3502 43.9011 mo
60.9445 43.9011 li
60.9445 28.6143 li
67.3502 28.6143 li
67.3502 43.9011 li
cp
f
58.2438 26.956 mo
64.1473 21.0525 li
70.0508 26.956 li
64.1473 32.8595 li
58.2438 26.956 li
cp
f
281.68 26.5609 mo
281.68 26.5609 li
284.105 24.1364 288.035 24.1364 290.46 26.5609 cv
290.46 26.5609 li
286.07 30.9508 li
281.68 26.5609 li
cp
f
282.806 108.071 mo
286.181 114.086 li
289.557 108.071 li
289.777 107.575 289.889 107.047 289.889 106.503 cv
289.889 76.3292 li
288.97 74.001 288.444 70.6787 288.444 67.1872 cv
288.444 63.8589 288.925 60.6681 289.769 58.3617 cv
288.924 57.1202 288.444 55.4419 288.444 53.6973 cv
288.444 51.2125 289.293 49.6487 289.889 48.5042 cv
282.474 48.4119 li
283.07 49.5565 283.919 51.1772 283.919 53.6973 cv
283.919 55.4419 283.439 57.1202 282.594 58.3617 cv
283.438 60.668 283.919 63.8589 283.919 67.1872 cv
283.919 70.6787 283.393 74.001 282.474 76.3292 cv
282.474 106.503 li
282.474 107.047 282.586 107.575 282.806 108.071 cv
cp
286.181 116.535 mo
281.723 108.587 li
281.426 107.927 281.276 107.226 281.276 106.503 cv
281.276 76.0968 li
281.319 75.9885 li
282.21 73.7933 282.72 70.5853 282.72 67.1872 cv
282.72 63.8523 282.225 60.6832 281.362 58.4925 cv
281.238 58.177 li
281.444 57.9079 li
282.255 56.8509 282.72 55.3162 282.72 53.6973 cv
282.72 52.069 282.25 50.5284 281.431 49.4705 cv
280.683 48.5042 li
291.68 48.5042 li
290.932 49.4705 li
290.113 50.5284 289.643 52.069 289.643 53.6973 cv
289.643 55.3162 290.108 56.8509 290.919 57.9079 cv
291.125 58.177 li
291.001 58.4925 li
290.138 60.6833 289.643 63.8525 289.643 67.1872 cv
289.643 70.5853 290.153 73.7933 291.043 75.9885 cv
291.087 76.0968 li
291.087 106.503 li
291.087 107.226 290.937 107.927 290.64 108.587 cv
290.616 108.634 li
286.181 116.535 li
cp
f
288.041 36.3168 mo
284.099 32.375 li
284.099 35.0029 li
288.041 38.9446 li
288.041 36.3168 li
cp
f
284.099 37.1411 mo
284.099 39.7689 li
288.041 43.7106 li
288.041 41.0828 li
284.099 37.1411 li
cp
f
288.041 27.4089 mo
284.099 27.4089 li
284.099 30.2368 li
288.041 34.1785 li
288.041 27.4089 li
cp
f
284.099 47.2429 mo
288.041 47.2429 li
288.041 45.8489 li
284.099 41.9071 li
284.099 47.2429 li
cp
f
296.118 50.1722 mo
296.118 50.1722 li
296.495 49.9681 296.552 49.4543 296.234 49.1664 cv
293.335 46.538 289.056 45.7843 285.352 47.4872 cv
285.027 47.637 284.893 48.0299 285.064 48.3453 cv
285.784 49.6756 li
285.942 49.9664 286.181 50.122 286.181 50.122 cv
289.12 48.746 292.843 48.7395 295.541 50.1783 cv
295.721 50.2744 295.938 50.2694 296.118 50.1722 cv
cp
f
276.022 50.1722 mo
276.022 50.1722 li
275.645 49.9681 275.588 49.4543 275.906 49.1664 cv
278.805 46.538 283.084 45.7843 286.788 47.4872 cv
287.113 47.637 287.247 48.0299 287.076 48.3453 cv
286.356 49.6756 li
286.198 49.9664 286.181 50.122 286.181 50.122 cv
283.243 48.746 279.297 48.7395 276.599 50.1783 cv
276.419 50.2744 276.202 50.2694 276.022 50.1722 cv
cp
f
286.428 115.311 mo
285.935 115.311 li
285.935 48.892 li
286.428 48.892 li
286.428 115.311 li
cp
f
347.439 47.2429 mo
351.381 47.2429 li
351.381 44.0033 li
347.439 44.0033 li
347.439 47.2429 li
cp
f
351.381 33.518 mo
347.439 33.518 li
347.439 35.7511 li
351.381 35.7511 li
351.381 33.518 li
cp
f
351.381 40.6332 mo
347.439 40.6332 li
347.439 42.4913 li
351.381 42.4913 li
351.381 40.6332 li
cp
f
351.381 37.2631 mo
347.439 37.2631 li
347.439 39.1212 li
351.381 39.1212 li
351.381 37.2631 li
cp
f
351.381 27.4089 mo
347.439 27.4089 li
347.439 32.0061 li
351.381 32.0061 li
351.381 27.4089 li
cp
f
349.41 24.0368 mo
347.153 24.0368 345.323 25.8666 345.323 28.1238 cv
353.497 28.1238 li
353.497 25.8666 351.667 24.0368 349.41 24.0368 cv
cp
f
352.897 108.072 mo
349.521 114.086 li
346.145 108.071 li
345.926 107.575 345.814 107.047 345.814 106.504 cv
345.859 58.4704 li
346.75 57.2191 347.259 55.4934 347.259 53.6974 cv
347.259 52.2487 346.929 50.8475 346.333 49.7029 cv
352.709 49.7029 li
352.114 50.8475 351.784 52.2487 351.784 53.6974 cv
351.784 55.4933 352.292 57.2191 353.184 58.4704 cv
353.228 106.503 li
353.228 107.047 353.117 107.575 352.897 108.072 cv
cp
354.382 58.0691 mo
354.259 57.908 li
353.448 56.8509 352.983 55.3162 352.983 53.6974 cv
352.983 52.0691 353.452 50.5285 354.272 49.4705 cv
355.02 48.5042 li
344.023 48.5042 li
344.771 49.4705 li
345.59 50.5284 346.06 52.0691 346.06 53.6974 cv
346.06 55.3162 345.595 56.8509 344.784 57.908 cv
344.66 58.0691 li
344.615 106.503 li
344.615 107.227 344.766 107.928 345.063 108.587 cv
349.521 116.535 li
353.956 108.634 li
353.98 108.587 li
354.277 107.928 354.427 107.227 354.427 106.503 cv
354.383 58.2723 li
354.382 58.0691 li
cp
f
356.971 49.7644 mo
341.981 49.7644 li
341.981 47.6671 li
356.971 47.6671 li
356.971 49.7644 li
cp
f
353.828 107.342 mo
349.477 115.311 li
349.477 48.7157 li
353.251 48.7157 li
352.483 53.5578 li
353.783 58.2728 li
353.828 107.342 li
cp
f
381.064 48.9166 mo
378.943 48.9166 li
378.943 107.926 li
378.943 108.578 379.028 109.222 379.193 109.816 cv
381.064 116.535 li
382.934 109.816 li
383.099 109.222 383.185 108.578 383.185 107.926 cv
383.185 48.9166 li
381.064 48.9166 li
cp
f
376.714 26.2246 mo
376.714 26.2246 li
379.18 23.7321 383.179 23.7321 385.646 26.2246 cv
385.646 26.2246 li
381.18 30.7376 li
376.714 26.2246 li
cp
f
385.646 48.7763 mo
385.646 48.7763 li
383.179 51.2688 379.18 51.2688 376.714 48.7763 cv
376.714 48.7763 li
381.18 44.2633 li
385.646 48.7763 li
cp
f
379.175 34.7799 mo
383.185 34.7799 li
383.185 33.6272 li
379.175 33.6272 li
379.175 34.7799 li
cp
f
383.185 27.5142 mo
379.175 27.5142 li
379.175 30.7455 li
383.185 30.7455 li
383.185 27.5142 li
cp
f
379.175 36.7972 mo
383.185 36.7972 li
383.185 35.6445 li
379.175 35.6445 li
379.175 36.7972 li
cp
f
379.175 31.61 mo
379.175 32.7627 li
383.185 32.7627 li
383.185 31.61 li
379.175 31.61 li
cp
f
379.175 47.9046 mo
383.185 47.9046 li
383.185 43.7134 li
379.175 43.7134 li
379.175 47.9046 li
cp
f
379.175 38.8144 mo
383.185 38.8144 li
383.185 37.6617 li
379.175 37.6617 li
379.175 38.8144 li
cp
f
379.175 40.8317 mo
383.185 40.8317 li
383.185 39.679 li
379.175 39.679 li
379.175 40.8317 li
cp
f
379.175 42.8489 mo
383.185 42.8489 li
383.185 41.6962 li
379.175 41.6962 li
379.175 42.8489 li
cp
f
326.157 49.5148 mo
323.766 47.3468 320.237 46.7252 317.181 48.1298 cv
316.913 48.2534 317.773 49.5148 317.773 49.5148 cv
326.157 49.5148 li
cp
f
309.389 49.5148 mo
311.781 47.3468 315.31 46.7252 318.365 48.1298 cv
318.634 48.2534 317.773 49.5148 317.773 49.5148 cv
309.389 49.5148 li
cp
f
314.741 28.8386 mo
316.826 26.3932 li
317.418 25.6986 318.491 25.6986 319.083 26.3932 cv
321.168 28.8386 li
321.503 29.2314 321.223 29.8363 320.707 29.8363 cv
315.201 29.8363 li
314.685 29.8363 314.406 29.2314 314.741 28.8386 cv
cp
f
319.831 31.8633 mo
319.831 30.9714 li
319.831 30.5469 319.485 30.2016 319.061 30.2016 cv
316.848 30.2016 li
316.423 30.2016 316.078 30.5469 316.078 30.9714 cv
316.078 31.8633 li
316.078 32.2878 316.423 32.6332 316.848 32.6332 cv
319.061 32.6332 li
319.485 32.6332 319.831 32.2878 319.831 31.8633 cv
cp
f
316.848 33.0563 mo
316.423 33.0563 316.078 33.4016 316.078 33.8261 cv
316.078 34.718 li
316.078 35.1425 316.423 35.4879 316.848 35.4879 cv
319.061 35.4879 li
319.485 35.4879 319.831 35.1425 319.831 34.718 cv
319.831 33.8261 li
319.831 33.4016 319.485 33.0563 319.061 33.0563 cv
316.848 33.0563 li
cp
f
319.831 36.6808 mo
319.831 36.2563 319.485 35.911 319.061 35.911 cv
316.848 35.911 li
316.423 35.911 316.078 36.2563 316.078 36.6808 cv
316.078 37.5727 li
316.078 37.9972 316.423 38.3426 316.848 38.3426 cv
319.061 38.3426 li
319.485 38.3426 319.831 37.9972 319.831 37.5727 cv
319.831 36.6808 li
cp
f
319.061 38.7656 mo
316.848 38.7656 li
316.423 38.7656 316.078 39.111 316.078 39.5355 cv
316.078 40.4274 li
316.078 40.8519 316.423 41.1973 316.848 41.1973 cv
319.061 41.1973 li
319.485 41.1973 319.831 40.8519 319.831 40.4274 cv
319.831 39.5355 li
319.831 39.111 319.485 38.7656 319.061 38.7656 cv
cp
f
319.831 43.2821 mo
319.831 42.3902 li
319.831 41.9657 319.485 41.6203 319.061 41.6203 cv
316.848 41.6203 li
316.423 41.6203 316.078 41.9657 316.078 42.3902 cv
316.078 43.2821 li
316.078 43.7066 316.423 44.0519 316.848 44.0519 cv
319.061 44.0519 li
319.485 44.0519 319.831 43.7066 319.831 43.2821 cv
cp
f
316.078 45.2449 mo
316.078 46.1368 li
316.078 46.5613 316.423 46.9066 316.848 46.9066 cv
319.061 46.9066 li
319.485 46.9066 319.831 46.5613 319.831 46.1368 cv
319.831 45.2449 li
319.831 44.8204 319.485 44.475 319.061 44.475 cv
316.848 44.475 li
316.423 44.475 316.078 44.8204 316.078 45.2449 cv
cp
f
320.473 49.5148 mo
314.913 49.5148 li
314.913 47.3782 li
320.473 47.3782 li
320.473 49.5148 li
cp
f
316.503 51.6059 mo
313.952 92.194 li
317.447 107.986 li
317.447 51.6059 li
316.503 51.6059 li
cp
f
317.773 109.463 mo
317.789 109.391 li
317.757 109.391 li
317.773 109.463 li
cp
f
313.455 92.2326 mo
316.039 51.1123 li
319.507 51.1123 li
322.092 92.2326 li
317.773 111.748 li
313.455 92.2326 li
cp
320.479 50.0778 mo
317.773 50.0778 li
315.068 50.0778 li
312.413 92.3135 li
317.773 116.535 li
323.133 92.3135 li
320.479 50.0778 li
cp
f
321.595 92.194 mo
319.044 51.6059 li
317.94 51.6059 li
317.94 108.709 li
321.595 92.194 li
cp
f
416.571 35.0377 mo
416.571 34.2904 416.309 33.8905 416.099 33.5692 cv
415.92 33.2968 415.802 33.1168 415.802 32.6905 cv
415.802 32.2642 415.92 32.0842 416.099 31.8117 cv
416.309 31.4905 416.571 31.0907 416.571 30.3433 cv
415.649 30.3433 li
415.495 30.3433 li
413.082 31.2131 li
410.117 30.3433 li
409.195 30.3433 li
409.195 31.0907 409.457 31.4905 409.667 31.8117 cv
409.846 32.0842 409.964 32.2642 409.964 32.6905 cv
409.964 33.1168 409.846 33.2968 409.667 33.5692 cv
409.457 33.8905 409.195 34.2904 409.195 35.0377 cv
409.195 35.785 409.457 36.1848 409.667 36.506 cv
409.846 36.7785 409.964 36.9584 409.964 37.3846 cv
409.964 37.8108 409.846 37.9908 409.667 38.2632 cv
409.457 38.5844 409.195 38.9843 409.195 39.7315 cv
409.195 40.4787 409.457 40.8786 409.667 41.1998 cv
409.846 41.4722 409.964 41.6522 409.964 42.0783 cv
409.964 42.5045 409.846 42.6844 409.667 42.9569 cv
409.457 43.2781 409.195 43.6778 409.195 44.4251 cv
409.195 45.1723 409.457 45.5721 409.667 45.8932 cv
409.846 46.1657 409.964 46.3456 409.964 46.7716 cv
409.964 47.1977 409.846 47.3776 409.667 47.65 cv
409.457 47.9712 409.195 48.3709 409.195 49.1181 cv
416.571 49.1181 li
416.571 48.3709 416.309 47.9712 416.099 47.65 cv
415.92 47.3776 415.802 47.1977 415.802 46.7716 cv
415.802 46.3456 415.92 46.1657 416.099 45.8932 cv
416.309 45.5721 416.571 45.1723 416.571 44.4251 cv
416.571 43.6778 416.309 43.2781 416.099 42.9569 cv
415.92 42.6844 415.802 42.5045 415.802 42.0783 cv
415.802 41.6522 415.92 41.4722 416.099 41.1998 cv
416.309 40.8786 416.571 40.4787 416.571 39.7315 cv
416.571 38.9843 416.309 38.5844 416.099 38.2632 cv
415.92 37.9908 415.802 37.8108 415.802 37.3846 cv
415.802 36.9584 415.92 36.7785 416.099 36.506 cv
416.309 36.1848 416.571 35.785 416.571 35.0377 cv
cp
f
412.883 30.4312 mo
411.522 30.4312 410.419 29.3282 410.419 27.9677 cv
410.419 26.6071 411.522 25.5041 412.883 25.5041 cv
414.243 25.5041 415.346 26.6071 415.346 27.9677 cv
415.346 29.3282 414.243 30.4312 412.883 30.4312 cv
cp
412.883 23.0406 mo
410.162 23.0406 407.956 25.2465 407.956 27.9677 cv
407.956 30.6888 410.162 32.8947 412.883 32.8947 cv
415.604 32.8947 417.81 30.6888 417.81 27.9677 cv
417.81 25.2465 415.604 23.0406 412.883 23.0406 cv
cp
f
420.443 102.848 mo
417.1 58.3098 li
416.242 57.1913 415.7 55.5567 415.7 53.7344 cv
415.7 51.9021 416.248 50.2596 417.115 49.1406 cv
412.838 49.1406 li
412.793 49.1406 li
412.793 115.268 li
412.838 115.348 li
420.443 102.848 li
cp
f
413.393 49.74 mo
416.026 49.74 li
415.431 50.8845 415.101 52.2857 415.101 53.7344 cv
415.101 55.54 415.615 57.2748 416.515 58.5277 cv
419.831 102.701 li
413.393 113.283 li
413.393 49.74 li
cp
417.698 58.265 mo
417.684 58.0867 li
417.576 57.945 li
416.764 56.8879 416.299 55.3532 416.299 53.7344 cv
416.299 52.106 416.769 50.5654 417.588 49.5076 cv
418.337 48.5412 li
412.194 48.5412 li
412.194 115.424 li
412.817 116.535 li
421.055 102.995 li
417.698 58.265 li
cp
f
412.284 113.283 mo
405.845 102.701 li
409.161 58.5277 li
410.062 57.2748 410.576 55.54 410.576 53.7344 cv
410.576 52.2857 410.245 50.8845 409.65 49.74 cv
412.284 49.74 li
412.284 113.283 li
cp
407.339 48.5412 mo
408.088 49.5076 li
408.907 50.5654 409.377 52.106 409.377 53.7344 cv
409.377 55.3532 408.912 56.8879 408.101 57.945 cv
407.992 58.0867 li
404.636 102.803 li
404.621 102.995 li
412.859 116.535 li
413.482 115.424 li
413.482 48.5412 li
407.339 48.5412 li
cp
f
422.864 49.9865 mo
402.902 49.9865 li
402.902 48.2496 li
422.864 48.2496 li
422.864 49.9865 li
cp
f
434.616 48.7555 mo
436.155 50.749 li
436.155 50.749 439.564 50.749 444.586 50.749 cv
444.586 48.7555 li
434.616 48.7555 li
cp
f
454.556 48.7555 mo
453.017 50.749 li
453.017 50.749 449.608 50.749 444.586 50.749 cv
444.586 48.7555 li
454.556 48.7555 li
cp
f
446.589 33.0018 mo
446.589 32.064 li
446.589 31.62 446.228 31.2588 445.784 31.2588 cv
443.504 31.2588 li
443.06 31.2588 442.698 31.62 442.698 32.064 cv
442.698 33.0018 li
442.698 33.4458 443.06 33.807 443.504 33.807 cv
445.784 33.807 li
446.228 33.807 446.589 33.4458 446.589 33.0018 cv
cp
f
446.589 35.9025 mo
446.589 34.9647 li
446.589 34.5207 446.228 34.1596 445.784 34.1596 cv
443.504 34.1596 li
443.06 34.1596 442.698 34.5207 442.698 34.9647 cv
442.698 35.9025 li
442.698 36.3465 443.06 36.7077 443.504 36.7077 cv
445.784 36.7077 li
446.228 36.7077 446.589 36.3465 446.589 35.9025 cv
cp
f
446.589 38.8033 mo
446.589 37.8654 li
446.589 37.4215 446.228 37.0603 445.784 37.0603 cv
443.504 37.0603 li
443.06 37.0603 442.698 37.4215 442.698 37.8654 cv
442.698 38.8033 li
442.698 39.2472 443.06 39.6084 443.504 39.6084 cv
445.784 39.6084 li
446.228 39.6084 446.589 39.2472 446.589 38.8033 cv
cp
f
446.589 41.7039 mo
446.589 40.7661 li
446.589 40.3221 446.228 39.9609 445.784 39.9609 cv
443.504 39.9609 li
443.06 39.9609 442.698 40.3221 442.698 40.7661 cv
442.698 41.7039 li
442.698 42.1479 443.06 42.5091 443.504 42.5091 cv
445.784 42.5091 li
446.228 42.5091 446.589 42.1479 446.589 41.7039 cv
cp
f
446.589 44.6047 mo
446.589 43.6668 li
446.589 43.2228 446.228 42.8617 445.784 42.8617 cv
443.504 42.8617 li
443.06 42.8617 442.698 43.2228 442.698 43.6668 cv
442.698 44.6047 li
442.698 45.0486 443.06 45.4098 443.504 45.4098 cv
445.784 45.4098 li
446.228 45.4098 446.589 45.0486 446.589 44.6047 cv
cp
f
445.784 45.7624 mo
443.504 45.7624 li
443.06 45.7624 442.698 46.1236 442.698 46.5675 cv
442.698 47.5054 li
442.698 47.9493 443.06 48.3105 443.504 48.3105 cv
445.784 48.3105 li
446.228 48.3105 446.589 47.9493 446.589 47.5054 cv
446.589 46.5675 li
446.589 46.1236 446.228 45.7624 445.784 45.7624 cv
cp
f
447.979 28.0302 mo
441.47 28.0302 li
440.978 28.0302 440.577 28.4311 440.577 28.9238 cv
440.577 29.6848 li
440.577 30.1775 440.978 30.5783 441.47 30.5783 cv
447.979 30.5783 li
448.472 30.5783 448.873 30.1775 448.873 29.6848 cv
448.873 28.9238 li
448.873 28.4311 448.472 28.0302 447.979 28.0302 cv
cp
f
444.586 89.536 mo
444.586 116.535 li
450.033 92.1062 li
447.513 52.3248 li
444.586 52.3248 li
444.586 89.536 li
cp
f
440.347 92.0118 mo
442.784 53.5236 li
446.388 53.5236 li
448.826 92.0118 li
444.586 111.027 li
440.347 92.0118 li
cp
447.513 52.3248 mo
441.659 52.3248 li
439.14 92.1062 li
444.586 116.535 li
450.033 92.1062 li
447.513 52.3248 li
cp
f
447.309 49.1033 mo
444.586 48.7555 li
441.863 49.1033 li
441.759 50.749 li
447.414 50.749 li
447.309 49.1033 li
cp
f
444.586 48.7555 mo
441.863 49.1033 li
441.759 50.749 li
447.414 50.749 li
447.309 49.1033 li
444.586 48.7555 li
444.586 48.7555 li
cp
f
476.289 24.2105 mo
473.296 24.2105 470.87 26.6368 470.87 29.6298 cv
481.709 29.6298 li
481.709 26.6368 479.282 24.2105 476.289 24.2105 cv
cp
f
476.742 44.5025 mo
476.597 112.793 li
476.289 114.752 li
476.289 116.535 li
478.378 112.139 li
479.36 44.5025 li
476.742 44.5025 li
cp
f
475.982 112.793 mo
475.837 44.5025 li
473.219 44.5025 li
474.201 112.139 li
476.289 116.535 li
476.289 114.752 li
475.982 112.793 li
cp
f
478.378 28.6061 mo
476.289 28.6061 li
474.201 28.6061 li
473.362 42.189 li
479.217 42.189 li
478.378 28.6061 li
cp
f
463.283 43.7649 mo
465.883 47.7424 li
465.883 47.7424 470.091 45.3457 476.289 45.3457 cv
476.289 43.7649 li
463.283 43.7649 li
cp
f
489.296 43.7649 mo
486.696 47.7424 li
486.696 47.7424 482.488 45.3457 476.289 45.3457 cv
476.289 43.7649 li
489.296 43.7649 li
cp
f
147.081 396.963 mo
143.282 393.165 li
135.639 401.815 li
133.52 399.695 li
131.578 401.637 131.578 404.784 133.52 406.726 cv
135.461 408.667 138.609 408.667 140.55 406.726 cv
138.43 404.606 li
147.081 396.963 li
cp
f
179.13 396.963 mo
182.928 393.165 li
190.571 401.815 li
192.691 399.695 li
194.632 401.637 194.632 404.784 192.691 406.726 cv
190.749 408.667 187.602 408.667 185.66 406.726 cv
187.78 404.606 li
179.13 396.963 li
cp
f
179.27 392.721 mo
179.176 392.82 179.08 392.918 178.981 393.016 cv
178.883 393.115 178.785 393.211 178.686 393.306 cv
135.033 349.467 li
133.962 347.997 li
135.432 349.068 li
179.27 392.721 li
cp
188.443 385.605 mo
184.177 384.711 li
184.177 384.711 183.377 387.629 180.838 390.908 cv
137.011 348.337 li
132.805 346.84 li
134.302 351.046 li
176.873 394.873 li
173.594 397.412 170.676 398.212 170.676 398.212 cv
171.57 402.478 li
174.547 399.501 li
180.007 394.042 li
185.466 388.582 li
188.443 385.605 li
cp
f
161.093 375.638 mo
159.599 377.089 li
161.093 378.627 li
162.588 377.139 li
161.093 375.638 li
cp
f
163.622 377.139 mo
165.117 378.627 li
166.611 377.089 li
165.117 375.638 li
163.622 377.139 li
cp
f
163.105 376.624 mo
164.6 375.136 li
163.105 373.684 li
161.61 375.136 li
163.105 376.624 li
cp
f
147.524 393.306 mo
147.426 393.211 147.327 393.115 147.229 393.016 cv
147.131 392.918 147.035 392.82 146.94 392.721 cv
160.594 379.125 li
159.093 377.581 li
145.373 390.908 li
142.833 387.629 142.033 384.711 142.033 384.711 cv
137.767 385.605 li
140.744 388.582 li
146.204 394.042 li
151.663 399.501 li
154.64 402.478 li
155.534 398.212 li
155.534 398.212 152.617 397.412 149.337 394.873 cv
162.614 381.205 li
161.113 379.659 li
147.524 393.306 li
cp
f
163.105 377.658 mo
161.61 379.159 li
163.105 380.698 li
164.6 379.159 li
163.105 377.658 li
cp
f
193.406 346.84 mo
189.199 348.337 li
163.611 373.192 li
165.1 374.638 li
190.779 349.068 li
192.249 347.997 li
191.178 349.467 li
165.615 375.138 li
167.102 376.583 li
191.908 351.046 li
193.406 346.84 li
cp
f
394.511 134.993 mo
390.527 140.41 li
394.511 145.828 li
398.495 140.41 li
394.511 134.993 li
cp
f
396.524 151.583 mo
392.498 151.583 li
392.107 151.583 391.786 151.262 391.786 150.871 cv
391.786 150.871 li
391.786 150.479 392.107 150.158 392.498 150.158 cv
396.524 150.158 li
396.916 150.158 397.237 150.479 397.237 150.871 cv
397.237 150.871 li
397.237 151.262 396.916 151.583 396.524 151.583 cv
cp
f
396.524 156.062 mo
392.498 156.062 li
392.107 156.062 391.786 155.741 391.786 155.35 cv
391.786 155.35 li
391.786 154.958 392.107 154.637 392.498 154.637 cv
396.524 154.637 li
396.916 154.637 397.237 154.958 397.237 155.35 cv
397.237 155.35 li
397.237 155.741 396.916 156.062 396.524 156.062 cv
cp
f
392.498 156.062 mo
396.524 156.062 li
396.916 156.062 397.237 155.741 397.237 155.35 cv
397.237 155.35 li
397.237 154.958 396.916 154.637 396.524 154.637 cv
392.498 154.637 li
392.107 154.637 391.786 154.958 391.786 155.35 cv
391.786 155.35 li
391.786 155.741 392.107 156.062 392.498 156.062 cv
cp
f
392.498 145.679 mo
396.524 145.679 li
396.916 145.679 397.237 146 397.237 146.391 cv
397.237 146.391 li
397.237 146.783 396.916 147.104 396.524 147.104 cv
392.498 147.104 li
392.107 147.104 391.786 146.783 391.786 146.391 cv
391.786 146.391 li
391.786 146 392.107 145.679 392.498 145.679 cv
cp
f
393.947 164.311 mo
393.947 230.809 li
392.751 227.889 li
392.747 225.24 392.686 177.748 392.724 163.865 cv
392.523 163.745 392.334 163.605 392.161 163.447 cv
392.119 177.166 392.187 228 392.187 228 cv
394.511 233.673 li
394.511 164.357 li
394.319 164.357 394.131 164.341 393.947 164.311 cv
cp
f
394.511 164.357 mo
394.511 233.673 li
394.511 233.673 li
394.511 233.673 li
394.511 233.673 li
396.836 228 li
396.836 228 396.904 177.166 396.861 163.447 cv
396.241 164.012 395.417 164.357 394.511 164.357 cv
cp
f
396.087 157.745 mo
396.087 141.983 li
396.087 141.375 395.59 140.878 394.983 140.878 cv
394.04 140.878 li
393.432 140.878 392.935 141.375 392.935 141.983 cv
392.935 157.745 li
393.409 157.505 393.944 157.369 394.511 157.369 cv
395.079 157.369 395.614 157.505 396.087 157.745 cv
cp
f
397.862 159.875 mo
397.955 160.188 398.005 160.52 398.005 160.863 cv
398.005 161.324 397.915 161.764 397.753 162.167 cv
398.738 162.581 399.643 163.187 400.422 163.965 cv
401.966 162.421 li
400.793 161.248 399.391 160.386 397.862 159.875 cv
cp
f
391.16 159.875 mo
389.631 160.386 388.23 161.248 387.057 162.421 cv
388.601 163.965 li
389.379 163.187 390.285 162.581 391.27 162.167 cv
391.108 161.764 391.018 161.324 391.018 160.863 cv
391.018 160.52 391.068 160.188 391.16 159.875 cv
cp
f
394.511 162.61 mo
393.546 162.61 392.764 161.828 392.764 160.863 cv
392.764 159.898 393.546 159.116 394.511 159.116 cv
395.476 159.116 396.258 159.898 396.258 160.863 cv
396.258 161.828 395.476 162.61 394.511 162.61 cv
cp
397.862 159.875 mo
397.588 158.945 396.938 158.176 396.087 157.745 cv
395.614 157.505 395.079 157.369 394.511 157.369 cv
393.944 157.369 393.409 157.505 392.935 157.745 cv
392.085 158.176 391.434 158.945 391.16 159.875 cv
391.068 160.188 391.018 160.52 391.018 160.863 cv
391.018 161.324 391.108 161.764 391.27 162.167 cv
391.468 162.659 391.775 163.096 392.161 163.447 cv
392.334 163.605 392.523 163.745 392.724 163.865 cv
393.093 164.085 393.506 164.24 393.947 164.311 cv
394.131 164.341 394.319 164.357 394.511 164.357 cv
395.417 164.357 396.241 164.012 396.861 163.447 cv
397.247 163.096 397.554 162.659 397.753 162.167 cv
397.915 161.764 398.005 161.324 398.005 160.863 cv
398.005 160.52 397.955 160.188 397.862 159.875 cv
cp
f
389.153 163.152 mo
389.153 163.906 388.542 164.518 387.787 164.518 cv
387.033 164.518 386.422 163.906 386.422 163.152 cv
386.422 162.398 387.033 161.786 387.787 161.786 cv
388.542 161.786 389.153 162.398 389.153 163.152 cv
cp
f
399.869 163.152 mo
399.869 163.906 400.481 164.518 401.235 164.518 cv
401.989 164.518 402.601 163.906 402.601 163.152 cv
402.601 162.398 401.989 161.786 401.235 161.786 cv
400.481 161.786 399.869 162.398 399.869 163.152 cv
cp
f
428.657 221.032 mo
428.657 149.862 li
433.382 149.862 li
433.382 221.032 li
428.657 221.032 li
cp
f
431.02 151.277 mo
434.412 151.277 li
431.02 139.405 li
427.627 151.277 li
431.02 151.277 li
cp
f
431.02 218.643 mo
427.627 218.643 li
431.02 230.515 li
434.412 218.643 li
431.02 218.643 li
cp
f
419.38 171.662 mo
419.38 171.662 414.645 166.717 414.645 157.059 cv
414.645 147.4 419.38 142.456 419.38 142.456 cv
419.38 142.456 416.214 148.123 416.214 157.059 cv
416.214 165.995 419.38 171.662 419.38 171.662 cv
cp
430.074 153.947 mo
420.201 153.947 420.979 138.151 420.979 138.151 cv
420.979 138.151 413.081 142.938 413.081 157.059 cv
413.081 171.18 420.979 175.966 420.979 175.966 cv
420.979 175.966 420.201 160.17 430.074 160.17 cv
437.433 160.17 441.881 160.17 441.881 160.17 cv
441.881 157.059 li
441.881 153.947 li
441.881 153.947 437.433 153.947 430.074 153.947 cv
cp
f
442.659 171.662 mo
442.659 171.662 445.825 165.995 445.825 157.059 cv
445.825 148.123 442.659 142.456 442.659 142.456 cv
442.659 142.456 447.394 147.4 447.394 157.059 cv
447.394 166.717 442.659 171.662 442.659 171.662 cv
cp
441.107 138.151 mo
441.107 138.151 441.885 153.947 432.012 153.947 cv
424.652 153.947 420.205 153.947 420.205 153.947 cv
420.205 157.059 li
420.205 160.17 li
420.205 160.17 424.652 160.17 432.012 160.17 cv
441.885 160.17 441.107 175.966 441.107 175.966 cv
441.107 175.966 449.005 171.18 449.005 157.059 cv
449.005 142.938 441.107 138.151 441.107 138.151 cv
cp
f
464.96 158.362 mo
466.656 156.372 li
467.138 155.807 468.011 155.807 468.493 156.372 cv
470.189 158.362 li
470.461 158.681 470.234 159.173 469.814 159.173 cv
465.334 159.173 li
464.914 159.173 464.687 158.681 464.96 158.362 cv
cp
f
465.548 175.374 mo
465.548 158.936 li
469.6 158.936 li
469.6 175.374 li
465.548 175.374 li
cp
f
476.091 176.742 mo
475.529 175.912 474.602 175.417 473.61 175.417 cv
467.574 175.417 li
467.574 174.006 li
473.61 174.006 li
475.071 174.006 476.435 174.733 477.26 175.95 cv
476.091 176.742 li
cp
f
477.691 177.174 mo
477.691 178.249 476.819 179.121 475.744 179.121 cv
474.668 179.121 473.797 178.249 473.797 177.174 cv
473.797 176.098 474.668 175.227 475.744 175.227 cv
476.819 175.227 477.691 176.098 477.691 177.174 cv
cp
f
459.058 176.742 mo
457.889 175.95 li
458.713 174.733 460.078 174.006 461.538 174.006 cv
467.574 174.006 li
467.574 175.417 li
461.538 175.417 li
460.547 175.417 459.619 175.912 459.058 176.742 cv
cp
f
457.458 177.174 mo
457.458 178.249 458.329 179.121 459.405 179.121 cv
460.48 179.121 461.352 178.249 461.352 177.174 cv
461.352 176.098 460.48 175.227 459.405 175.227 cv
458.329 175.227 457.458 176.098 457.458 177.174 cv
cp
f
467.574 212.718 mo
470.227 176.098 li
464.921 176.098 li
467.574 212.718 li
cp
f
223.918 49.7904 mo
221.409 49.7904 li
221.409 29.8563 li
223.918 29.8563 li
223.918 49.7904 li
cp
f
223.323 33.2968 mo
222.004 33.2968 li
221.22 33.2968 220.578 32.6554 220.578 31.8715 cv
220.578 31.8715 li
220.578 31.0876 221.22 30.4462 222.004 30.4462 cv
223.323 30.4462 li
224.107 30.4462 224.749 31.0876 224.749 31.8715 cv
224.749 31.8715 li
224.749 32.6554 224.107 33.2968 223.323 33.2968 cv
cp
f
223.323 36.1474 mo
222.004 36.1474 li
221.22 36.1474 220.578 35.506 220.578 34.7221 cv
220.578 34.7221 li
220.578 33.9382 221.22 33.2968 222.004 33.2968 cv
223.323 33.2968 li
224.107 33.2968 224.749 33.9382 224.749 34.7221 cv
224.749 34.7221 li
224.749 35.506 224.107 36.1474 223.323 36.1474 cv
cp
f
223.323 38.998 mo
222.004 38.998 li
221.22 38.998 220.578 38.3567 220.578 37.5727 cv
220.578 37.5727 li
220.578 36.7888 221.22 36.1474 222.004 36.1474 cv
223.323 36.1474 li
224.107 36.1474 224.749 36.7888 224.749 37.5727 cv
224.749 37.5727 li
224.749 38.3567 224.107 38.998 223.323 38.998 cv
cp
f
223.323 41.8487 mo
222.004 41.8487 li
221.22 41.8487 220.578 41.2073 220.578 40.4234 cv
220.578 40.4234 li
220.578 39.6394 221.22 38.998 222.004 38.998 cv
223.323 38.998 li
224.107 38.998 224.749 39.6394 224.749 40.4234 cv
224.749 40.4234 li
224.749 41.2073 224.107 41.8487 223.323 41.8487 cv
cp
f
223.323 44.6993 mo
222.004 44.6993 li
221.22 44.6993 220.578 44.0579 220.578 43.274 cv
220.578 43.274 li
220.578 42.4901 221.22 41.8487 222.004 41.8487 cv
223.323 41.8487 li
224.107 41.8487 224.749 42.4901 224.749 43.274 cv
224.749 43.274 li
224.749 44.0579 224.107 44.6993 223.323 44.6993 cv
cp
f
223.323 47.5499 mo
222.004 47.5499 li
221.22 47.5499 220.578 46.9085 220.578 46.1246 cv
220.578 46.1246 li
220.578 45.3407 221.22 44.6993 222.004 44.6993 cv
223.323 44.6993 li
224.107 44.6993 224.749 45.3407 224.749 46.1246 cv
224.749 46.1246 li
224.749 46.9085 224.107 47.5499 223.323 47.5499 cv
cp
f
225.887 27.2226 mo
225.887 29.0029 224.444 30.4462 222.663 30.4462 cv
220.883 30.4462 219.44 29.0029 219.44 27.2226 cv
219.44 25.4422 220.883 23.9989 222.663 23.9989 cv
224.444 23.9989 225.887 25.4422 225.887 27.2226 cv
cp
f
212.489 43.274 mo
222.663 52.4173 li
222.663 47.549 li
212.489 43.274 li
cp
f
232.838 43.274 mo
222.663 52.4173 li
222.663 47.549 li
232.838 43.274 li
cp
f
218.518 92.2544 mo
221.122 50.8339 li
222.288 50.6838 li
222.28 51.0244 222.271 51.3696 222.262 51.721 cv
222.246 52.5162 222.229 53.3383 222.212 54.1835 cv
222.182 55.8738 222.153 57.6563 222.132 59.5002 cv
222.122 60.4222 222.113 61.3595 222.103 62.3084 cv
222.099 62.7829 222.094 63.2602 222.09 63.7399 cv
222.087 64.2196 222.085 64.7017 222.082 65.1858 cv
222.069 67.1219 222.068 69.0888 222.064 71.0557 cv
222.068 73.0226 222.07 74.9895 222.083 76.9256 cv
222.087 77.8937 222.095 78.8541 222.104 79.803 cv
222.114 80.7518 222.124 81.6892 222.134 82.6111 cv
222.155 84.4551 222.183 86.2376 222.214 87.9279 cv
222.231 88.773 222.248 89.5951 222.264 90.3903 cv
222.284 91.1855 222.303 91.9539 222.321 92.6914 cv
222.34 93.429 222.354 94.1359 222.375 94.8081 cv
222.397 95.4804 222.417 96.1181 222.435 96.7174 cv
222.47 97.916 222.513 98.9609 222.545 99.8214 cv
222.575 100.682 222.61 101.358 222.629 101.819 cv
222.652 102.28 222.664 102.526 222.664 102.526 cv
222.664 102.526 222.675 102.28 222.698 101.819 cv
222.717 101.358 222.752 100.682 222.782 99.8214 cv
222.814 98.9609 222.857 97.916 222.892 96.7174 cv
222.91 96.1181 222.93 95.4804 222.952 94.8081 cv
222.973 94.1359 222.987 93.429 223.006 92.6914 cv
223.024 91.9539 223.043 91.1855 223.063 90.3903 cv
223.079 89.5951 223.096 88.773 223.113 87.9279 cv
223.144 86.2376 223.172 84.4551 223.193 82.6111 cv
223.203 81.6892 223.213 80.7518 223.223 79.803 cv
223.232 78.8541 223.24 77.8937 223.244 76.9256 cv
223.257 74.9895 223.259 73.0226 223.263 71.0557 cv
223.259 69.0888 223.258 67.1219 223.245 65.1858 cv
223.242 64.7017 223.24 64.2196 223.237 63.7399 cv
223.233 63.2602 223.228 62.7829 223.224 62.3084 cv
223.214 61.3595 223.205 60.4222 223.195 59.5002 cv
223.174 57.6563 223.145 55.8738 223.115 54.1835 cv
223.098 53.3383 223.081 52.5162 223.065 51.721 cv
223.056 51.3696 223.047 51.0244 223.039 50.6838 cv
224.205 50.8339 li
226.809 92.2544 li
222.663 110.987 li
218.518 92.2544 li
cp
225.34 49.7712 mo
223.009 49.4713 li
223.009 49.4543 223.008 49.4369 223.008 49.4199 cv
222.989 48.6823 222.97 47.9755 222.953 47.3032 cv
222.932 46.6309 222.912 45.9932 222.893 45.394 cv
222.858 44.1954 222.815 43.1505 222.783 42.29 cv
222.752 41.4295 222.717 40.7533 222.698 40.2923 cv
222.675 39.8314 222.664 39.5855 222.664 39.5855 cv
222.664 39.5855 222.652 39.8314 222.629 40.2923 cv
222.61 40.7533 222.575 41.4295 222.544 42.29 cv
222.512 43.1505 222.469 44.1954 222.434 45.394 cv
222.415 45.9932 222.395 46.6309 222.374 47.3032 cv
222.357 47.9755 222.338 48.6823 222.319 49.4199 cv
222.319 49.4369 222.318 49.4543 222.318 49.4713 cv
219.987 49.7712 li
217.311 92.3481 li
222.663 116.535 li
228.016 92.3481 li
225.34 49.7712 li
cp
f
347.092 156.313 mo
357.98 153.386 li
357.98 157.747 li
347.335 157.747 li
346.504 157.747 346.308 156.587 347.092 156.313 cv
cp
f
368.867 156.313 mo
357.98 153.386 li
357.98 157.747 li
368.624 157.747 li
369.455 157.747 369.652 156.587 368.867 156.313 cv
cp
f
361.651 143.452 mo
361.651 142.708 361.39 142.31 361.181 141.99 cv
361.003 141.719 360.886 141.54 360.886 141.115 cv
360.886 140.691 361.003 140.512 361.181 140.241 cv
361.39 139.921 361.651 139.523 361.651 138.779 cv
360.733 138.779 li
360.58 138.779 li
355.38 138.779 li
355.227 138.779 li
354.309 138.779 li
354.309 139.523 354.569 139.921 354.779 140.241 cv
354.956 140.512 355.074 140.691 355.074 141.115 cv
355.074 141.54 354.956 141.719 354.779 141.99 cv
354.569 142.31 354.309 142.708 354.309 143.452 cv
354.309 144.196 354.569 144.594 354.779 144.913 cv
354.956 145.185 355.074 145.364 355.074 145.788 cv
355.074 146.212 354.956 146.391 354.779 146.663 cv
354.569 146.982 354.309 147.38 354.309 148.124 cv
354.309 148.868 354.569 149.266 354.779 149.586 cv
354.956 149.857 355.074 150.036 355.074 150.46 cv
355.074 150.885 354.956 151.064 354.779 151.335 cv
354.569 151.654 354.309 152.053 354.309 152.796 cv
354.309 153.54 354.569 153.938 354.779 154.258 cv
354.957 154.529 355.074 154.708 355.074 155.132 cv
355.074 155.556 354.956 155.735 354.779 156.006 cv
354.569 156.326 354.309 156.724 354.309 157.468 cv
361.651 157.468 li
361.651 156.724 361.39 156.326 361.181 156.006 cv
361.003 155.735 360.886 155.556 360.886 155.132 cv
360.886 154.708 361.003 154.529 361.181 154.258 cv
361.39 153.938 361.651 153.54 361.651 152.796 cv
361.651 152.053 361.39 151.654 361.181 151.335 cv
361.003 151.064 360.886 150.885 360.886 150.46 cv
360.886 150.036 361.003 149.857 361.181 149.586 cv
361.39 149.266 361.651 148.868 361.651 148.124 cv
361.651 147.38 361.39 146.982 361.181 146.663 cv
361.003 146.391 360.886 146.212 360.886 145.788 cv
360.886 145.364 361.003 145.185 361.181 144.913 cv
361.39 144.594 361.651 144.196 361.651 143.452 cv
cp
f
363.367 157.771 mo
363.368 157.747 li
357.98 157.747 li
357.98 157.771 li
363.367 157.771 li
cp
f
357.98 157.747 mo
352.591 157.747 li
352.592 157.771 li
357.98 157.771 li
357.98 157.747 li
cp
f
363.346 158.264 mo
358.227 158.264 li
358.227 230.954 li
360.674 220.608 li
363.346 158.264 li
cp
f
352.613 158.264 mo
355.285 220.608 li
357.733 230.954 li
357.733 158.264 li
352.613 158.264 li
cp
f
361.595 140.357 mo
354.364 140.357 li
353.637 140.357 353.041 139.762 353.041 139.034 cv
353.041 139.034 li
353.041 138.307 353.637 137.711 354.364 137.711 cv
361.595 137.711 li
362.323 137.711 362.918 138.307 362.918 139.034 cv
362.918 139.034 li
362.918 139.762 362.323 140.357 361.595 140.357 cv
cp
f
29.1369 294.791 mo
32.7963 301.142 li
32.4532 301.213 32.0276 301.305 31.5475 301.785 cv
31.0628 302.27 30.9734 302.699 30.9015 303.044 cv
30.8406 303.336 30.8003 303.53 30.5239 303.806 cv
30.2475 304.083 30.0543 304.123 29.7618 304.184 cv
29.417 304.256 28.9877 304.345 28.503 304.83 cv
28.0183 305.315 27.9289 305.744 27.857 306.089 cv
27.796 306.381 27.7558 306.574 27.4793 306.851 cv
27.2029 307.127 27.0097 307.167 26.7172 307.228 cv
26.3724 307.3 25.9432 307.39 25.4584 307.874 cv
24.9737 308.359 24.8842 308.788 24.8123 309.133 cv
24.7513 309.426 24.7111 309.619 24.4346 309.896 cv
24.1995 310.131 24.0243 310.195 23.7974 310.246 cv
27.8709 314.32 li
27.9224 314.093 27.9867 313.918 28.2218 313.683 cv
28.4983 313.406 28.6915 313.366 28.984 313.305 cv
29.3289 313.233 29.7581 313.144 30.2428 312.659 cv
30.7276 312.174 30.817 311.745 30.8889 311.4 cv
30.9499 311.108 30.9901 310.914 31.2665 310.638 cv
31.543 310.362 31.7362 310.321 32.0287 310.26 cv
32.3735 310.188 32.8028 310.099 33.2875 309.614 cv
33.7722 309.129 33.8616 308.7 33.9335 308.355 cv
33.9944 308.063 34.0347 307.87 34.3111 307.593 cv
34.5875 307.317 34.7808 307.277 35.0732 307.216 cv
35.4181 307.144 35.8472 307.055 36.3319 306.57 cv
36.8121 306.09 36.9043 305.664 36.9758 305.321 cv
43.3262 308.98 li
44.0157 309.313 44.6435 308.429 44.1022 307.888 cv
40.6773 304.463 li
40.6789 304.461 li
37.342 301.124 li
37.3404 301.126 li
37.1659 300.951 li
36.9913 300.777 li
36.993 300.775 li
33.6561 297.438 li
33.6544 297.44 li
30.2295 294.015 li
29.6882 293.474 28.8041 294.102 29.1369 294.791 cv
cp
f
27.9885 315.169 mo
27.5052 314.685 li
23.4318 310.612 li
22.9485 310.129 li
22.5646 309.745 21.9363 309.745 21.5524 310.129 cv
21.2243 310.457 li
20.8403 310.841 20.8403 311.469 21.2243 311.853 cv
26.2642 316.893 li
26.6482 317.277 27.2764 317.277 27.6604 316.893 cv
27.9885 316.565 li
28.3724 316.181 28.3724 315.553 27.9885 315.169 cv
cp
f
22.323 253.131 mo
30.5885 258.234 li
72.9404 297.104 li
69.6185 300.426 li
22.323 253.131 li
cp
f
53.4803 279.244 mo
50.8501 281.658 li
53.4803 284.288 li
56.1104 281.658 li
53.4803 279.244 li
cp
f
84.6376 253.131 mo
76.372 258.234 li
54.0017 278.765 li
56.6095 281.159 li
84.6376 253.131 li
cp
f
53.8293 284.637 mo
56.4595 287.267 li
59.0943 284.396 li
56.4744 281.992 li
53.8293 284.637 li
cp
f
84.9868 253.479 mo
56.9735 281.493 li
59.5711 283.877 li
79.8835 261.745 li
84.9868 253.479 li
cp
f
27.077 261.745 mo
21.9737 253.48 li
69.2695 300.775 li
65.9475 304.097 li
27.077 261.745 li
cp
f
50.3301 282.135 mo
47.8662 284.396 li
50.501 287.267 li
52.9816 284.787 li
50.3301 282.135 li
cp
f
34.0201 297.104 mo
37.342 300.426 li
50.0019 287.766 li
47.3467 284.873 li
34.0201 297.104 li
cp
f
37.6911 300.775 mo
41.013 304.097 li
53.0017 291.035 li
50.336 288.13 li
37.6911 300.775 li
cp
f
53.3307 285.136 mo
50.8351 287.631 li
53.4803 290.513 li
55.9823 287.787 li
53.3307 285.136 li
cp
f
77.8237 294.791 mo
74.1642 301.142 li
74.5073 301.213 74.9329 301.305 75.413 301.785 cv
75.8977 302.27 75.9871 302.699 76.059 303.044 cv
76.12 303.336 76.1602 303.53 76.4366 303.806 cv
76.713 304.083 76.9063 304.123 77.1987 304.184 cv
77.5436 304.256 77.9728 304.345 78.4575 304.83 cv
78.9422 305.315 79.0316 305.744 79.1035 306.089 cv
79.1645 306.381 79.2048 306.574 79.4812 306.851 cv
79.7576 307.127 79.9508 307.167 80.2433 307.228 cv
80.5881 307.3 81.0174 307.39 81.5021 307.874 cv
81.9869 308.359 82.0763 308.788 82.1482 309.133 cv
82.2092 309.426 82.2495 309.619 82.5259 309.896 cv
82.7611 310.131 82.9362 310.195 83.1631 310.246 cv
79.0896 314.32 li
79.0382 314.093 78.9739 313.918 78.7388 313.683 cv
78.4623 313.406 78.269 313.366 77.9766 313.305 cv
77.6317 313.233 77.2024 313.144 76.7177 312.659 cv
76.2329 312.174 76.1435 311.745 76.0716 311.4 cv
76.0106 311.108 75.9704 310.914 75.694 310.638 cv
75.4176 310.362 75.2243 310.321 74.9318 310.26 cv
74.587 310.188 74.1578 310.099 73.6731 309.614 cv
73.1884 309.129 73.0989 308.7 73.027 308.355 cv
72.9661 308.063 72.9259 307.87 72.6494 307.593 cv
72.373 307.317 72.1798 307.277 71.8873 307.216 cv
71.5425 307.144 71.1133 307.055 70.6286 306.57 cv
70.1484 306.09 70.0562 305.664 69.9847 305.321 cv
63.6343 308.98 li
62.9448 309.313 62.317 308.429 62.8583 307.888 cv
66.2832 304.463 li
66.2816 304.461 li
69.6185 301.124 li
69.6202 301.126 li
69.7947 300.951 li
69.9692 300.777 li
69.9675 300.775 li
73.3044 297.438 li
73.3061 297.44 li
76.731 294.015 li
77.2723 293.474 78.1564 294.102 77.8237 294.791 cv
cp
f
78.9721 315.169 mo
79.4553 314.685 li
83.5288 310.612 li
84.012 310.129 li
84.396 309.745 85.0242 309.745 85.4082 310.129 cv
85.7363 310.457 li
86.1202 310.841 86.1202 311.469 85.7363 311.853 cv
80.6963 316.893 li
80.3124 317.277 79.6841 317.277 79.3002 316.893 cv
78.9721 316.565 li
78.5881 316.181 78.5881 315.553 78.9721 315.169 cv
cp
f
106.765 162.064 mo
104.089 160.814 li
103.515 161.74 91.378 181.708 94.9966 207.728 cv
90.0202 184.333 102.892 161.513 103.461 160.521 cv
100.872 159.311 li
100.872 159.311 76.3427 201.62 104.628 231.5 cv
104.628 231.5 86.9013 199.823 106.765 162.064 cv
cp
f
101.907 142.632 mo
101.881 142.544 101.799 142.484 101.707 142.488 cv
95.5883 142.801 87.7337 152.377 97.6328 157.001 cv
110.739 163.123 li
110.883 163.19 110.895 163.388 110.762 163.473 cv
110.311 163.762 109.575 164.383 109.699 165.314 cv
109.876 166.643 112.134 167.411 113.133 165.273 cv
114.413 162.532 112.734 160.95 104.228 156.977 cv
96.0872 153.175 93.1197 148.339 102.148 144.053 cv
102.237 144.01 102.283 143.91 102.255 143.815 cv
101.907 142.632 li
cp
f
107.542 137.166 mo
100.955 139.023 li
100.955 139.023 104.967 146.96 102.446 155.597 cv
108.586 158.464 li
110.397 154.304 112.876 145.602 107.542 137.166 cv
cp
f
219.531 225.957 mo
219.531 227.411 218.353 228.59 216.899 228.59 cv
215.445 228.59 214.266 227.411 214.266 225.957 cv
214.266 224.503 215.445 223.324 216.899 223.324 cv
218.353 223.324 219.531 224.503 219.531 225.957 cv
cp
f
218.11 225.957 mo
214.271 225.957 li
214.271 214.046 li
218.11 214.046 li
218.11 225.957 li
cp
f
218.659 207.066 mo
218.659 157.846 200.889 140.076 200.889 140.076 cv
200.206 144.137 li
203.962 148.225 211.842 159.212 215.154 181.982 cv
215.154 181.982 210.504 157.738 199.8 146.555 cv
197.927 157.705 li
215.556 180.129 213.722 207.066 213.722 207.066 cv
218.659 207.066 li
cp
f
216.191 209.393 mo
206.6 209.393 li
208.284 214.046 li
209.95 212.577 212.868 211.603 216.191 211.603 cv
219.513 211.603 222.431 212.577 224.097 214.046 cv
225.781 209.393 li
216.191 209.393 li
cp
f
215.614 210.515 mo
212.242 211.603 li
212.242 211.766 212.253 211.927 212.272 212.086 cv
213.465 211.776 214.791 211.603 216.191 211.603 cv
217.59 211.603 218.916 211.776 220.109 212.086 cv
220.128 211.927 220.139 211.766 220.139 211.603 cv
215.614 210.515 li
cp
f
212.361 212.569 mo
212.792 214.283 214.343 215.552 216.191 215.552 cv
218.038 215.552 219.589 214.283 220.02 212.569 cv
218.845 212.262 217.543 212.096 216.191 212.096 cv
214.838 212.096 213.536 212.262 212.361 212.569 cv
cp
f
219.296 208.9 mo
218.656 207.56 li
216.449 207.56 li
213.725 207.56 li
213.085 208.9 li
216.191 208.9 li
219.296 208.9 li
cp
f
253.041 159.826 mo
248.79 160.854 li
252.742 187.958 242.689 204.282 242.689 204.282 cv
251.422 182.59 248.307 164.319 247.656 161.128 cv
246.187 161.483 li
250.103 186.546 237.998 210.89 237.998 210.89 cv
246.975 215.753 247.942 228.028 247.942 228.028 cv
260.636 186.349 253.041 159.826 253.041 159.826 cv
cp
f
251.224 153.459 mo
249.187 155.873 li
252.197 156.997 li
251.339 153.306 li
251.332 153.327 251.322 153.349 251.31 153.369 cv
251.287 153.405 251.258 153.436 251.224 153.459 cv
cp
f
244.667 154.347 mo
246.817 150.923 li
243.238 148.663 li
244.582 154.447 li
244.604 154.408 244.633 154.374 244.667 154.347 cv
cp
f
249.159 147.193 mo
246.014 145.932 li
243.954 148.376 li
247.155 150.385 li
249.159 147.193 li
cp
f
245.929 159.733 mo
252.479 158.211 li
252.37 157.739 li
248.752 156.388 li
245.929 159.733 li
cp
f
247.355 151.26 mo
245.357 154.443 li
248.556 155.637 li
250.554 153.269 li
247.355 151.26 li
cp
f
244.827 154.922 mo
244.786 154.915 244.746 154.901 244.709 154.878 cv
244.697 154.87 244.687 154.861 244.676 154.852 cv
245.657 159.071 li
248.121 156.152 li
244.827 154.922 li
cp
f
249.665 146.712 mo
249.714 146.716 249.762 146.73 249.807 146.758 cv
249.811 146.761 249.815 146.765 249.82 146.768 cv
248.951 143.031 li
248.34 143.173 li
246.445 145.421 li
249.665 146.712 li
cp
f
247.308 143.413 mo
243.593 144.277 li
245.825 145.172 li
247.308 143.413 li
cp
f
245.394 145.683 mo
242.513 144.528 li
242.289 144.58 li
243.161 148.332 li
245.394 145.683 li
cp
f
251.247 152.91 mo
249.92 147.201 li
247.692 150.723 li
251.247 152.91 li
cp
f
250.268 140.638 mo
240.052 143.013 li
240.548 145.146 li
250.764 142.772 li
250.268 140.638 li
cp
f
245.389 161.692 mo
245.671 162.906 244.915 164.119 243.702 164.401 cv
242.488 164.683 241.275 163.928 240.993 162.714 cv
240.711 161.5 241.466 160.287 242.68 160.005 cv
243.894 159.723 245.107 160.478 245.389 161.692 cv
cp
f
254.318 159.617 mo
254.6 160.831 255.813 161.586 257.026 161.304 cv
258.24 161.022 258.996 159.809 258.714 158.595 cv
258.431 157.381 257.219 156.626 256.005 156.908 cv
254.791 157.19 254.036 158.403 254.318 159.617 cv
cp
f
243.031 161.516 mo
249.694 159.968 li
249.342 158.456 li
242.68 160.005 li
243.031 161.516 li
cp
f
256.356 158.419 mo
249.694 159.968 li
249.342 158.456 li
256.005 156.908 li
256.356 158.419 li
cp
f
259.068 306.537 mo
257.142 304.61 li
255.743 305.106 li
257.938 307.301 li
260.134 309.497 li
260.629 308.097 li
259.068 306.537 li
cp
f
258.052 312.603 mo
257.438 311.555 256.634 310.518 255.678 309.562 cv
254.721 308.605 253.684 307.801 252.636 307.188 cv
252.071 308.132 251.936 309.262 252.229 310.295 cv
244.629 317.895 li
244.591 317.93 244.553 317.965 244.516 318.002 cv
243.488 319.03 243.488 320.697 244.516 321.725 cv
245.544 322.753 247.211 322.753 248.239 321.725 cv
248.958 321.006 249.174 319.974 248.887 319.067 cv
254.944 313.01 li
255.978 313.304 257.107 313.168 258.052 312.603 cv
cp
f
259.952 310.012 mo
257.772 307.833 li
257.589 307.65 li
255.227 305.288 li
250.808 300.869 li
248.708 305.349 li
250.925 305.489 253.678 306.863 256.027 309.213 cv
258.376 311.562 259.751 314.314 259.89 316.531 cv
264.37 314.431 li
259.952 310.012 li
cp
f
279.709 306.537 mo
281.636 304.61 li
283.035 305.106 li
280.84 307.301 li
278.644 309.497 li
278.149 308.097 li
279.709 306.537 li
cp
f
280.726 312.603 mo
281.34 311.555 282.144 310.518 283.1 309.562 cv
284.056 308.605 285.094 307.801 286.142 307.188 cv
286.707 308.132 286.842 309.262 286.548 310.295 cv
294.149 317.895 li
294.187 317.93 294.225 317.965 294.262 318.002 cv
295.29 319.03 295.29 320.697 294.262 321.725 cv
293.234 322.753 291.567 322.753 290.539 321.725 cv
289.82 321.006 289.604 319.974 289.891 319.067 cv
283.834 313.01 li
282.8 313.304 281.671 313.168 280.726 312.603 cv
cp
f
281.288 304.26 mo
277.798 307.75 li
242.994 272.946 242.994 247.816 242.994 247.816 cv
246.348 250.205 li
246.582 255.751 248.779 269.092 262.539 287.534 cv
262.539 287.534 248.684 267.104 248.345 251.627 cv
257.554 258.187 li
260.945 286.509 281.288 304.26 281.288 304.26 cv
cp
f
273.176 294.321 mo
295.783 266.665 295.784 247.816 295.784 247.816 cv
292.43 250.205 li
292.195 255.751 289.999 269.092 276.239 287.534 cv
276.239 287.534 290.094 267.104 290.433 251.627 cv
281.224 258.187 li
279.696 270.95 274.725 281.565 269.725 289.378 cv
270.204 290.12 270.676 290.826 271.137 291.494 cv
271.825 292.492 272.508 293.435 273.176 294.321 cv
cp
f
257.49 304.26 mo
260.98 307.75 li
263.896 304.834 266.566 301.986 269.014 299.216 cv
267.849 297.889 266.717 296.56 265.621 295.23 cv
261.148 301.067 257.49 304.26 257.49 304.26 cv
cp
f
278.827 310.012 mo
281.006 307.833 li
281.189 307.65 li
283.551 305.288 li
287.97 300.869 li
290.07 305.349 li
287.852 305.489 285.1 306.863 282.751 309.213 cv
280.402 311.562 279.027 314.314 278.888 316.531 cv
274.407 314.431 li
278.827 310.012 li
cp
f
155.291 291.037 mo
156.715 289.562 158.058 288.051 159.322 286.526 cv
150.298 275.301 148.088 266.007 148.088 266.007 cv
151.526 274.079 155.803 280.631 159.949 285.762 cv
160.371 285.24 160.784 284.717 161.188 284.194 cv
151.163 271.21 146.732 258.017 146.732 258.017 cv
136.947 260.927 127.583 252.931 127.583 252.931 cv
136.944 270.49 147.061 282.821 155.291 291.037 cv
cp
f
173.097 305.773 mo
175.376 302.04 li
171.809 299.381 168.705 296.662 166.007 293.973 cv
164.63 295.289 163.317 296.482 162.081 297.56 cv
168.706 303.337 173.097 305.773 173.097 305.773 cv
cp
f
175.984 301.045 mo
176.772 299.755 li
173.552 297.406 170.625 294.789 167.978 292.048 cv
167.551 292.473 167.13 292.887 166.715 293.291 cv
171.168 297.721 174.785 300.252 175.984 301.045 cv
cp
f
178.883 308.991 mo
178.617 305.843 li
175.694 307.177 li
178.91 309.181 li
178.9 309.16 178.892 309.138 178.887 309.115 cv
178.877 309.073 178.876 309.031 178.883 308.991 cv
cp
f
182.881 303.595 mo
182.894 303.639 182.897 303.683 182.892 303.726 cv
183.793 307.668 li
187.922 306.735 li
182.881 303.595 li
cp
f
184.774 311.961 mo
187.89 310.629 li
187.619 307.444 li
183.934 308.287 li
184.774 311.961 li
cp
f
178.258 301.594 mo
180.296 298.32 li
180.955 297.263 180.632 295.871 179.574 295.212 cv
178.516 294.553 177.125 294.877 176.466 295.934 cv
175.807 296.992 176.13 298.384 177.188 299.043 cv
177.397 299.173 177.619 299.264 177.846 299.32 cv
175.364 303.306 li
172.881 307.293 li
172.731 307.113 172.551 306.954 172.342 306.824 cv
171.284 306.165 169.892 306.489 169.233 307.546 cv
168.575 308.604 168.898 309.996 169.956 310.655 cv
171.014 311.314 172.405 310.99 173.064 309.932 cv
175.036 306.767 li
175.047 306.774 li
178.56 305.172 li
178.258 301.594 li
cp
f
183.174 307.809 mo
182.337 304.146 li
179.23 305.564 li
179.491 308.651 li
183.174 307.809 li
cp
f
182.487 303.38 mo
182.501 303.377 182.515 303.377 182.528 303.375 cv
178.852 301.086 li
179.173 304.892 li
182.373 303.432 li
182.406 303.408 182.445 303.39 182.487 303.38 cv
cp
f
179.255 309.395 mo
184.231 312.494 li
183.316 308.428 li
179.255 309.395 li
cp
f
191.346 308.868 mo
188.21 306.915 li
188.505 310.367 li
191.105 309.255 li
190.519 310.196 li
188.561 311.033 li
188.734 313.062 li
188.173 313.962 li
187.947 311.295 li
184.757 312.659 li
184.719 312.691 184.675 312.715 184.624 312.727 cv
184.618 312.728 184.613 312.728 184.608 312.729 cv
187.73 314.674 li
186.766 316.222 li
188.625 317.381 li
194.17 308.477 li
192.311 307.319 li
191.346 308.868 li
cp
f
159.816 287.161 mo
158.552 288.686 157.209 290.197 155.785 291.672 cv
153.137 294.413 150.21 297.03 146.991 299.379 cv
147.779 300.669 li
148.978 299.876 152.594 297.345 157.048 292.915 cv
158.322 291.648 159.664 290.225 161.038 288.643 cv
161.252 288.397 161.466 288.147 161.681 287.894 cv
162.093 287.409 162.506 286.91 162.921 286.396 cv
167.066 281.265 171.343 274.713 174.781 266.642 cv
174.781 266.642 172.571 275.936 163.547 287.161 cv
163.152 287.651 162.745 288.146 162.324 288.643 cv
162.113 288.892 161.899 289.142 161.681 289.393 cv
160.479 290.777 159.174 292.183 157.755 293.597 cv
155.057 296.286 151.953 299.005 148.386 301.664 cv
150.666 305.397 li
150.666 305.397 155.056 302.961 161.681 297.184 cv
162.917 296.106 164.23 294.913 165.607 293.597 cv
165.842 293.373 166.078 293.146 166.315 292.915 cv
166.731 292.511 167.152 292.097 167.578 291.672 cv
175.809 283.455 185.925 271.125 195.286 253.566 cv
195.286 253.566 185.922 261.562 176.137 258.652 cv
176.137 258.652 171.707 271.845 161.681 284.828 cv
161.277 285.352 160.864 285.875 160.442 286.396 cv
160.235 286.652 160.027 286.906 159.816 287.161 cv
cp
f
144.879 308.615 mo
144.886 308.655 144.885 308.697 144.876 308.739 cv
144.87 308.762 144.862 308.784 144.852 308.804 cv
148.069 306.801 li
145.145 305.467 li
144.879 308.615 li
cp
f
135.841 306.359 mo
139.97 307.292 li
140.871 303.35 li
140.865 303.307 140.868 303.262 140.881 303.219 cv
135.841 306.359 li
cp
f
138.988 311.585 mo
139.828 307.91 li
136.143 307.068 li
135.872 310.253 li
138.988 311.585 li
cp
f
151.421 306.448 mo
151.212 306.578 151.032 306.737 150.882 306.917 cv
148.399 302.93 li
145.916 298.944 li
146.143 298.888 146.365 298.797 146.574 298.667 cv
147.632 298.008 147.955 296.616 147.297 295.558 cv
146.638 294.501 145.246 294.177 144.188 294.836 cv
143.13 295.495 142.807 296.886 143.466 297.944 cv
145.505 301.218 li
145.202 304.796 li
148.715 306.398 li
148.727 306.391 li
150.698 309.556 li
151.357 310.614 152.749 310.938 153.806 310.279 cv
154.864 309.62 155.188 308.228 154.529 307.17 cv
153.87 306.113 152.479 305.789 151.421 306.448 cv
cp
f
140.588 307.433 mo
144.271 308.275 li
144.532 305.188 li
141.425 303.77 li
140.588 307.433 li
cp
f
141.234 302.999 mo
141.248 303.001 141.261 303.001 141.275 303.004 cv
141.318 303.014 141.356 303.032 141.39 303.056 cv
144.589 304.516 li
144.911 300.71 li
141.234 302.999 li
cp
f
139.532 312.118 mo
144.507 309.019 li
140.447 308.052 li
139.532 312.118 li
cp
f
139.139 312.351 mo
139.087 312.339 139.043 312.314 139.005 312.283 cv
135.816 310.919 li
135.589 313.586 li
135.029 312.686 li
135.201 310.657 li
133.243 309.82 li
132.657 308.879 li
135.258 309.991 li
135.552 306.538 li
132.416 308.492 li
131.451 306.943 li
129.592 308.101 li
135.137 317.004 li
136.997 315.846 li
136.032 314.298 li
139.154 312.353 li
139.149 312.352 139.144 312.352 139.139 312.351 cv
cp
f
29.1964 155.62 mo
20.9363 155.62 li
26.7844 161.533 li
29.1964 161.533 li
31.6083 161.533 li
37.4565 155.62 li
29.1964 155.62 li
cp
f
29.1964 140.77 mo
27.4716 140.77 li
27.4716 154.986 li
29.1964 154.986 li
30.9212 154.986 li
30.9212 140.77 li
29.1964 140.77 li
cp
f
29.1964 138.506 mo
28.2438 138.506 27.4716 139.279 27.4716 140.231 cv
30.9212 140.231 li
30.9212 139.279 30.149 138.506 29.1964 138.506 cv
cp
f
37.4565 155.62 mo
37.4565 155.081 33.7583 154.643 29.1964 154.643 cv
24.6345 154.643 20.9363 155.081 20.9363 155.62 cv
20.9363 155.62 24.6345 156.597 29.1964 156.597 cv
33.7583 156.597 37.4565 155.62 37.4565 155.62 cv
cp
f
31.6083 161.533 mo
31.6083 161.719 30.5285 161.869 29.1964 161.869 cv
27.8643 161.869 26.7844 161.719 26.7844 161.533 cv
26.7844 161.348 27.8643 161.198 29.1964 161.198 cv
30.5285 161.198 31.6083 161.348 31.6083 161.533 cv
cp
f
31.6083 162.221 mo
31.6083 162.406 30.5285 162.556 29.1964 162.556 cv
27.8643 162.556 26.7845 162.406 26.7845 162.221 cv
26.7844 162.221 li
28.7899 229.766 li
28.8073 230.291 29.5854 230.291 29.6028 229.766 cv
31.6083 162.221 li
31.6083 162.221 li
cp
f
364.772 315.356 mo
365.969 316.553 li
360.038 322.484 li
357.979 324.543 354.628 324.543 352.568 322.484 cv
348.921 318.836 li
350.117 317.64 li
353.765 321.287 li
355.164 322.687 357.442 322.687 358.841 321.287 cv
364.772 315.356 li
cp
f
358.839 298.932 mo
367.48 307.572 li
369.539 309.632 369.539 312.983 367.48 315.042 cv
365.969 316.553 li
364.772 315.356 li
366.283 313.846 li
367.683 312.446 367.683 310.169 366.283 308.769 cv
357.642 300.128 li
358.839 298.932 li
cp
f
358.117 294.886 mo
359.314 296.083 li
358.839 296.558 li
358.185 297.212 358.185 298.277 358.839 298.932 cv
357.642 300.128 li
356.328 298.814 356.328 296.675 357.643 295.361 cv
358.117 294.886 li
cp
f
358.117 294.886 mo
358.892 294.111 360.148 294.111 360.923 294.886 cv
361.698 295.661 361.698 296.918 360.923 297.693 cv
360.148 298.467 358.892 298.467 358.117 297.693 cv
357.342 296.918 357.342 295.661 358.117 294.886 cv
cp
f
357.102 311.649 mo
357.102 311.649 358.714 311.448 359.334 309.709 cv
359.953 307.97 358.047 303.118 356.544 303.471 cv
355.271 303.77 354.929 305.24 355.273 305.584 cv
356.28 306.591 358.072 308.696 357.102 311.649 cv
cp
f
354.758 314.01 mo
354.758 314.01 356.602 313.557 357.193 311.819 cv
357.783 310.081 355.477 306.017 354.379 305.958 cv
353.347 305.902 352.331 307.506 352.707 307.882 cv
353.637 308.813 355.325 310.423 354.758 314.01 cv
cp
f
352.425 316.265 mo
352.425 316.265 354.269 315.811 354.859 314.073 cv
355.45 312.335 353.144 308.272 352.046 308.212 cv
351.014 308.156 349.998 309.761 350.374 310.137 cv
351.304 311.067 352.992 312.677 352.425 316.265 cv
cp
f
359.115 309.343 mo
359.115 309.343 361.421 308.678 362.162 306.941 cv
362.903 305.204 360.414 301.208 359.331 301.187 cv
357.774 301.156 357.158 302.63 357.535 303.007 cv
359.123 304.595 360.207 307.21 359.115 309.343 cv
cp
f
351.011 309.583 mo
343.251 318.003 345.581 322.007 347.491 323.105 cv
347.96 323.374 348.638 323.042 348.819 322.457 cv
349.65 319.771 352.347 316.607 353.641 315.195 cv
353.789 312.596 351.532 309.909 351.011 309.583 cv
cp
f
389.914 315.356 mo
388.717 316.553 li
394.649 322.484 li
396.708 324.543 400.059 324.543 402.119 322.484 cv
405.766 318.836 li
404.569 317.64 li
400.922 321.287 li
399.522 322.687 397.245 322.687 395.845 321.287 cv
389.914 315.356 li
cp
f
395.847 298.932 mo
387.207 307.572 li
385.147 309.632 385.147 312.983 387.207 315.042 cv
388.717 316.553 li
389.914 315.356 li
388.404 313.846 li
387.004 312.446 387.004 310.169 388.404 308.769 cv
397.044 300.128 li
395.847 298.932 li
cp
f
396.57 294.886 mo
395.373 296.083 li
395.847 296.558 li
396.502 297.212 396.502 298.277 395.847 298.932 cv
397.044 300.128 li
398.358 298.814 398.358 296.675 397.044 295.361 cv
396.57 294.886 li
cp
f
396.57 294.886 mo
395.795 294.111 394.538 294.111 393.763 294.886 cv
392.988 295.661 392.988 296.918 393.763 297.693 cv
394.538 298.467 395.795 298.467 396.57 297.693 cv
397.345 296.918 397.345 295.661 396.57 294.886 cv
cp
f
397.584 311.649 mo
397.584 311.649 395.972 311.448 395.353 309.709 cv
394.734 307.97 396.639 303.118 398.142 303.471 cv
399.415 303.77 399.757 305.24 399.414 305.584 cv
398.407 306.591 396.614 308.696 397.584 311.649 cv
cp
f
399.929 314.01 mo
399.929 314.01 398.084 313.557 397.494 311.819 cv
396.904 310.081 399.21 306.017 400.308 305.958 cv
401.339 305.902 402.355 307.506 401.979 307.882 cv
401.049 308.813 399.362 310.423 399.929 314.01 cv
cp
f
402.262 316.265 mo
402.262 316.265 400.417 315.811 399.827 314.073 cv
399.237 312.335 401.543 308.272 402.641 308.212 cv
403.672 308.156 404.689 309.761 404.313 310.137 cv
403.382 311.067 401.695 312.677 402.262 316.265 cv
cp
f
395.571 309.343 mo
395.571 309.343 393.266 308.678 392.524 306.941 cv
391.783 305.204 394.272 301.208 395.356 301.187 cv
396.912 301.156 397.529 302.63 397.152 303.007 cv
395.564 304.595 394.48 307.21 395.571 309.343 cv
cp
f
403.675 309.583 mo
411.436 318.003 409.106 322.007 407.196 323.105 cv
406.727 323.374 406.048 323.042 405.867 322.457 cv
405.036 319.771 402.34 316.607 401.046 315.195 cv
400.898 312.596 403.155 309.909 403.675 309.583 cv
cp
f
391.439 302.277 mo
389.692 304.024 li
342.532 272.42 345.514 246.283 345.514 246.283 cv
351.947 273.757 372.301 289.453 391.439 302.277 cv
cp
f
345.514 246.283 mo
356.484 273.009 380.771 290.806 393.98 299.735 cv
391.939 301.776 li
374.705 289.532 355.387 277.696 345.514 246.283 cv
cp
f
380.874 289.316 mo
381.442 289.771 382.003 290.214 382.554 290.644 cv
411.35 265.37 409.172 246.283 409.172 246.283 cv
404.726 265.276 393.626 278.639 380.874 289.316 cv
cp
f
363.248 302.277 mo
364.994 304.024 li
369.334 301.116 373.248 298.254 376.78 295.455 cv
376.174 294.969 375.575 294.481 374.985 293.993 cv
371.107 296.924 367.152 299.661 363.248 302.277 cv
cp
f
360.706 299.735 mo
362.747 301.776 li
366.563 299.066 370.48 296.375 374.375 293.487 cv
373.6 292.84 372.84 292.192 372.093 291.542 cv
367.87 294.809 363.953 297.54 360.706 299.735 cv
cp
f
409.172 246.283 mo
402.099 263.516 389.489 277.036 377.881 286.861 cv
378.706 287.554 379.52 288.225 380.319 288.87 cv
391.854 279.416 402.604 267.183 409.172 246.283 cv
cp
f
276.173 153.122 mo
274.48 153.122 li
274.48 144.734 li
274.48 141.821 276.85 139.452 279.762 139.452 cv
284.921 139.452 li
284.921 141.144 li
279.762 141.144 li
277.783 141.144 276.173 142.755 276.173 144.734 cv
276.173 153.122 li
cp
f
291.982 160.54 mo
279.762 160.54 li
276.85 160.54 274.48 158.171 274.48 155.258 cv
274.48 153.122 li
276.173 153.122 li
276.173 155.258 li
276.173 157.237 277.783 158.848 279.762 158.848 cv
291.982 158.848 li
291.982 160.54 li
cp
f
295.353 162.89 mo
293.661 162.89 li
293.661 162.219 li
293.661 161.293 292.908 160.54 291.982 160.54 cv
291.982 158.848 li
293.841 158.848 295.353 160.36 295.353 162.219 cv
295.353 162.89 li
cp
f
295.353 162.89 mo
295.353 163.986 294.465 164.874 293.369 164.874 cv
292.273 164.874 291.385 163.986 291.385 162.89 cv
291.385 161.794 292.273 160.906 293.369 160.906 cv
294.465 160.906 295.353 161.794 295.353 162.89 cv
cp
f
284.217 150.319 mo
284.217 150.319 283.22 151.602 284.012 153.269 cv
284.804 154.937 289.582 157.02 290.395 155.708 cv
291.083 154.596 290.286 153.315 289.8 153.315 cv
288.376 153.315 285.62 153.094 284.217 150.319 cv
cp
f
284.206 146.992 mo
284.206 146.992 283.222 148.617 284.034 150.263 cv
284.845 151.91 289.349 153.152 290.167 152.418 cv
290.936 151.728 290.521 149.875 289.989 149.875 cv
288.673 149.875 286.341 149.93 284.206 146.992 cv
cp
f
284.261 143.748 mo
284.261 143.748 283.278 145.373 284.089 147.02 cv
284.901 148.666 289.405 149.908 290.223 149.174 cv
290.992 148.485 290.576 146.631 290.044 146.631 cv
288.729 146.631 286.397 146.686 284.261 143.748 cv
cp
f
284.425 153.374 mo
284.425 153.374 283.264 155.474 283.969 157.226 cv
284.673 158.979 289.258 160.044 290.04 159.293 cv
291.162 158.214 290.555 156.736 290.022 156.736 cv
287.777 156.736 285.161 155.654 284.425 153.374 cv
cp
f
289.986 147.474 mo
289.519 136.032 285.04 134.848 282.913 135.423 cv
282.392 135.564 282.146 136.278 282.432 136.821 cv
283.744 139.307 284.074 143.451 284.158 145.365 cv
285.891 147.307 289.387 147.611 289.986 147.474 cv
cp
f
293.619 233.359 mo
282.478 206.704 287.068 176.947 290.093 161.292 cv
287.207 161.292 li
283.678 182.137 278.388 204.166 293.619 233.359 cv
cp
f
286.499 161.292 mo
284.029 161.292 li
273.029 216.987 293.619 233.359 293.619 233.359 cv
278.74 209.384 282.035 183.893 286.499 161.292 cv
cp
f
31.7048 400.437 mo
32.99 401.722 li
34.2753 403.008 li
53.9758 383.307 li
51.368 380.774 li
31.7048 400.437 li
cp
f
57.8439 379.439 mo
57.8439 379.439 li
55.3107 376.831 li
55.3107 376.831 li
57.8439 379.439 li
cp
f
56.4077 380.875 mo
56.4077 380.875 li
53.8426 378.299 li
53.8426 378.299 li
56.4077 380.875 li
cp
f
73.9786 361.761 mo
74.2405 362.023 74.5092 362.251 74.7832 362.447 cv
76.1766 361.053 li
74.8913 359.768 li
73.6061 358.483 li
72.2171 359.872 li
72.4181 360.156 72.6522 360.435 72.9237 360.707 cv
73.2888 361.072 73.6404 361.423 73.9786 361.761 cv
cp
f
71.0316 366.251 mo
70.8353 365.977 70.6079 365.708 70.3459 365.446 cv
69.9807 365.081 69.6291 364.73 69.291 364.391 cv
69.0196 364.12 68.741 363.886 68.4567 363.685 cv
55.8094 376.332 li
58.3426 378.94 li
71.0316 366.251 li
cp
f
76.5636 360.719 mo
77.1238 361.279 li
81.7375 352.974 li
73.4328 357.588 li
73.9931 358.148 li
75.2783 359.433 li
76.5636 360.719 li
cp
f
31.7048 400.437 mo
31.1446 399.877 li
26.5308 408.182 li
34.8355 403.568 li
34.2753 403.008 li
32.99 401.722 li
31.7048 400.437 li
cp
f
63.4437 355.159 mo
58.582 360.02 57.2211 364.826 57.2211 364.826 cv
57.2211 364.826 57.3349 359.56 62.5898 354.305 cv
67.8447 349.05 73.1108 348.936 73.1108 348.936 cv
73.1108 348.936 68.3055 350.297 63.4437 355.159 cv
cp
79.5537 371.269 mo
84.4155 366.407 85.7764 361.602 85.7764 361.602 cv
85.7764 361.602 85.6626 366.868 80.4077 372.122 cv
75.1528 377.377 69.8866 377.491 69.8866 377.491 cv
69.8866 377.491 74.6919 376.13 79.5537 371.269 cv
cp
70.3459 365.446 mo
70.6079 365.708 70.8353 365.977 71.0316 366.251 cv
74.8584 371.596 66.6999 378.989 66.6999 378.989 cv
66.6999 378.989 73.6012 380.681 81.2839 372.999 cv
88.9666 365.316 87.2738 358.415 87.2738 358.415 cv
87.2738 358.415 79.8807 366.573 74.5364 362.746 cv
74.2624 362.55 73.9937 362.323 73.7318 362.061 cv
73.3936 361.723 73.042 361.371 72.6769 361.006 cv
72.4054 360.735 72.1713 360.456 71.9703 360.172 cv
68.1946 354.83 76.3229 347.464 76.3229 347.464 cv
76.3229 347.464 69.4215 345.771 61.7389 353.454 cv
54.0562 361.136 55.749 368.038 55.749 368.038 cv
55.749 368.038 63.1148 359.909 68.4567 363.685 cv
68.741 363.886 69.0196 364.12 69.291 364.391 cv
69.6291 364.73 69.9807 365.081 70.3459 365.446 cv
cp
f
24.5119 352.22 mo
32.1548 360.871 li
35.9531 357.072 li
32.2459 353.797 li
27.303 349.429 li
27.303 349.429 li
27.303 349.429 li
29.4226 347.31 li
28.452 346.339 27.1795 345.854 25.9074 345.854 cv
25.8749 345.854 25.8423 345.855 25.8098 345.856 cv
24.5703 345.88 23.3381 346.364 22.3923 347.31 cv
22.2709 347.431 22.1572 347.557 22.051 347.687 cv
21.8918 347.883 21.7496 348.087 21.6244 348.299 cv
21.541 348.44 21.4652 348.585 21.3969 348.732 cv
21.2604 349.026 21.1543 349.331 21.0784 349.641 cv
21.0433 349.785 21.0153 349.931 20.9932 350.077 cv
20.9673 350.248 20.9498 350.42 20.9418 350.592 cv
20.9345 350.749 20.9344 350.906 20.9419 351.063 cv
20.9457 351.143 20.9514 351.222 20.959 351.301 cv
20.9742 351.46 20.9969 351.618 21.0272 351.774 cv
21.0576 351.931 21.0955 352.086 21.141 352.24 cv
21.3685 353.009 21.7856 353.733 22.3923 354.34 cv
24.5119 352.22 li
cp
f
79.1107 404.474 mo
35.2717 360.82 li
35.2717 360.82 li
35.2717 360.82 li
35.3666 360.722 35.4626 360.624 35.5608 360.525 cv
35.6591 360.427 35.7575 360.331 35.8559 360.236 cv
53.8426 378.299 li
56.4077 380.875 li
79.5096 404.075 li
79.8583 404.554 li
80.5807 405.545 li
80.5807 405.545 li
80.5807 405.545 li
79.7325 404.927 li
79.1107 404.474 li
cp
80.2402 402.496 mo
61.9954 383.713 li
57.8439 379.439 li
55.3107 376.831 li
37.669 358.669 li
37.669 358.669 li
37.669 358.669 li
38.6426 357.915 39.5842 357.315 40.4271 356.843 cv
40.4715 356.818 40.5156 356.794 40.5594 356.769 cv
40.647 356.721 40.7335 356.674 40.8188 356.629 cv
40.8614 356.606 40.9037 356.584 40.9457 356.562 cv
41.0298 356.518 41.1126 356.475 41.194 356.434 cv
41.3162 356.371 41.4354 356.313 41.5514 356.256 cv
41.6287 356.219 41.7045 356.183 41.7788 356.148 cv
41.9275 356.078 42.0701 356.014 42.2059 355.954 cv
42.4437 355.849 42.6608 355.759 42.8541 355.683 cv
42.9369 355.651 43.0153 355.621 43.0891 355.593 cv
43.1629 355.565 43.232 355.54 43.2962 355.517 cv
43.66 355.386 43.8658 355.33 43.8658 355.33 cv
42.9718 351.064 li
40.9873 353.048 li
39.995 354.04 li
34.5355 359.5 li
29.076 364.96 li
28.0837 365.952 li
26.0991 367.936 li
27.7851 368.29 li
30.3651 368.83 li
30.3651 368.83 30.4835 368.399 30.7732 367.682 cv
30.7828 367.659 30.7926 367.635 30.8025 367.61 cv
30.9567 367.234 31.156 366.784 31.408 366.28 cv
31.9285 365.238 32.6731 363.966 33.7047 362.634 cv
66.8883 394.867 li
77.5311 405.205 li
77.9773 405.363 li
81.7375 406.702 li
80.9888 404.599 li
80.2402 402.496 li
cp
f
161.351 32.7586 mo
157.113 32.7586 li
154.994 29.0881 li
157.113 25.4176 li
161.351 25.4176 li
163.47 29.0881 li
161.351 32.7586 li
cp
162.165 24.0088 mo
156.3 24.0088 li
153.367 29.0881 li
156.3 34.1674 li
162.165 34.1674 li
165.097 29.0881 li
162.165 24.0088 li
cp
f
157.235 32.547 mo
161.229 32.547 li
163.226 29.0881 li
161.229 25.6292 li
157.235 25.6292 li
155.238 29.0881 li
157.235 32.547 li
cp
161.473 32.9701 mo
156.991 32.9701 li
154.75 29.0881 li
156.991 25.2061 li
161.473 25.2061 li
163.715 29.0881 li
161.473 32.9701 li
cp
156.422 33.9558 mo
162.043 33.9558 li
164.853 29.0881 li
162.043 24.2204 li
156.422 24.2204 li
153.611 29.0881 li
156.422 33.9558 li
cp
162.287 34.3789 mo
156.178 34.3789 li
153.123 29.0881 li
156.178 23.7973 li
162.287 23.7973 li
165.341 29.0881 li
162.287 34.3789 li
cp
f
154.813 30.8265 mo
162.947 26.1297 li
163.652 27.3497 li
155.517 32.0465 li
154.813 30.8265 li
cp
f
155.102 30.9039 mo
155.594 31.7576 li
163.363 27.2723 li
162.87 26.4186 li
155.102 30.9039 li
cp
155.439 32.3355 mo
154.523 30.7491 li
163.025 25.8407 li
163.941 27.4271 li
155.439 32.3355 li
cp
f
163.652 30.8265 mo
155.517 26.1297 li
154.813 27.3497 li
162.947 32.0465 li
163.652 30.8265 li
cp
f
155.102 27.2723 mo
162.87 31.7576 li
163.363 30.9039 li
155.594 26.4186 li
155.102 27.2723 li
cp
163.025 32.3355 mo
154.523 27.4271 li
155.439 25.8407 li
163.941 30.7491 li
163.025 32.3355 li
cp
f
159.912 33.7419 mo
159.912 24.3483 li
158.503 24.3483 li
158.503 33.7419 li
159.912 33.7419 li
cp
f
158.714 33.5303 mo
159.7 33.5303 li
159.7 24.5598 li
158.714 24.5598 li
158.714 33.5303 li
cp
160.123 33.9534 mo
158.291 33.9534 li
158.291 24.1367 li
160.123 24.1367 li
160.123 33.9534 li
cp
f
161.063 50.1424 mo
157.451 50.1424 li
157.451 34.1674 li
161.063 34.1674 li
161.063 50.1424 li
cp
f
170.328 50.1424 mo
148.186 50.1424 li
148.186 48.2737 li
170.328 48.2737 li
170.328 50.1424 li
cp
f
160.292 51.1648 mo
160.292 94.4263 li
159.232 99.9618 li
158.172 94.4263 li
158.172 51.1648 li
154.082 51.1648 li
154.082 107.013 li
159.232 116.535 li
164.382 107.013 li
164.382 51.1648 li
160.292 51.1648 li
cp
f
458.53 310.888 mo
461.527 313.885 li
460.43 317.979 li
456.336 319.076 li
453.339 316.079 li
454.436 311.985 li
458.53 310.888 li
cp
451.768 316.5 mo
455.915 320.648 li
461.58 319.13 li
463.098 313.464 li
458.951 309.317 li
453.286 310.835 li
451.768 316.5 li
cp
f
453.575 316.016 mo
456.399 318.84 li
460.257 317.807 li
461.291 313.949 li
458.466 311.124 li
454.609 312.158 li
453.575 316.016 li
cp
456.273 319.312 mo
453.103 316.142 li
454.263 311.813 li
458.593 310.653 li
461.763 313.822 li
460.602 318.152 li
456.273 319.312 li
cp
452.003 316.437 mo
455.978 320.412 li
461.407 318.957 li
462.862 313.528 li
458.888 309.553 li
453.458 311.008 li
452.003 316.437 li
cp
455.852 320.883 mo
451.532 316.563 li
453.113 310.662 li
459.014 309.081 li
463.334 313.401 li
461.753 319.302 li
455.852 320.883 li
cp
f
461.787 316.878 mo
452.714 314.447 li
453.078 313.086 li
462.152 315.518 li
461.787 316.878 li
cp
f
452.973 314.298 mo
461.638 316.619 li
461.893 315.667 li
453.228 313.345 li
452.973 314.298 li
cp
461.937 317.137 mo
452.455 314.597 li
452.929 312.827 li
462.411 315.368 li
461.937 317.137 li
cp
f
455.537 310.628 mo
457.968 319.701 li
459.329 319.337 li
456.898 310.263 li
455.537 310.628 li
cp
f
455.796 310.777 mo
458.118 319.442 li
459.07 319.187 li
456.748 310.522 li
455.796 310.777 li
cp
457.818 319.96 mo
455.278 310.478 li
457.047 310.004 li
459.588 319.486 li
457.818 319.96 li
cp
f
460.243 311.211 mo
453.601 317.853 li
454.597 318.85 li
461.239 312.207 li
460.243 311.211 li
cp
f
453.9 317.853 mo
454.597 318.55 li
460.94 312.207 li
460.243 311.51 li
453.9 317.853 li
cp
454.597 319.149 mo
453.301 317.853 li
460.243 310.912 li
461.538 312.207 li
454.597 319.149 li
cp
f
469.044 300.782 mo
471.598 303.336 li
462.284 312.65 li
459.73 310.096 li
469.044 300.782 li
cp
f
463.188 293.605 mo
478.845 309.262 li
477.524 310.583 li
461.867 294.927 li
463.188 293.605 li
cp
f
516.159 311.985 mo
517.256 316.079 li
514.26 319.076 li
510.166 317.979 li
509.069 313.885 li
512.066 310.888 li
516.159 311.985 li
cp
517.31 310.835 mo
511.645 309.317 li
507.497 313.464 li
509.015 319.13 li
514.681 320.648 li
518.828 316.5 li
517.31 310.835 li
cp
f
510.338 317.807 mo
514.196 318.84 li
517.021 316.016 li
515.987 312.158 li
512.129 311.124 li
509.305 313.949 li
510.338 317.807 li
cp
514.323 319.312 mo
509.993 318.152 li
508.833 313.822 li
512.003 310.653 li
516.332 311.813 li
517.492 316.142 li
514.323 319.312 li
cp
509.188 318.957 mo
514.617 320.412 li
518.592 316.437 li
517.137 311.008 li
511.708 309.553 li
507.733 313.528 li
509.188 318.957 li
cp
514.744 320.883 mo
508.843 319.302 li
507.261 313.401 li
511.581 309.081 li
517.482 310.662 li
519.064 316.563 li
514.744 320.883 li
cp
f
508.808 316.878 mo
517.882 314.447 li
517.517 313.086 li
508.444 315.518 li
508.808 316.878 li
cp
f
508.703 315.667 mo
508.958 316.619 li
517.623 314.298 li
517.367 313.345 li
508.703 315.667 li
cp
508.659 317.137 mo
508.184 315.368 li
517.667 312.827 li
518.141 314.597 li
508.659 317.137 li
cp
f
515.059 310.628 mo
512.627 319.701 li
511.267 319.337 li
513.698 310.263 li
515.059 310.628 li
cp
f
511.526 319.187 mo
512.478 319.442 li
514.799 310.777 li
513.847 310.522 li
511.526 319.187 li
cp
512.777 319.96 mo
511.007 319.486 li
513.548 310.004 li
515.318 310.478 li
512.777 319.96 li
cp
f
510.352 311.211 mo
516.995 317.853 li
515.998 318.85 li
509.356 312.207 li
510.352 311.211 li
cp
f
509.655 312.207 mo
515.998 318.55 li
516.696 317.853 li
510.352 311.51 li
509.655 312.207 li
cp
515.998 319.149 mo
509.057 312.207 li
510.352 310.912 li
517.294 317.853 li
515.998 319.149 li
cp
f
501.552 300.782 mo
498.998 303.336 li
508.311 312.65 li
510.866 310.096 li
501.552 300.782 li
cp
f
507.407 293.605 mo
491.75 309.262 li
493.072 310.583 li
508.729 294.927 li
507.407 293.605 li
cp
f
482.825 290.075 mo
482.825 290.075 li
485.298 292.548 li
485.298 292.548 li
482.825 290.075 li
cp
f
485.817 287.082 mo
485.817 287.082 li
488.29 289.555 li
488.29 289.555 li
485.817 287.082 li
cp
f
488.255 284.645 mo
490.728 287.117 li
490.728 287.117 li
488.255 284.645 li
488.255 284.645 li
cp
f
479.867 287.117 mo
479.867 287.117 li
482.305 289.555 li
482.305 289.555 li
479.867 287.117 li
cp
f
483.433 284.697 mo
485.298 286.563 li
485.298 286.563 li
483.433 284.697 li
cp
f
471.769 301.131 mo
474.242 303.604 li
484.799 293.046 li
482.326 290.573 li
471.769 301.131 li
cp
f
487.735 284.125 mo
487.735 284.125 li
485.298 281.687 li
485.298 281.687 li
487.735 284.125 li
cp
f
518.987 253.428 mo
509.539 257.446 li
485.796 281.188 li
488.234 283.626 li
503.076 268.784 li
507.25 265.13 li
503.596 269.304 li
488.754 284.146 li
491.227 286.619 li
514.969 262.876 li
518.987 253.428 li
cp
f
468.812 298.173 mo
471.249 300.611 li
481.806 290.054 li
479.369 287.616 li
468.812 298.173 li
cp
f
485.817 287.082 mo
488.29 289.555 li
499.346 300.611 li
501.784 298.173 li
490.728 287.117 li
488.255 284.645 li
487.735 284.125 li
485.298 281.687 li
461.056 257.446 li
456.332 255.437 li
451.608 253.428 li
455.626 262.876 li
479.867 287.117 li
482.305 289.555 li
482.825 290.075 li
485.298 292.548 li
486.172 293.422 li
496.353 303.604 li
498.826 301.131 li
466.999 269.304 li
463.345 265.13 li
463.345 265.13 li
463.345 265.13 li
466.229 267.655 li
467.519 268.784 li
483.433 284.697 li
485.298 286.563 li
485.817 287.082 li
cp
f
127.554 37.7619 mo
130.753 37.7619 133.346 35.1684 133.346 31.9692 cv
121.761 31.9692 li
121.761 35.1684 124.355 37.7619 127.554 37.7619 cv
cp
f
127.744 116.535 mo
125.912 116.535 126.496 35.8945 126.496 35.8945 cv
128.612 35.8945 li
128.612 35.8945 129.085 116.535 127.744 116.535 cv
cp
f
128.612 31.6049 mo
126.496 31.6049 li
126.496 16.9357 li
128.612 16.9357 li
128.612 31.6049 li
cp
f
191.307 90.5991 mo
191.003 95.069 li
190.699 90.5991 li
190.699 56.4972 li
188.987 54.7849 li
191.003 52.7687 li
193.019 54.7849 li
191.307 56.4972 li
191.307 90.5991 li
cp
194.174 48.2398 mo
191.003 48.2398 li
187.831 48.2398 li
188.016 49.5788 188.117 51.0156 188.117 52.511 cv
188.117 57.2258 187.119 61.3589 185.623 63.6712 cv
185.623 106.587 li
191.003 116.535 li
196.383 106.587 li
196.383 63.6712 li
194.886 61.3589 193.889 57.2258 193.889 52.511 cv
193.889 51.0156 193.99 49.5788 194.174 48.2398 cv
cp
f
193.902 46.5707 mo
190.95 46.5707 li
190.95 47.4548 li
194.294 47.4548 li
198.987 47.4548 li
198.987 45.6867 li
194.656 45.6867 li
193.902 45.6867 li
193.902 46.5707 li
cp
f
201.143 48.7562 mo
202.188 48.801 203.041 49.5855 203.192 50.5997 cv
203.192 49.8921 li
203.192 47.5732 201.306 45.6867 198.987 45.6867 cv
198.987 47.4548 li
199.921 47.4548 200.733 47.983 201.143 48.7562 cv
cp
f
190.95 46.5707 mo
188.215 46.5707 li
188.215 45.6867 li
187.35 45.6867 li
182.914 45.6867 li
182.914 47.4548 li
187.712 47.4548 li
190.95 47.4548 li
190.95 46.5707 li
cp
f
178.708 49.8921 mo
178.708 50.7747 li
178.71 50.7747 li
178.783 49.6838 179.662 48.8139 180.758 48.7568 cv
181.167 47.9833 181.979 47.4548 182.914 47.4548 cv
182.914 45.6867 li
180.595 45.6867 178.708 47.5732 178.708 49.8921 cv
cp
f
201.143 48.7562 mo
201.111 48.7548 201.08 48.7538 201.048 48.7538 cv
199.851 48.7538 198.88 49.7246 198.88 50.9221 cv
198.88 52.1197 199.851 53.0905 201.048 53.0905 cv
202.246 53.0905 203.216 52.1197 203.216 50.9221 cv
203.216 50.8125 203.208 50.7049 203.192 50.5997 cv
203.041 49.5855 202.188 48.801 201.143 48.7562 cv
cp
f
178.71 50.7747 mo
178.706 50.8235 178.704 50.8725 178.704 50.9221 cv
178.704 52.1197 179.675 53.0905 180.872 53.0905 cv
182.07 53.0905 183.041 52.1197 183.041 50.9221 cv
183.041 49.7246 182.07 48.7538 180.872 48.7538 cv
180.834 48.7538 180.796 48.7548 180.758 48.7568 cv
179.662 48.8139 178.783 49.6838 178.71 50.7747 cv
cp
f
193.902 38.9649 mo
188.215 38.9649 li
188.215 41.2057 li
193.902 41.2057 li
193.902 38.9649 li
cp
f
193.902 30.1652 mo
193.011 30.602 192.009 30.8475 190.95 30.8475 cv
189.976 30.8475 189.051 30.6398 188.215 30.2666 cv
188.215 32.9546 li
193.902 32.9546 li
193.902 30.1652 li
cp
f
193.902 34.8393 mo
188.215 34.8393 li
188.215 37.0802 li
193.902 37.0802 li
193.902 34.8393 li
cp
f
188.215 46.5707 mo
190.95 46.5707 li
193.902 46.5707 li
193.902 45.6867 li
193.902 43.0905 li
188.215 43.0905 li
188.215 45.6867 li
188.215 46.5707 li
cp
f
193.902 30.1652 mo
196.13 29.0727 197.665 26.7822 197.665 24.133 cv
184.236 24.133 li
184.236 26.8671 185.87 29.2193 188.215 30.2666 cv
189.051 30.6398 189.976 30.8475 190.95 30.8475 cv
192.009 30.8475 193.011 30.602 193.902 30.1652 cv
cp
f
166.451 163.817 mo
164.97 164.626 163.592 166.037 163.161 168.493 cv
163.185 177.237 164.818 194.379 175.517 210.882 cv
165.142 197.137 162.942 179.891 162.604 170.169 cv
162.598 170.169 li
162.598 166.965 161.21 165.147 159.64 164.116 cv
159.273 172.595 159.289 214.941 195.074 229.061 cv
195.074 229.061 164.948 207.387 166.451 163.817 cv
cp
f
156.917 162.539 mo
156.882 162.546 li
156.917 162.554 li
158.877 162.982 161.978 164.261 162.81 168.084 cv
163.154 166.506 163.916 165.22 165.087 164.244 cv
166.272 163.257 167.655 162.778 168.736 162.546 cv
167.655 162.314 166.272 161.836 165.087 160.849 cv
163.916 159.873 163.154 158.586 162.81 157.009 cv
161.978 160.831 158.877 162.111 156.917 162.539 cv
cp
f
159.564 143.789 mo
159.257 144.039 158.866 144.188 158.439 144.188 cv
157.452 144.188 156.652 143.389 156.652 142.402 cv
156.652 141.415 157.452 140.616 158.439 140.616 cv
158.533 140.616 158.626 140.623 158.717 140.637 cv
159.571 140.771 160.225 141.51 160.225 142.402 cv
160.225 142.962 159.967 143.462 159.564 143.789 cv
cp
161.747 139.605 mo
161.747 139.605 li
159.242 139.605 158.439 139.605 158.439 139.605 cv
156.855 139.605 155.571 140.889 155.571 142.473 cv
155.571 144.041 156.831 145.315 158.394 145.339 cv
158.481 145.604 158.608 145.798 158.719 145.968 cv
158.883 146.218 158.991 146.383 158.991 146.774 cv
158.991 147.165 158.883 147.33 158.719 147.58 cv
158.526 147.875 158.286 148.242 158.286 148.927 cv
158.286 149.613 158.526 149.979 158.719 150.274 cv
158.883 150.524 158.991 150.689 158.991 151.08 cv
158.991 151.471 158.883 151.636 158.719 151.886 cv
158.526 152.181 158.286 152.547 158.286 153.233 cv
158.286 153.918 158.526 154.285 158.719 154.58 cv
158.883 154.83 158.991 154.995 158.991 155.386 cv
158.991 155.777 158.883 155.942 158.719 156.192 cv
158.526 156.486 158.286 156.853 158.286 157.538 cv
158.286 158.224 158.526 158.591 158.719 158.885 cv
158.883 159.135 158.991 159.3 158.991 159.691 cv
158.991 160.082 158.883 160.247 158.719 160.497 cv
158.543 160.766 158.327 161.097 158.292 161.677 cv
160.191 160.913 162.325 159.25 162.574 155.639 cv
162.274 155.54 162.057 155.258 162.057 154.924 cv
162.057 154.508 162.394 154.171 162.81 154.171 cv
163.226 154.171 163.563 154.508 163.563 154.924 cv
163.563 155.258 163.346 155.54 163.045 155.639 cv
163.157 157.296 163.659 158.544 164.359 159.485 cv
164.913 160.23 165.591 160.782 166.3 161.191 cv
166.3 144.642 li
166.3 144.4 li
166.3 144.159 li
166.3 141.654 164.251 139.605 161.747 139.605 cv
cp
f
158.057 162.539 mo
158.057 163.168 157.546 163.678 156.917 163.678 cv
156.287 163.678 155.777 163.168 155.777 162.539 cv
155.777 161.909 156.287 161.399 156.917 161.399 cv
157.546 161.399 158.057 161.909 158.057 162.539 cv
cp
f
409.726 383.811 mo
409.745 383.841 li
409.715 383.822 li
408.027 382.739 404.929 381.451 401.638 383.565 cv
402.51 382.207 402.881 380.759 402.743 379.24 cv
402.603 377.704 401.964 376.388 401.363 375.459 cv
402.292 376.06 403.608 376.699 405.144 376.839 cv
406.662 376.978 408.111 376.606 409.469 375.734 cv
407.355 379.026 408.643 382.123 409.726 383.811 cv
cp
f
421.625 367.233 mo
422.256 366.603 423.241 366.542 423.94 367.052 cv
424.014 367.106 424.085 367.167 424.152 367.233 cv
424.849 367.931 424.849 369.062 424.152 369.76 cv
423.454 370.457 422.323 370.457 421.625 369.76 cv
421.324 369.458 421.153 369.075 421.112 368.681 cv
421.058 368.165 421.229 367.629 421.625 367.233 cv
cp
416.088 364.18 mo
415.917 364.35 li
415.746 364.521 li
404.044 376.223 li
404.835 376.435 405.705 376.524 406.622 376.39 cv
407.783 376.22 409.021 375.692 410.271 374.6 cv
410.129 374.317 410.175 373.964 410.411 373.728 cv
410.705 373.434 411.182 373.434 411.476 373.728 cv
411.77 374.022 411.77 374.499 411.476 374.793 cv
411.24 375.029 410.887 375.075 410.605 374.933 cv
408.227 377.662 408.561 380.347 409.363 382.23 cv
409.748 381.795 409.83 381.409 409.895 381.093 cv
409.956 380.801 409.996 380.607 410.273 380.331 cv
410.549 380.055 410.742 380.014 411.035 379.953 cv
411.38 379.882 411.809 379.792 412.294 379.308 cv
412.778 378.823 412.868 378.394 412.939 378.049 cv
413 377.756 413.041 377.563 413.317 377.287 cv
413.594 377.01 413.787 376.97 414.079 376.909 cv
414.424 376.837 414.853 376.748 415.338 376.263 cv
415.823 375.778 415.912 375.349 415.984 375.004 cv
416.045 374.712 416.085 374.519 416.362 374.242 cv
416.638 373.966 416.831 373.925 417.124 373.865 cv
417.469 373.793 417.898 373.703 418.383 373.218 cv
418.867 372.734 418.957 372.304 419.029 371.96 cv
419.09 371.667 419.13 371.474 419.406 371.197 cv
419.683 370.921 419.876 370.881 420.169 370.82 cv
420.367 370.778 420.594 370.73 420.843 370.605 cv
421.966 371.693 423.757 371.683 424.866 370.574 cv
425.986 369.454 425.986 367.639 424.866 366.519 cv
424.866 366.519 424.298 365.951 422.527 364.18 cv
422.527 364.18 li
420.757 362.409 417.859 362.409 416.088 364.18 cv
cp
f
408.92 383.006 mo
408.475 383.451 408.475 384.172 408.92 384.617 cv
409.365 385.063 410.087 385.063 410.532 384.617 cv
410.977 384.172 410.977 383.451 410.532 383.006 cv
410.087 382.56 409.365 382.56 408.92 383.006 cv
cp
f
402.198 376.283 mo
401.753 376.728 401.031 376.728 400.586 376.283 cv
400.141 375.838 400.141 375.116 400.586 374.671 cv
401.031 374.226 401.753 374.226 402.198 374.671 cv
402.643 375.116 402.643 375.838 402.198 376.283 cv
cp
f
362.39 404.843 mo
367.38 403.779 371.968 402.251 376.136 400.467 cv
374.992 399.822 373.851 399.142 372.717 398.428 cv
352.577 406.621 335.707 403.869 335.707 403.869 cv
352.364 411.1 367.833 408.248 380.127 402.564 cv
378.997 402.012 377.868 401.426 376.744 400.806 cv
372.316 402.673 367.501 404.129 362.39 404.843 cv
cp
f
406.685 383.001 mo
404.846 382.62 402.579 382.924 400.313 385.189 cv
400.31 385.185 li
396.881 388.384 391.91 392.512 385.771 396.197 cv
386.882 396.717 387.987 397.202 389.082 397.654 cv
398.08 391.937 404.365 385.532 406.685 383.001 cv
cp
f
401.101 383.606 mo
402.533 381.565 402.556 379.593 402.08 377.974 cv
395.453 385.074 388.485 390.295 381.656 394.123 cv
382.823 394.755 383.986 395.346 385.141 395.899 cv
392.39 391.622 397.768 386.921 401.101 383.606 cv
cp
f
359.814 377.974 mo
359.338 379.593 359.361 381.565 360.793 383.606 cv
366.993 389.773 380.269 400.739 399.504 404.843 cv
382.449 402.46 368.698 391.821 361.585 385.185 cv
361.581 385.189 li
359.315 382.924 357.048 382.62 355.209 383.001 cv
360.944 389.256 390.9 419.188 426.187 403.869 cv
426.187 403.869 389.56 409.845 359.814 377.974 cv
cp
f
352.168 383.811 mo
352.149 383.841 li
352.179 383.822 li
353.867 382.739 356.965 381.451 360.256 383.565 cv
359.384 382.207 359.013 380.759 359.151 379.24 cv
359.291 377.704 359.931 376.388 360.531 375.459 cv
359.603 376.06 358.286 376.699 356.75 376.839 cv
355.232 376.978 353.783 376.606 352.425 375.734 cv
354.539 379.026 353.251 382.123 352.168 383.811 cv
cp
f
340.782 368.681 mo
340.741 369.075 340.57 369.458 340.269 369.76 cv
339.571 370.457 338.44 370.457 337.742 369.76 cv
337.045 369.062 337.045 367.931 337.742 367.233 cv
337.809 367.167 337.88 367.106 337.954 367.052 cv
338.653 366.542 339.638 366.603 340.269 367.233 cv
340.665 367.629 340.836 368.165 340.782 368.681 cv
cp
339.367 364.18 mo
339.367 364.18 li
337.596 365.951 337.028 366.519 337.028 366.519 cv
335.908 367.639 335.908 369.454 337.028 370.574 cv
338.137 371.683 339.928 371.693 341.051 370.605 cv
341.3 370.73 341.527 370.778 341.725 370.82 cv
342.018 370.881 342.211 370.921 342.488 371.197 cv
342.764 371.474 342.804 371.667 342.865 371.96 cv
342.937 372.304 343.027 372.734 343.511 373.218 cv
343.996 373.703 344.425 373.793 344.77 373.865 cv
345.063 373.925 345.256 373.966 345.532 374.242 cv
345.809 374.519 345.849 374.712 345.91 375.004 cv
345.982 375.349 346.071 375.778 346.556 376.263 cv
347.041 376.748 347.47 376.837 347.815 376.909 cv
348.107 376.97 348.3 377.01 348.577 377.287 cv
348.853 377.563 348.894 377.756 348.955 378.049 cv
349.026 378.394 349.116 378.823 349.6 379.308 cv
350.085 379.792 350.514 379.882 350.859 379.953 cv
351.152 380.014 351.345 380.055 351.621 380.331 cv
351.898 380.607 351.938 380.801 351.999 381.093 cv
352.064 381.409 352.146 381.795 352.531 382.23 cv
353.333 380.347 353.667 377.662 351.289 374.933 cv
351.007 375.075 350.654 375.029 350.418 374.793 cv
350.124 374.499 350.124 374.022 350.418 373.728 cv
350.712 373.434 351.189 373.434 351.483 373.728 cv
351.719 373.964 351.766 374.317 351.623 374.6 cv
352.873 375.692 354.111 376.22 355.272 376.39 cv
356.19 376.524 357.059 376.435 357.85 376.223 cv
346.148 364.521 li
345.977 364.35 li
345.806 364.18 li
344.035 362.409 341.138 362.409 339.367 364.18 cv
cp
f
352.974 383.006 mo
353.419 383.451 353.419 384.172 352.974 384.617 cv
352.529 385.063 351.807 385.063 351.362 384.617 cv
350.917 384.172 350.917 383.451 351.362 383.006 cv
351.807 382.56 352.529 382.56 352.974 383.006 cv
cp
f
359.696 376.283 mo
360.141 376.728 360.863 376.728 361.308 376.283 cv
361.753 375.838 361.753 375.116 361.308 374.671 cv
360.863 374.226 360.141 374.226 359.696 374.671 cv
359.251 375.116 359.251 375.838 359.696 376.283 cv
cp
f
141.328 148.776 mo
139.284 150.514 li
141.446 152.15 li
141.447 148.662 li
141.437 148.68 141.425 148.697 141.412 148.713 cv
141.387 148.741 141.359 148.762 141.328 148.776 cv
cp
f
136.007 148.204 mo
138.326 145.584 li
135.924 142.812 li
135.922 148.276 li
135.947 148.245 135.976 148.221 136.007 148.204 cv
cp
f
140.85 142.729 mo
138.607 140.943 li
136.539 142.703 li
138.689 145.172 li
140.85 142.729 li
cp
f
136.014 153.295 mo
141.445 153.296 li
141.446 152.85 li
138.847 150.885 li
136.014 153.295 li
cp
f
138.687 145.998 mo
136.533 148.434 li
138.83 150.171 li
140.836 148.466 li
138.687 145.998 li
cp
f
136.028 148.753 mo
135.997 148.738 135.968 148.717 135.943 148.689 cv
135.935 148.679 135.929 148.669 135.922 148.659 cv
135.921 152.645 li
138.394 150.542 li
136.028 148.753 li
cp
f
141.336 142.403 mo
141.374 142.417 141.41 142.44 141.44 142.474 cv
141.443 142.478 141.445 142.482 141.448 142.485 cv
141.449 138.956 li
140.942 138.955 li
139.04 140.574 li
141.336 142.403 li
cp
f
140.086 138.955 mo
137.005 138.954 li
138.598 140.222 li
140.086 138.955 li
cp
f
138.165 140.59 mo
136.11 138.954 li
135.924 138.954 li
135.924 142.499 li
138.165 140.59 li
cp
f
141.447 148.289 mo
141.448 142.895 li
139.05 145.587 li
141.447 148.289 li
cp
f
142.923 137.085 mo
134.451 137.083 li
134.451 139.099 li
142.922 139.101 li
142.923 137.085 li
cp
f
146.029 155.739 mo
131.553 155.739 li
131.553 154.124 li
146.029 154.124 li
146.029 155.739 li
cp
f
140.351 157.128 mo
141.331 157.128 li
141.331 223.06 li
135.961 229.141 li
135.961 226.755 li
140.351 221.784 li
140.351 157.128 li
cp
135.308 156.475 mo
135.308 226.139 li
135.308 226.508 li
135.308 227.097 li
135.308 230.319 li
135.308 230.867 li
135.308 231.583 li
135.906 230.905 li
141.984 224.023 li
141.984 223.307 li
141.984 222.759 li
141.984 156.475 li
135.308 156.475 li
cp
f
469.801 395.421 mo
472.401 395.631 li
472.039 393.022 li
469.642 395.418 li
469.661 395.412 469.681 395.408 469.701 395.407 cv
469.737 395.405 469.771 395.41 469.801 395.421 cv
cp
f
473.065 399.47 mo
469.671 399.678 li
469.417 403.233 li
473.173 399.479 li
473.135 399.484 473.098 399.48 473.065 399.47 cv
cp
f
465.974 399.904 mo
466.288 402.673 li
468.919 402.884 li
469.138 399.71 li
465.974 399.904 li
cp
f
476.558 395.967 mo
472.827 392.234 li
472.521 392.54 li
472.956 395.676 li
476.558 395.967 li
cp
f
469.708 399.145 mo
472.862 398.952 li
472.477 396.179 li
469.927 395.972 li
469.708 399.145 li
cp
f
473.428 399.079 mo
473.439 399.11 473.444 399.145 473.442 399.181 cv
473.441 399.193 473.438 399.204 473.436 399.216 cv
476.175 396.478 li
473.032 396.223 li
473.428 399.079 li
cp
f
465.417 399.794 mo
465.4 399.759 465.392 399.719 465.395 399.674 cv
465.395 399.67 465.396 399.666 465.396 399.661 cv
462.97 402.086 li
463.318 402.435 li
465.738 402.629 li
465.417 399.794 li
cp
f
463.906 403.023 mo
466.023 405.141 li
465.8 403.175 li
463.906 403.023 li
cp
f
466.35 403.219 mo
466.637 405.756 li
466.765 405.884 li
469.202 403.448 li
466.35 403.219 li
cp
f
469.385 395.674 mo
465.678 399.38 li
469.175 399.177 li
469.385 395.674 li
cp
f
460.672 402.358 mo
466.492 408.182 li
467.878 406.797 li
462.058 400.974 li
460.672 402.358 li
cp
f
471.356 387.406 mo
481.304 397.353 li
480.194 398.463 li
470.246 388.516 li
471.356 387.406 li
cp
f
509.935 395.421 mo
507.335 395.631 li
507.697 393.022 li
510.094 395.418 li
510.075 395.412 510.055 395.408 510.035 395.407 cv
509.999 395.405 509.965 395.41 509.935 395.421 cv
cp
f
506.671 399.47 mo
510.065 399.678 li
510.319 403.233 li
506.563 399.479 li
506.601 399.484 506.638 399.48 506.671 399.47 cv
cp
f
513.761 399.904 mo
513.448 402.673 li
510.817 402.884 li
510.598 399.71 li
513.761 399.904 li
cp
f
503.178 395.967 mo
506.909 392.234 li
507.215 392.54 li
506.78 395.676 li
503.178 395.967 li
cp
f
510.028 399.145 mo
506.874 398.952 li
507.259 396.179 li
509.809 395.972 li
510.028 399.145 li
cp
f
506.308 399.079 mo
506.297 399.11 506.291 399.145 506.294 399.181 cv
506.295 399.193 506.298 399.204 506.3 399.216 cv
503.561 396.478 li
506.704 396.223 li
506.308 399.079 li
cp
f
514.319 399.794 mo
514.336 399.759 514.344 399.719 514.341 399.674 cv
514.341 399.67 514.34 399.666 514.339 399.661 cv
516.766 402.086 li
516.418 402.435 li
513.998 402.629 li
514.319 399.794 li
cp
f
515.829 403.023 mo
513.713 405.141 li
513.936 403.175 li
515.829 403.023 li
cp
f
513.386 403.219 mo
513.099 405.756 li
512.971 405.884 li
510.534 403.448 li
513.386 403.219 li
cp
f
510.351 395.674 mo
514.058 399.38 li
510.561 399.177 li
510.351 395.674 li
cp
f
519.064 402.358 mo
513.244 408.182 li
511.858 406.797 li
517.678 400.974 li
519.064 402.358 li
cp
f
475.253 391.311 mo
474.58 390.638 li
485.23 379.988 li
484.782 379.539 li
473.683 390.638 li
475.253 392.209 li
475.457 392.005 li
478.225 394.773 li
478.474 395.023 li
478.723 394.773 li
489.369 384.127 li
485.903 380.661 li
475.253 391.311 li
cp
f
489.868 375.351 mo
489.868 375.351 li
489.419 374.902 li
489.419 374.902 li
489.868 375.351 li
cp
f
494.007 379.49 mo
494.007 379.49 li
490.541 376.024 li
490.541 376.024 li
494.007 379.49 li
cp
f
517.87 354.804 mo
508.964 355.357 li
508.472 355.849 li
508.096 356.225 li
490.367 373.954 li
490.815 374.403 li
508.751 356.467 li
516.62 355.979 li
514.981 357.618 li
508.547 358.018 li
491.488 375.076 li
494.954 378.542 li
515.005 358.491 li
515.26 358.237 li
515.664 357.832 li
517.878 355.618 li
518.255 355.242 li
518.747 354.75 li
517.87 354.804 li
cp
f
504.483 391.311 mo
496.159 382.988 li
471.189 358.018 li
464.755 357.618 li
463.116 355.979 li
470.065 356.41 li
470.985 356.467 li
489.419 374.902 li
489.868 375.351 li
490.541 376.024 li
494.007 379.49 li
505.156 390.638 li
505.156 390.638 li
505.156 390.638 li
504.651 391.143 li
504.483 391.311 li
cp
471.64 356.225 mo
471.264 355.849 li
470.772 355.357 li
465.771 355.047 li
461.866 354.804 li
460.989 354.75 li
461.481 355.242 li
461.858 355.618 li
464.072 357.832 li
464.274 358.035 li
464.476 358.237 li
464.603 358.364 li
464.73 358.491 li
501.013 394.773 li
501.262 395.023 li
501.386 394.898 li
501.511 394.773 li
504.279 392.005 li
504.279 392.005 li
504.483 392.209 li
506.053 390.638 li
471.64 356.225 li
cp
f
508.38 387.406 mo
498.432 397.353 li
499.542 398.463 li
509.49 388.516 li
508.38 387.406 li
cp
f
314.265 160.806 mo
312.543 159.923 li
314.265 159.04 li
314.265 160.806 li
cp
f
328.632 160.806 mo
330.354 159.923 li
328.632 159.04 li
328.632 160.806 li
cp
f
324.922 159.04 mo
323.229 159.04 li
314.265 159.04 li
314.265 160.806 li
323.224 160.806 li
323.229 160.801 li
323.229 160.806 li
328.632 160.806 li
328.632 159.04 li
324.922 159.04 li
cp
f
325.719 141.471 mo
317.321 141.471 li
317.321 139.705 li
325.719 139.705 li
325.719 141.471 li
cp
f
321.52 135.307 mo
317.395 139.241 li
325.645 139.241 li
321.52 135.307 li
cp
f
322.336 158.516 mo
324.142 158.516 li
324.142 156.017 li
321.989 158.17 li
322.336 158.516 li
cp
f
318.898 150.699 mo
318.898 155.06 li
321.079 152.88 li
318.898 150.699 li
cp
f
318.898 155.933 mo
318.898 158.516 li
320.789 158.516 li
321.135 158.17 li
318.898 155.933 li
cp
f
321.933 152.88 mo
324.142 155.088 li
324.142 150.679 li
324.138 150.675 li
321.933 152.88 li
cp
f
323.711 150.248 mo
321.534 148.071 li
319.329 150.276 li
321.506 152.452 li
323.711 150.248 li
cp
f
321.107 147.644 mo
318.898 145.435 li
318.898 149.845 li
318.902 149.849 li
321.107 147.644 li
cp
f
323.752 155.553 mo
321.506 153.307 li
319.316 155.497 li
321.562 157.743 li
323.752 155.553 li
cp
f
323.724 145.027 mo
321.478 142.781 li
319.288 144.971 li
321.534 147.217 li
323.724 145.027 li
cp
f
320.705 142.008 mo
318.898 142.008 li
318.898 144.507 li
321.051 142.354 li
320.705 142.008 li
cp
f
324.142 144.591 mo
324.142 142.008 li
322.252 142.008 li
321.905 142.354 li
324.142 144.591 li
cp
f
324.142 149.825 mo
324.142 145.463 li
321.961 147.644 li
324.142 149.825 li
cp
f
324.879 222.167 mo
321.534 229.374 li
318.19 222.167 li
318.19 173.964 li
318.861 222.019 li
321.534 226.577 li
324.207 222.019 li
324.879 173.964 li
324.879 222.167 li
cp
323.594 161.536 mo
321.534 161.536 li
319.474 161.536 li
319.474 165.945 318.277 169.781 316.512 171.75 cv
316.512 222.538 li
321.534 233.359 li
326.556 222.538 li
326.556 171.75 li
324.792 169.781 323.594 165.945 323.594 161.536 cv
cp
f
254.759 104.053 mo
254.692 104.127 li
256.181 91.0735 257.4 72.8605 255.505 56.1438 cv
260.271 75.7591 254.759 104.053 254.759 104.053 cv
cp
259.489 42.5765 mo
253.077 43.5031 li
255.141 58.7609 255.907 82.2473 251.434 116.535 cv
258.98 107.244 li
258.98 107.244 263.757 73.0709 259.489 42.5765 cv
cp
f
253.728 36.9587 mo
254.986 34.9816 li
256.963 36.2395 li
255.705 38.2167 li
253.728 36.9587 li
cp
253.934 30.2527 mo
255.911 31.5107 li
254.654 33.4878 li
252.676 32.2299 li
253.934 30.2527 li
cp
252.482 25.5724 mo
254.53 26.7105 li
253.392 28.759 li
251.343 27.6209 li
252.482 25.5724 li
cp
251.106 20.7588 mo
253.155 21.8968 li
252.017 23.9453 li
249.968 22.8073 li
251.106 20.7588 li
cp
252.885 17.2678 mo
246.79 19.5898 li
246.79 19.5898 250.213 25.4182 252.561 40.0112 cv
258.957 39.0868 li
257.661 31.2452 255.718 23.7503 252.885 17.2678 cv
cp
f
252.978 42.7843 mo
252.978 42.7843 li
259.386 41.8582 li
259.386 41.8582 li
252.978 42.7843 li
cp
f
252.996 40.6814 mo
250.811 40.9971 li
251.109 43.0544 li
252.978 42.7843 li
259.386 41.8582 li
261.944 41.4886 li
261.646 39.4313 li
252.996 40.6814 li
cp
f
291.088 394.854 mo
291.596 397.142 li
289.309 397.65 li
288.8 395.362 li
291.088 394.854 li
cp
295.683 399.742 mo
293.396 400.25 li
292.887 397.963 li
295.175 397.454 li
295.683 399.742 li
cp
300.02 402.024 mo
297.767 402.668 li
297.123 400.415 li
299.376 399.771 li
300.02 402.024 li
cp
304.396 404.455 mo
302.143 405.099 li
301.499 402.846 li
303.753 402.202 li
304.396 404.455 li
cp
305.607 408.182 mo
308.275 402.23 li
308.275 402.23 301.733 400.529 289.754 391.87 cv
285.885 397.047 li
292.346 401.676 299.02 405.601 305.607 408.182 cv
cp
f
287.499 390.204 mo
287.499 390.204 li
283.622 395.391 li
283.622 395.391 li
287.499 390.204 li
cp
f
288.973 391.704 mo
290.294 389.936 li
288.629 388.692 li
287.499 390.204 li
283.622 395.391 li
282.075 397.461 li
283.74 398.705 li
288.973 391.704 li
cp
f
255.252 395.362 mo
254.744 397.65 li
252.456 397.142 li
252.964 394.854 li
255.252 395.362 li
cp
248.877 397.454 mo
251.165 397.963 li
250.656 400.25 li
248.369 399.742 li
248.877 397.454 li
cp
244.676 399.771 mo
246.929 400.415 li
246.285 402.668 li
244.032 402.024 li
244.676 399.771 li
cp
240.3 402.202 mo
242.553 402.846 li
241.909 405.099 li
239.656 404.455 li
240.3 402.202 li
cp
258.167 397.047 mo
254.298 391.87 li
242.319 400.529 235.777 402.23 235.777 402.23 cv
238.445 408.182 li
245.032 405.601 251.706 401.676 258.167 397.047 cv
cp
f
256.554 390.204 mo
256.554 390.204 li
260.43 395.391 li
260.43 395.391 li
256.554 390.204 li
cp
f
255.079 391.704 mo
253.758 389.936 li
255.423 388.692 li
256.554 390.204 li
260.43 395.391 li
261.977 397.461 li
260.312 398.705 li
255.079 391.704 li
cp
f
242.916 348.14 mo
242.911 348.04 li
251.088 358.324 263.105 372.064 276.265 382.545 cv
259.025 372.045 242.916 348.14 242.916 348.14 cv
cp
283.042 394.955 mo
286.92 389.766 li
274.672 380.437 257.523 364.371 236.441 336.963 cv
237.675 348.869 li
237.675 348.869 258.461 376.41 283.042 394.955 cv
cp
f
306.377 348.869 mo
307.612 336.963 li
294.258 354.323 282.483 367.133 272.531 376.563 cv
272.904 376.914 273.276 377.263 273.648 377.608 cv
284.481 368.002 294.197 356.775 301.141 348.04 cv
301.137 348.14 li
301.137 348.14 288.791 366.461 274.148 378.069 cv
275.226 379.064 276.3 380.034 277.369 380.98 cv
294.154 365.065 306.377 348.869 306.377 348.869 cv
cp
f
257.132 389.766 mo
261.01 394.955 li
264.604 392.244 268.117 389.34 271.495 386.359 cv
269.895 384.935 268.282 383.458 266.661 381.93 cv
263.218 384.962 260.037 387.554 257.132 389.766 cv
cp
f
510.087 34.3789 mo
505.849 34.3789 li
503.729 30.7085 li
505.849 27.038 li
510.087 27.038 li
512.206 30.7085 li
510.087 34.3789 li
cp
510.9 25.6292 mo
505.035 25.6292 li
502.103 30.7085 li
505.035 35.7877 li
510.9 35.7877 li
513.833 30.7085 li
510.9 25.6292 li
cp
f
505.971 34.1674 mo
509.965 34.1674 li
511.962 30.7085 li
509.965 27.2495 li
505.971 27.2495 li
503.974 30.7085 li
505.971 34.1674 li
cp
510.209 34.5905 mo
505.727 34.5905 li
503.485 30.7085 li
505.727 26.8265 li
510.209 26.8265 li
512.45 30.7085 li
510.209 34.5905 li
cp
505.158 35.5762 mo
510.778 35.5762 li
513.589 30.7085 li
510.778 25.8407 li
505.158 25.8407 li
502.347 30.7085 li
505.158 35.5762 li
cp
511.022 35.9993 mo
504.913 35.9993 li
501.858 30.7085 li
504.913 25.4176 li
511.022 25.4176 li
514.077 30.7085 li
511.022 35.9993 li
cp
f
503.548 32.4468 mo
511.683 27.75 li
512.388 28.9701 li
504.252 33.6669 li
503.548 32.4468 li
cp
f
503.837 32.5243 mo
504.33 33.378 li
512.099 28.8927 li
511.606 28.039 li
503.837 32.5243 li
cp
504.175 33.9559 mo
503.259 32.3695 li
511.761 27.4611 li
512.677 29.0475 li
504.175 33.9559 li
cp
f
512.388 32.4468 mo
504.252 27.75 li
503.548 28.9701 li
511.683 33.6669 li
512.388 32.4468 li
cp
f
503.837 28.8927 mo
511.606 33.378 li
512.099 32.5243 li
504.33 28.039 li
503.837 28.8927 li
cp
511.761 33.9559 mo
503.259 29.0475 li
504.175 27.4611 li
512.677 32.3695 li
511.761 33.9559 li
cp
f
508.647 35.3622 mo
508.647 25.9686 li
507.239 25.9686 li
507.239 35.3622 li
508.647 35.3622 li
cp
f
507.45 35.1506 mo
508.436 35.1506 li
508.436 26.1802 li
507.45 26.1802 li
507.45 35.1506 li
cp
508.859 35.5737 mo
507.027 35.5737 li
507.027 25.7571 li
508.859 25.7571 li
508.859 35.5737 li
cp
f
509.799 51.7628 mo
506.187 51.7628 li
506.187 35.7877 li
509.799 35.7877 li
509.799 51.7628 li
cp
f
519.064 51.7628 mo
496.922 51.7628 li
496.922 49.894 li
519.064 49.894 li
519.064 51.7628 li
cp
f
508.36 52.7852 mo
508.36 96.0467 li
507.993 101.582 li
507.625 96.0467 li
507.625 52.7852 li
504.128 52.7852 li
504.165 96.1868 li
507.968 118.156 li
511.808 96.1868 li
511.808 52.7852 li
508.36 52.7852 li
cp
f
496.922 49.894 mo
496.922 57.8977 li
500.203 49.894 li
496.922 49.894 li
cp
f
519.064 49.894 mo
519.064 57.8977 li
515.782 49.894 li
519.064 49.894 li
cp
f
31.2238 53.6624 mo
34.8906 53.6624 37.0531 54.1795 37.0531 54.1795 cv
37.0531 40.1233 32.4441 34.059 27.2279 33.3735 cv
24.4313 33.0061 23.514 35.6573 26.0056 37.6788 cv
31.2794 41.9575 28.5442 50.2776 28.5442 50.2776 cv
30.1425 50.4187 31.2238 53.6624 31.2238 53.6624 cv
cp
f
35.0663 101.283 mo
32.4581 96.4967 25.6212 81.4217 32.3823 65.0141 cv
28.3499 79.7143 31.768 93.072 35.0663 101.283 cv
cp
38.4493 114.498 mo
38.4493 59.2791 li
32.2341 59.2791 li
19.8275 88.63 38.4493 114.498 38.4493 114.498 cv
cp
f
34.303 54.4146 mo
22.1248 54.4146 22.9055 45.4947 28.4622 43.894 cv
28.3215 42.677 28.0074 41.5919 27.5212 40.6442 cv
24.7761 41.3649 20.9363 43.4499 20.9363 49.4769 cv
20.9363 54.38 25.9586 57.8934 33.7153 57.8934 cv
40.2028 57.8934 41.47 59.3876 43.8931 63.8637 cv
43.8931 63.8637 45.3035 54.4146 34.303 54.4146 cv
cp
f
98.4519 67.1538 mo
100.219 65.9595 103.12 65.2309 107.814 66.5892 cv
107.814 66.5892 102.551 59.3798 95.8506 64.4995 cv
89.1505 59.3798 83.8871 66.5892 83.8871 66.5892 cv
88.5814 65.2309 91.4823 65.9595 93.2492 67.1538 cv
94.8179 68.2141 96.8832 68.2141 98.4519 67.1538 cv
cp
f
92.7833 66.3146 mo
92.7833 66.4989 92.7818 66.682 92.7795 66.8644 cv
92.944 66.9571 93.101 67.0536 93.2492 67.1538 cv
94.0336 67.684 94.9421 67.9491 95.8506 67.9491 cv
96.7591 67.9491 97.6675 67.684 98.4519 67.1538 cv
98.6001 67.0536 98.7571 66.9571 98.9216 66.8645 cv
98.9193 66.682 98.9179 66.4989 98.9179 66.3146 cv
92.7833 66.3146 li
cp
f
95.8506 47.0175 mo
92.8263 47.0175 90.3746 49.4691 90.3746 52.4934 cv
101.327 52.4934 li
101.327 49.4691 98.8749 47.0175 95.8506 47.0175 cv
cp
f
93.9459 51.4122 mo
91.6894 63.5879 li
95.8506 66.3146 li
95.8506 51.4122 li
93.9459 51.4122 li
cp
f
97.7553 51.4122 mo
100.012 63.5879 li
95.8506 66.3146 li
95.8506 51.4122 li
97.7553 51.4122 li
cp
f
96.1926 93.1993 mo
96.191 93.4836 96.1895 93.7667 96.1879 94.0484 cv
96.1849 94.3301 96.1819 94.6104 96.1789 94.889 cv
96.1728 95.4462 96.1669 95.9966 96.1611 96.538 cv
96.1525 97.6208 96.1315 98.6676 96.1138 99.6601 cv
96.1044 100.156 96.0953 100.639 96.0865 101.106 cv
96.0749 101.573 96.0638 102.024 96.053 102.457 cv
96.0337 103.324 96.0084 104.118 95.9855 104.822 cv
95.965 105.525 95.9399 106.139 95.9207 106.644 cv
95.9027 107.15 95.8821 107.547 95.8708 107.817 cv
95.8576 108.088 95.8506 108.232 95.8506 108.232 cv
95.8506 108.232 95.8435 108.088 95.8303 107.817 cv
95.8191 107.547 95.7984 107.15 95.7804 106.644 cv
95.7613 106.139 95.7361 105.525 95.7157 104.822 cv
95.6928 104.118 95.6675 103.324 95.6481 102.457 cv
95.6374 102.024 95.6262 101.573 95.6146 101.106 cv
95.6058 100.639 95.5967 100.156 95.5874 99.6601 cv
95.5697 98.6676 95.5487 97.6208 95.5401 96.538 cv
95.5343 95.9966 95.5283 95.4462 95.5223 94.889 cv
95.5193 94.6104 95.5163 94.3301 95.5132 94.0484 cv
95.5117 93.7667 95.5101 93.4836 95.5085 93.1993 cv
95.5051 92.0624 95.5016 90.9074 95.4981 89.7524 cv
95.5018 88.5973 95.5054 87.4423 95.5091 86.3054 cv
95.5133 85.1684 95.5311 84.0495 95.5409 82.9667 cv
95.5493 81.8839 95.5712 80.8371 95.5884 79.8446 cv
95.5978 79.3483 95.6069 78.8655 95.6157 78.3986 cv
95.6273 77.9316 95.6384 77.4804 95.649 77.0473 cv
95.6682 76.181 95.6938 75.387 95.7163 74.6831 cv
95.7367 73.9793 95.7619 73.3657 95.7808 72.8604 cv
95.7987 72.3551 95.8193 71.958 95.8304 71.6873 cv
95.8436 71.4166 95.8506 71.2723 95.8506 71.2723 cv
95.8506 71.2723 95.8576 71.4166 95.8707 71.6873 cv
95.8819 71.958 95.9024 72.3551 95.9203 72.8604 cv
95.9393 73.3657 95.9645 73.9793 95.9848 74.6831 cv
96.0073 75.387 96.0329 76.181 96.0521 77.0473 cv
96.0628 77.4804 96.0739 77.9316 96.0854 78.3986 cv
96.0943 78.8655 96.1034 79.3483 96.1128 79.8446 cv
96.13 80.8371 96.1518 81.8839 96.1602 82.9667 cv
96.1701 84.0495 96.1878 85.1684 96.1921 86.3054 cv
96.1957 87.4423 96.1994 88.5973 96.203 89.7524 cv
96.1996 90.9074 96.196 92.0624 96.1926 93.1993 cv
cp
98.9305 67.6472 mo
98.8487 67.6973 98.768 67.7488 98.6889 67.8023 cv
97.8489 68.37 96.8675 68.6701 95.8506 68.6701 cv
94.8337 68.6701 93.8522 68.37 93.0123 67.8023 cv
92.9331 67.7488 92.8525 67.6973 92.7707 67.6472 cv
92.5383 77.4736 89.0814 84.6846 89.0814 96.4392 cv
89.0814 107.757 95.8506 116.535 95.8506 116.535 cv
95.8506 116.535 102.62 107.757 102.62 96.4392 cv
102.62 84.6846 99.1628 77.4736 98.9305 67.6472 cv
cp
f
65.7279 157.081 mo
54.5135 154.402 53.3289 161.655 53.3289 163.904 cv
53.3289 164.994 54.2128 165.878 55.3032 165.878 cv
56.3936 165.878 57.2776 164.994 57.2776 163.904 cv
57.2776 162.813 56.3936 161.929 55.3032 161.929 cv
55.2746 161.929 55.2461 161.93 55.2178 161.931 cv
57.158 157.763 65.7279 160.876 65.7279 160.876 cv
65.7279 160.876 74.2977 157.763 76.238 161.931 cv
76.2096 161.93 76.1812 161.929 76.1525 161.929 cv
75.0621 161.929 74.1782 162.813 74.1782 163.904 cv
74.1782 164.994 75.0621 165.878 76.1525 165.878 cv
77.2429 165.878 78.1269 164.994 78.1269 163.904 cv
78.1269 161.655 76.9423 154.402 65.7279 157.081 cv
cp
f
65.7279 159.499 mo
62.4744 159.32 li
62.4779 160.027 li
64.2999 160.357 65.7279 160.876 65.7279 160.876 cv
65.7279 160.876 67.1559 160.357 68.9779 160.027 cv
68.9813 159.32 li
65.7279 159.499 li
cp
f
66.2745 161.436 mo
66.2258 205.758 li
66.206 209.029 66.0366 212.249 65.7279 215.225 cv
65.7279 215.225 li
65.4191 212.249 65.2497 209.029 65.2299 205.758 cv
65.1813 161.435 li
64.6967 161.278 63.6832 160.971 62.4814 160.745 cv
62.7671 219.637 li
62.8851 224.034 63.8921 228.361 65.7279 232.36 cv
65.7279 232.36 li
67.5636 228.361 68.5707 224.034 68.6886 219.637 cv
68.9744 160.746 li
67.7735 160.972 66.7594 161.278 66.2745 161.436 cv
cp
f
63.926 143.254 mo
65.7279 143.254 li
65.7279 158.172 li
62.4744 158.172 li
63.926 143.254 li
cp
f
67.5298 143.254 mo
65.7279 143.254 li
65.7279 158.172 li
68.9813 158.172 li
67.5298 143.254 li
cp
f
70.3629 140.941 mo
70.3629 143.501 68.2877 145.576 65.7279 145.576 cv
63.168 145.576 61.0928 143.501 61.0928 140.941 cv
61.0928 138.381 63.168 136.306 65.7279 136.306 cv
68.2877 136.306 70.3629 138.381 70.3629 140.941 cv
cp
f
489.148 154.661 mo
492.137 159.235 li
492.137 159.235 496.977 159.235 504.106 159.235 cv
504.106 154.661 li
489.148 154.661 li
cp
f
519.064 154.661 mo
516.074 159.235 li
516.074 159.235 511.235 159.235 504.106 159.235 cv
504.106 154.661 li
519.064 154.661 li
cp
f
499.36 154.661 mo
508.851 154.661 li
508.851 154.661 508.851 154.66 508.851 154.66 cv
499.361 154.66 li
499.361 154.66 499.36 154.661 499.36 154.661 cv
cp
f
508.851 136.505 mo
499.36 136.505 li
499.36 138.403 li
508.851 138.403 li
508.851 136.505 li
cp
f
499.47 138.897 mo
500.595 141.483 500.882 144.067 500.882 146.656 cv
500.882 149.162 500.613 151.663 499.575 154.166 cv
508.636 154.166 li
507.598 151.663 507.329 149.162 507.329 146.656 cv
507.329 144.067 507.616 141.483 508.741 138.897 cv
499.47 138.897 li
cp
f
506.741 167.072 mo
509.604 217.539 li
504.106 227.924 li
498.608 217.539 li
501.471 167.072 li
499.712 216.835 li
504.106 224.777 li
508.499 216.835 li
506.741 167.072 li
cp
497.057 219.105 mo
504.106 232.16 li
511.154 219.105 li
507.591 160.854 li
500.62 160.854 li
497.057 219.105 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1602.m00.i103.n010.P.c25.243041878 Sword icons set. Ancient swords signs and crossed sword pictograms. Vector swords.eps)
%%CreationDate: 2/14/2016 2:07 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&XZdcgXWSnJ'*3+E@t%ZZ>fB,_e[UAt<M!b&t4c?skdqsC&B=r83(cd%,&G]uE[Wk0d*<N.8r/uG1gX(&JOC$2[Z#ff@H
%JfmHL#op1d+9,JKgp\o[mO4a0;slTh<\N?Mb%A,PEGVQ%h2#Tj)Qh);;$1HiaK912cC^6+D3Q!4O*2X0l]uDQ:8_gu,#XRiNVkTt
%I+\\:^]<j@[EHl$:!cinHTcla(`S&[Akm6)kW(qM;IqjS(;PL&a:]kP",U"m?A>@g6'<HCpCB%"500Jj+:B1a(;RES+Nl>8(?%I^
%*^@[&,hdg&OXc`8ULWpIVZkH"Lp5gP'lYpk2604(mU9oV4qp!C`?K8WGiYq8>Ipc"'OagN(4>0Bn1Ri4)T[C7(B3cT]g%+h>_J.D
%Gb0:H$g6G%JAahY&Y/"=%d^e6@*8mD'(WbM2VY[f1U3HM/h'7&*2eBAq?I$*dR/NkQBdW5'M4+>RKQ5+1P#:+6tAGW?U)aVQMK]5
%AD]3nB#dmRXj\e&^OWg_!T;-WDY$<S2ER6WWs?-]Tf*Y/iP_^_2PALeY1j0/$&V:Gks?)D:<i,+4a-0U'Z3C.@E?".Ie24eBgQrR
%h+>oGAuk-#+[d!V!4^-A:co^o.n(//S0URaY_#7LOGjJNJDJ>_16bKSW:*m0W`cH`KF!qkEK[BUHQB0H.lQ=UJj0eQ8VR#=P(,*]
%JF6aiC_>0"mQ#>TR0]!=.CaF5lhtFpAQY%4*#P+FUd2$0-9rtpoF0)!n0/5co2d49ZY+Ht=U+fo4T(Ehpo1:_1Qrua4:f2P*hMJ=
%Ga@O_=^=PREApI@@$1YB8J2/i,R>_g\kWH0<=#A"&4QhQW4T&r0NEg7n-FJ0YY57QAMUK*-3MS)1(Zq,iE9HQ,h-,O+b6`U:)I](
%1<'UGM9j&Aj?1b@mdLU96+Yu%"G:e.C@O;T'`<V<O=9m\BIE/^SKV;.'E3SO_,!$)AelF+&d:K3mI1*66b;3WR&:c'#R3kQT+FKD
%@2k=A66:1do+JA:Ic@MtH;"<.+(L)h8&u?@&J4jF_'"a,'+T^"M(-L.>f"5Y#R4ugP/aT>SKX!^'E3Rd@Qf760(Q4QIR5_Z,Q,Ks
%`9MrBM_Ta'&m[cD'29[F_^K!N6SQ_H_Ac03-3,3M;8Y3MZ&.*e#l0*,O?fP8O?h;9;iXX@)W<%H_n$=l`-fCli?s;0"G6&0bD@NR
%p>J$9VA")!8ji4\+cfV-.g7X?,$W9>N$%1FSf'<p+\r5.kelUO0JYj6*Y3eIj$+?*CoCIBZ0X2tn.7YW_lE'-5OJWb'C5>YN%iGa
%"0Cb*#(0-5h0j,aQL@J9nCj35`/1]3Fn]$*cm:*(RIS)&/'B^3%t;-nP'-da%\N=,nXgr^hu5S6"5QBX2u2A+:R:Nhru:te$N@.U
%hX$-sVePpjs,I',C&H`c`daY.2N+(&Du>sFiSXVnraWT*f?Zf%_G;^ir1!W$hiL<&a9\N3eKJ##)Q2niU1`R-r0F[8Q;,7A:55kp
%X6UrWEq#I4g8-5B#C_IG*-QkQn;&&/@+;&`=P7Q7,5KAaoKtqFmPd2L683WoA"\JS:j[q)#&+bp6LYZh5_!_g*MA>RjCEiG-_iSu
%/2"qUFrGeD)]TK5'_$X?HC"p3)g7!-\K*XI%?tjHPMqH+X"9ISe$t#9p^HF_)SD77PT^fk/&>006<Mlg!*o-Ba!fEpGT'*s)Fe[[
%pK6P"(nHmrQ6HY!Ul,M>a]-"0&[9RqT+"dmI(XjC'$_/9leYG@d&5HY6jBuWP.SclN$lVhfT>'**CMsWF5CQ%O0X+c3AI0I0(OYK
%jL&R'M4f%a#MUE)W"gJJVQ$K4j"f!KL*]13@\J*gpJLRnlZ8S8,J[K!n+\`h3&isYUot$+!`=3X2PbI44Vu23blsB=G[Q14iWJ<G
%_U_X)W\ZdKA<MtLi;L[\MY-skG<6/'EO];Z&&>M<KHV-+QRcOl!kKT[F:j5_d9rEd-H^&tQKakOXgA/7BS;G,H&k(K:='OB*Xg9R
%-Uc(K_:J\.5'h,H%-G4^Ws8k%LI!9ISKYj=B3!G%;rVO+qK(%+Y\i8BiaFt'LH$a)o;fa$s/4Bc=WHD'juH.;ia)lI<Vm-"@DQAE
%M)WE1(3BI"EI"i&h,OY'l<CsZ"\U)upH2n-$oD(1AD0jo`$r]'0UO!/=hXE?=b=4<%s1:]8rKePl$PbB4jj&'H;9ot(X%Q711#0S
%D=L>W=9CFN^W$^4Uq[`T,KO/I>p]g-3-Y2MI;ES.Tnt&U\==Wb+>N*CLJ%j9Hr)dd`UkWACp!6YGMg,hXJ6t6L1`,,kC[76CgJ*'
%?G>+f3;VKDW*k2XMD#]bjQ\iJ0a1!5q]+=#0SZ14qt(#JEDc_jA:dA#UjOd2C5nu5)IG<Cai.I.#G\^$jq;c>^0B(b29tgYhC2Wq
%6,b2"\SC/'m?9e*E$*1*Ff1QLhc4EU^DSX=GP5Hsd/j]pTN(i?4jIQ^$bBd(9SO/=7TREL%$O!qlqj[SmQhlb"[ct#AJ3KaGE!Oo
%(7It3';9!s$gsQ-,N-."P7a#bV)Es8n[L6d?S8>NSJKG2'ugnt0JpZSk+tBdY;1Zo0+`,#(.UHbO4G+N0%c8u-1W:%)</Y`2kgkS
%s1jsuHBo!mh3^]33oK0oFMR@OD\+F6J_#S)3-+-T(+K"-_".N^?o0gKdL`jSo)n.7A[E[n6Ff]\/LgQ,Y-L>KW7gFC-"niObXX$J
%i(/'YM>(?4j*E&^=OJ(h)itRaL0j<N3A&YN+Qr"5N(SeONk5DWSdQiN%s@Wq0?N>I5R'e(G[KLQb3.4@,O,M>"-Kr)ADR.NDOQCi
%0_gjV@=2/mIrd/aS#hKsKC7f^aa(8(?Cqp7JcbP7L266/n'ar^_bs<)FBO.H+_C+%Sth8Y!G@&/o2?ekNuKK`d,?WEh;sS^"f`j6
%nD&^39M&n\ckP3Wl&*Z."HR[h1[%gEm2G*FiHu\RgmH^:j1H&2(T8a7R>%0-$W$a/.hg6cBCpg`m&G%P8_9#:c=]9d7)K0*Wc(GH
%ms)@*Lg$Yg5FLL4[R+FaP%W'(Y&4^g=?UULJI9LIA4b`QG?'I!f?ja=>TF-jE3bs5q`5URW"gkB5[m-W+9gAGlo+gH:nTi:eSu9a
%kp5V:,;=3L$VmJ6:QGkpCbQ:jV1?H3=)EQOl%'Fa;^@J<%@%Dg>("Xceo#e7@Z`k6p`"Q`=2X5M((8HR7[cO,VCRO.p7^e+5'KSS
%Lo!cNUB1YAO(kT'aX]a*bD&Ekes?jZ*)QuKj"qC+\O7#e#oY\K3o;7Y<A@:p!Qf]R2./2H.L$pT!:##-&,j$V[&Zo#:d,l\6!m9e
%n%Q9)"*5PmbRriqI,sOR5bbom[nP8BhTpQl[NpJP:-kNbUj]rF1hcXJb2##.!Mi`<a%8QmjJE$n_#,%dMmDDOm?FiBe5HqLU_6-e
%<WqY1'(@)K7WEhsU"aEbK:3o\<PosUY-Xke$*L60.O;SdYP9!BCZB++G=rY;okBJce(Fjn=AsgpDh*tQ63UT8$7jTaOm?:a)O$g(
%OB+:Po7Km63.R_NGu^alV67-C(,'tL5@h1"fnh`X,#<!fcU_5B#8/7jmp=X6';3c"M',!8R:M-_>SROb9Xjfd?J^=Ye<E72&oKtq
%<Ec<)Z1s0skNp.D`XbX)7+J?2pp#Y9eYi^5as_?[lH*>*Qg*ECYn*,k1M1rng3:EOOSjp&Ido]4=r!TWlN&f=P9ZE;HBI^)C`"sV
%4EXQu(dsY7jLeuV*h$,5M3OK#%,j6>5J'eV)<oYh$VH0tlDFoTU$-]T^&UUV]BCi-8rs:"/IQo:ZJ$GPH,?<C3N/hDQl=&ALq6F9
%S1grPSK_bKM]`euUFQRT-Cob:_&G6nNM<K<_jHj=cU>^_@>K2$,C=YaPZJ4AlhmPW%[L.Ni:S8ZFIX*XK5oT+B,FNc"nLud.[@:9
%Pm#2J6Le#D%'K?cHJAM,gq8aZs0Jk1rLlc$66$Xb@lMDX?nC?+P@$h$D=>0A,Kf&dZg_(90B]\03LlU4AEST*&d"%Fl"!6%A!H,L
%X*KPOQC=B)4nRM[_IPrS]4F,aT`p$*C%.9dg+@_`4E[Ksia3eZ]Z>s5@%L,/A.bK$7hS'!MoQY;W^d!%#Ie3sdmf<(&?'+5$94S2
%GVNLD.rtk0/_Z:X6liAT#3sQgNS^p0XFZat&h(%sh?QNg?uZDDm]oSQ0pQ-GK8t"Ziid[:Q_B]O^OkDRQLgCnST<VZ-+qF]]O>n3
%&/?V^Sf;cSA<k:4lkj7V1`:n!T@:SV&m;aN#5kOr>>n(YX*aP17-Sud?l(qq+/lE6X3?/W2b/Q,EgBN3WIiYTQfGZLfs%P*:7Yc[
%8m\SP0PX(DBu+.IBOi=DoCG.A@K"DEbImJkX/QF)?m7%F@=GP3]LK<M\4/s_/U/HcAKTJZ"k&*tk9g#]0^^Sd\M3EH)X;V\!`$"a
%+cE\]ipt7R4HcH,GrGa76o[K^Q$&W9rpA,$("@<W_\;J8dNCI+ES\#(e/`0X6of7X"I%gi:=tHkNo_t*DKkra7TgJ*/5TqP=\#,K
%:Koubf(`qT=:q_:0lq+H^7uZ[Y1,5/;aII6!Sq+G8Tg,>5%4u>gQH$1b@&*KKX]pMDCFfW9D9k_Gi<Kq?=;nK!q\7%.jk7-)Ngf[
%ZtZhgHPJ?_9k[i5TT^!!&Y)O0`0imD#P49mnN'rdf#dn4ZL3(0:gHRc("bp(4te>X(Zfc.Ld]a,Du%YfhV=T!c;MA6m27``B?B7^
%ig>f52(EOmHl_-:=QhA?,aV)dJC(@CM.B>)6T31"<6-d>6H?]]ok]AZ,8q-&k['dEp#@+MVd@?lPM!m9Rf+J].tnO1SE2PUe\j!4
%q2(G"UZR9H>-L=e>UR@?kkm^A>$$=(d&H5,VclYoW;>g>-W8?W]0XZ-2I61PG("VTR\P$C"?&_ql^a@rGj^1T4KT^YHfj;+;82'5
%Y/O1+L0q<a>SEs`MBD:0_3+Co;ga^)@,?$&5@?f-Uj-+nLc&+NNm@mba+g\`\iX^^"]i`-^/#3L.R./D$8+tFQ.Qe=Oij29XE"5'
%%$pdCm!-pW0khX9qA4&\@bM3HnQ%1oMVs;Ej)Qr!:hVJIY2-Dc[7F.OH=#1[KSL?Q58>Fu#$IT&ROr'^&Bjm#\!r?OX0'!MGj.II
%;l&)876;\&bAp!i?DKtGNu]Wo@!R)%H6n,,aF7;4-$fTJVmp'K`"9+>_Bp[#Qh/jRq)T6!8V<At4U=Bd00$g6>![RZ$4]T(4;B[L
%,fj,7*krAS6SPg?)<:7UE8EBW\lu.]@:AZ*^[IacKL&:"cB=:-a3kKX'V^t:ADuWf3=6.oc2_Q+S*:[#Q\<S:NYMN)&G?A$%V&;t
%rG8%7%(@/^%2=eB=+8<W)(_a&BnU4"-,b?g_=IuKKm3X/4.bVRFOqi!Kp,bJ,Z,mKFr)SI.1ltN-7N7P7>1lIX$GR`AGk6<hb!1l
%]AV:!r&blm82r724+YNC#D3\/4C*?]E>Aj]EtY6"k#rLEX.Xg,ELQBg:3`NV^5Xi(EGVQ8T(RT+Es8o%DuYB,O$jH'V[hou[G\`U
%J,JIDT2V?QFs!70lT"k:6*';KnXgPuifq[.Q!*N8*UB%pM4Bi;_2h]/"l0b1.<^Y*(^'^0@$68pNf=lP[uHCc_.Q&@oTOZXl(9i6
%:8d=eJ6R)s+/\G4WIZd/QkAqud5!`pFM]!df_PWo(k>E]O:]e*h1Q]qlu_!4/SGh$1GJeU!7[u%;]T)EG=/#]UXT+hkqo'K.]21^
%o,VGi6Gr/Tl\!*dXoHY]H)"H%Ui!G<l$C"X5CG^_hW)$u,A%A=[V?hX?+7t=FJn#u7uE=:H_V*3n'+7m6`4><OC\"-:@#!8l$5Lo
%$SXQ6f'2-W'0Mc9CY2>=jEI&H0IBl+J;a9>'L.:#r+Q/%5IO1XPd0_a=`S>Zg[mt5>OoRMXKl[YIWg'M.,RuP,NOUL.!WnpPM?!]
%0)b3@T\-8FWrg9ioW=_LgSWG9_ads"$?`+\+q>4+Jj6(+%+[:^h+Aq^Y%TA=:DU,,J:m.'B-+.$a,pi#lfR:'e>\i!3,=f<o*LB$
%cOm'5,:e7$m1q[L!"A'nV1-_nNbf.)C7UA>#ZIm1G,8]W&-NeP56/l`G7oAsIR:?VaVC+M(1WL"!Z8:E$Ng8\m(Nl#VcE!356,I:
%9ah1:E8f@pR[C[#e`sgZe.BE8OV<J:^I$<;f4:*71B\"Ka%(`)nGL'XbQBNh&%jGUn.PLD0[K*!b,e2@dNHoHBQI!d9g.oW1eh!2
%b0Y3564ar`?409GUq+QQ^JjEM\?Ke0jppf:OtGPK@j.f4'RCON/k2&R7<%b<5@K3cJ0#MH:g0V#l^6MB*G,a'J7EYn8Oa[o:<D^g
%HH1F!""auB:']^t73"7TZ<"_c<pghi67F#d*7EMfKK/iHihN'?=WHN[.(hcWrrcPgebVggJHZNMND%4t:;9^cpMd8UL8%KINK9YA
%&Yt5%g1JA*3FrIoI*aV&$VJOP-qOeT0#%]#'Wd6_?p/:+,Fc$`DW6J?ATj8+_Dfa+KNVp]^QI2L3sGs,m8M'jc>pO"DYL?Hct%qN
%dPjnf6MSo1C,`su1e[68Fa@Z!h(5rAV^Wf'&Xfj(h*ial9#6NH*9U]8%RP.PQ8A;<'Z"\tS.oPi-itNJ"Xc_Y]-BSom3oM!ZR[m4
%1N@f_CcXdI7.>_-3ugo[0h-j=8W=2ec!%(-b_7!CeKtDNQ%#+N$pfl2Nc*U[=s<O=CtN=o[YbXgpn6XkWaiJS,Kr#>UJeATY.tTJ
%q4QckJ&;Q7.$shU5(*#p(nrG:EKN+n.Apl)1S5j07["XA+.KHiYaZUG@7B\-7)6Q3E"'H>iL<k;;iM:)XEOed>]^nXT>o1g@dKK<
%T$[jI`k[\r93`rYeS9LPi<RG=Rmo%Mb3)^-@ngBjQIQE*.OHk(a%<RK\*M$JUr[SDZ=YCurij`g\O+h(C%-,i<O+hGM!nHu$qJTE
%Ej'K60D:?R[qck`oZ'pZ#9WGh6J9;Dr^&*eUq<tj=n*F=6"NsZ46qCWVuB>=p3d:9PNE$8'FYp&<Qo,b5bN,]f,(3MM>(LgAFe-5
%["(i'0d^c]BF#i=`Ydh,28;$=l\a)pHM+/g$a\Q:X7[ctY45qBNLpVb$UN,=llu6G01:1b[U4#"j-8ebfr:C$RH(r3Mm8XT6_7RN
%r\q#(LU]caFq&_?%=&d`B%N.EOcXKRXs(\5a@:u[ea+4Fll,H`+`$qX+etD/?:F"Dc&hJ?m(2`^8=EgC%[@<LLJ$lc(W9q;NG$k&
%B@i,mP;joFpd5bT.TWt2n!Y,l"d[)-(fP_3@pINoLeNpIphAHjoB0e=Cj6IL!(`=p44Nq]_%'r_;a[WUrD"(Q<X"TEKo*Qsi"Kp?
%=LZ/1'nDm#"8f"JV+Fl$AehTXXcSCG$JDLI2QMr<',h]3UA4_!1)s\=eiK\]g&s^U\S8H$<mB=q@6(dLg[(;m9rDL.5.oT1X.RZ%
%BE(:*rLN7eX:h9&D#CT-rD8R4nfYuLCJkFY9H3m:=[/Zha'>L`=t#"f%eo1k[GQfH8i2Ra7HdsUrKNP*i/99S/CO?2gXsO\Mggna
%:.&$8S_CAA#hM]`p'VVZpK]+LE\=f2^Y0h)p_&.,QW`9Y<d:#I?=nnX=lEpmGSsGs%a-E5nD[JW;#Os+GaT:QAqcRSiFN9X^UN\f
%5&WYKqg9`fJ5gJ$So7n#R^QG5^Jmgopqk\54gF"U=8Kr$RD/Ct/&L*.4m<KY#etXunibY_4KK_8%?pdqMJ7G*q:%U1,)ig%qU6p1
%X+t"O5?f*TCN5l!V`B/[1nH:\',#C]q>qPkB?f#I8_16:Z8U""i\Xq:EVb8lB2<K84i(iKoau24?LSkjQuDSJf*"/=YBULH`4(!5
%/,-i;P5Cn*#s\=q4qUJQ^e$i-Ns^M8!Y[Qk%A+%U\rR;a5Dhg?cN'H?B7N]\AM(hn3+n;c)#q>:fjcZ^apUnb4Ub)ng,44R$6?Gc
%np:/A0prTEXV)tlWf/[F$:@1Ji2SQPkR&inoJj%\cfgd5[oKgVVh-kSDNnt4gt7SD-Dt^FXkqA5-5e9Sp_iMN(^r>U]aMAHptPSM
%OS!o:1X_uVI7l*e40.L&\24q$^Eu+BRC`?0;]V]WlUJkh1G`=Nm<e:@R$-NBp.W6ijU(pfLUpXNgYR<A[J-8Je\To`rOudXS)m!c
%md+PbZ/7,*&&3g1SDhr8gatC1gs3i+F49rpSQX/m[5$#%Ib`3bSgX0Fppckt;"Qo&U011^O!?ElKD_M&BQaXVXF`[6i,r)erf*&q
%`8;h!]7YKe4D&f!ch=pK0AIj4]7YL>30$qH-@Km(h*F5M$fpXao%D_V.=*mV)o)@*p`1m+Ir?!7GXjMa_1(cHnk#%hmr@^O7ioD[
%Mf5R,eW*Mp)>:%>Kdj=cIO"O&)u_o5^aD6pBfUm=eLQ,kW@`)X$A9p5G,XSu#GB++>d<08okh#Mk!]I2B&c7A$#p!RA9:PZA%qU:
%nR:j+)h9#7e/9H!C\=00^o.)9V1phrR$WtuauJ(G]P2oT69NlX>PR]k3/396iG=0eru6.B[>_!TgV!/f&+o:=ZKpaZB6L`43VgnM
%-JM6g=*-:$O8/MKGJoKiL;*UB14ESI@k?]2:%MYXM.q3:7Nt5mnWg"`N77X<nO"Z&NhLiQlY^&8f-]@@:#-"8GUWZ.*))3d0,43<
%Rg?_TRu+Tp2AtYSQL>Yddt.pH2rSteU2M,M:X]XRFmZ&@G''c@`qm`O8[rDt_FXE*<%#4ILb^q6paU+!/c\%HDkcu1jbn'A7]&c!
%P&c549Y6b\c.$RbC;s#`1J<dOEsPBXi%;daNm[,m_n:P/!d4Lc2bctne`1Fbg;Jc;;d&n2=uY;/H<0kZ-69JT9sa4iL@]W^Fgf9[
%pM@,49c-RSbEL:g@9D32*K8pjo``&B-:BOIHeZ_#]^98;GQ*p.iE+UT2Z3R7')G>ApPC2.idE*dk*jV4[kaiHDsUMr1q2?sS'I'+
%%Nd6A+3!pU/"o*i!K/$+NSYEak)pR9)Aa:"eM<*q:U2MjG53C_+ARKJMl;Zh[Z*!<[uF#!l<,4oADgm:*pEB"k>iF_b2n)YD]<,*
%qZ-,qa9ptcC&5p;VhgA\,R35J7AXGmC&ACu1-f6p1HH[H&.CQOP,q^'XBM`&O'2]&Bc=[$."=e(:3:#Em5W?Eb7k!s+!kr`%*Js@
%?TFe^O5Ek?0j7U6P["$5Kp_=XUXle8TJ9Ca2!J0;n%<u;I4d;!8uJFA"dMhCpqgkB:WDKpR=F-@%_ji)&E,.KGmkhcpheaST>3RE
%\//T-?b5b\gp/e4KDY4?baH`SAt'/?HVM,sKj_a@k%6OGZ->R5Or8(O&q_hRMP=a1+$F<(J&oR*m@gg#l]^niGMQ.26;K[4`Ti5h
%(-hl?m/'PJ::orH:+aD,R@378a$$%Oo6`@?pC05l#X+`(^AiK)`sU&MBLVaGWe>]kP7'<%Pn-AYh$j&3+V/Nsj<V5hjFhf?`AjK"
%&W2Au>>3&HXTZZL+>+3c]R`tXirTh5%C5njb7iri/3J^@T(YA\/546>F/JX#;rM&aqV?&!q"ApR:W`KOrTAf/d:Ua>Gfiu&)J0MJ
%qYe#,knb=XKRAi$\+_]69851VA?RNtn&""PGGa\Kh6Y^9cX(6IKYVO+3pVI?0HjOTl$5).KHapC1M;gKLEbb[#Vpjg4iYQ)f'KNh
%ZV?S^?%=X!U!D.N=5p^/DWC@Zhtqs;e+,iNful>[j=u!!kNqb#I1t2uNLV5XN?95OZSuob>TCLg')\#PqfG#fB[S.]HP>R\`+$.s
%kTAXFn67h+bT7<QWJec<D:Jo3PNltb`l(8\Z`P.0@5WPt<USc,P36Z)`Y<=Dpl6llhm'KO9FE1A1;C*hp3hTLbLO<oXu9S[DXc+t
%mfk:s+D9^.TS+It_KVX]X(Y2E@pEX]NW6PH7Yk80B,-D/7:TBGE;jK")Tian1r@TnX(Y3%8is(e9WB&(<A\;&NUKcm@&Bot&W2ro
%;pgtaB2M@IP:/EbOdGPd'J)E`H,%3>8bd""ZM[K_Vf,W#R+1o32sM">oRl=(YE<Yk"s;<@2l?AP=AW1"P_CkaApW>`'d>g>h63(>
%?.&!)]aF5Z\T-JV'@&+%I)0[nAqaC%2p:r-q;*[[qtK]q&7O3Bhj]@JD[Kk64NmN6;oTV_+7_?bpd.e89DE**h^m`U-%*%Pmu'1=
%4&$%=PW`o5)KmZe'$7W(q*b.VH'md2DaA>d0>l\R40nlVZFoGU^H@eMfpS_nUhhg)SIpA7X[/.#R=G(p)o!m9rSj<--I%OpSC`ET
%YA#IX9pbGY;\tf]Y=XkpUcYbXLlC<I(jb0`IK[[/9'!T$pc!ZpaqS/O$`.!im]`Sb>$rdQT^lC$E>W.3^)4hBM&j@qjie9?6=uQ?
%-eEGes!m/1/3'I;GKP:PT,`HKDV0/ZNV@!j@DjqkX33qflY;j!d;#(m_6hI-\E_K=0&r[%$ZX;Ulh%mZ1?R+6CN\C?;)XnUX*8$[
%^ZCX-1r+&R0"$+g9IGd?R.Q)fM3.`]mge$diFl]J@@.ml!00co+\F`OB!i(8b]bMtADeD?:Hih4PO76oa^W\(6C9^!I`po%Kh+YI
%O4F9J[p"1"m4$SGC&SH:2m$8l*H&oX4iW3NUP4ma!L^>lhSY$d(F`f!;CZ+H8r'+[7>>Ze9I%J#kWk#/5&nG%$&AX'(Ju1d,nZoO
%1+F$>BDi*'Pn,o.W`i.J$q]Q$^Y/Wt+%:].$@#fdKihr$o#TmiLlB^q#3!TkUga:;r!_O=^l$l&3[**e$ou-9<41aC_lQE8Ci#+o
%7&KC*ajZe8B,3t[C5+M@[GQ\S1d$kB$?DX,<:**LLEBe_YnHjbjbqeePY%n$L=3.pG?@eW';[fc4&Nj+1\''(Vts8*CkujDZb7cN
%CHRfq(M,(^SFSN(70sPMJ!7Po@DjqklcX)tb%r`RKIf,^[21-RF-uTRB>b"=l.h1pSu01L@>O_3`LQD2(F>:s-J]tAlX#hH2!m^<
%6d0bZqLA&cc$.rA'2"Qtn/C>OjnF4D<i@$F1J)u/kD+F,62Xb7`ehN24k1*,Y`0Ih"1lmtg>q/a!iGFrUA`(J&<;GcZh(HtIb+f*
%KrI'3NCW/je^K!7Yqn1+pYS!B&2,E'3P(WR)n2RMTr'V9pFeM;7I>V:So_#kkO;<;#b.D]SQ6ejdK9Rt&oN%7hGQY3q;X];D0/Oh
%kONd<I%I%Pb!KH8ECsggh<B.LOV=L$e::1TlVmkEUJ=;Jfo0@o<Xg"S$X.WlHQ@M-bOm$Vf40r=M\%!TLsBo]m0!8/"Wq.Yc`n(J
%6iSqNqFCMYcf;4gF'>JCkl%m5/hi'UQLe_srIQr4EY%fYkhEd@TK7$24>N=VeSO!;#K0$Ui!6gf!<9Yc@*8`K8?+3ga?kPOb).`i
%+ukZd<T.M.TZVj3]DZV(fRkKbI_oHIi91o_r<YFq3JlNU16K^$i8b'K"u&UPi0$#!9i,?u20t@;#FUi!A5S4Ha:]!n"S`)s"32$6
%+Y_hV"TQ9H/H'u`AV'#((=FQYXJ3K4:1ZC+*%3@?L*7(0QBr0oqu]Df'^d%g+,L`2![Z@Dg6"=1Ze$ufFnsH%j9F;\Z'_9fLUeo8
%DTXO0-Cbf=^fa4ebqCW3Yatdg:VI8-&J^lN,VV=<Y,"B@"I\4[L`!<$11WM'HXoP^EWDrCEj;`eOZiK%"s;^3P0-<(Pa88**2C@Q
%&J,3qO@2rSi;r-?F%6jG0G=.OK+B`c41tW5S1"G(pmHl//ndH9bJ`H=f1bkilLk;Aq)9#d]rp9js/%RQlNK=Ppt72Y2B;#^dHek=
%lUNb@FCq(a+'q(U)EkmX`TMBl!::?s%)aB`JI5G4SGmd3#JaXKn8Ad-&'aZBUp0XlBoKIp]X$&P56!;th9D)0(''(:7YY+g2Vm<;
%DpPGHKcYb/qDoRG"Y;6m]eFYs+cL+([>?"ae89d;c?@>>F(D_80Hm+hUf.-bN;,5s?@351CWe,[fLl_%#UA01$QhE`Ekg@MR_R6%
%9E^VfF+"ul_G^bL^SL,/<CJjX#)lpJ)@@HYGYS,qm%uK55+mBETBS,mDY;>t?f!0H9Y.Z4SfTgC$;>"/_DLUT-k>nO08+uX$Ertu
%-LdcZ$hlP4KEUs3YOU)]E?e$o\]G=W59U.U"@3krd`@"g6K%$[O9@[?g2T<OVr[J8oQ4nMHY4?L`04jG1@I;!9E9W+,JIoE?3E/(
%&Hl4g-3B7*feY*#[/(#h;?(EBjst=t,a?SOd!3q\VRgD%-,[GNgO6\,p4"\YH[[njRqAM\['-F-K-r=F;uQJJ<-.meOb.bL7Z:*G
%j;=F[U^T0t'3-,2F.Qgq5*`RA,YNdE"F?5k]L4)a)jQ;A$o[(Ad;9<#)7J'92"bb@l1o/E%O,)kk<pq]DU7ZO^WaM;ZicVR&Dfkp
%/WfijrEc;NEVf(sY\KtN[*;@ACSBqTq#'8&Y4ObEX4oNnnBOiaOAu>>UF*F\%X]m)"GF1]Gi:t^U<&671-EF*iD!)o7fmnIXF;F.
%aVVJ.$(UQ@/4U.2&sPk0,VXoS/+Eu8_32ZE`b><)\cn_:Ck0(lNnH9O5Kl[Gr2UXU<NMchZ>?T9o::jbE3ELQnqqlXU'#]5bSCaJ
%)Q+CFW]m#.5eKn:DV`bpU_Aju'8X!P)e+i3_cab+"tDO*$g[EH4`\S4X4B4EAgHiPBg!a_\E<oI"2*IIWL+c1k.mur0^X:`#GqR?
%R%8kG(S)V]JpFT@:>)ipDZ\9B6kLb]E9a.r-&i\h!WV1O;2S=93>eli'`fY"&=XINDlC>%l*ehlHt:hMYde?0[;pci."D%I/967A
%@"D3K<tCsqSG*Jk5*9@HLM78bQD'BD:'<as/^j$/S;%gaXKY<[:"#<KL3B6aD4AW@$K)+6"O;`A^B\k-"DHJsg;'Xp?/[GEX>M\\
%pV"_r4ZZ+k'0jj7GnI9n)!E=5G;_qbBbP9'I[HZa]L),521lrjUsO$Icu.pUD?5N:7\Do`!E(C/SVgPfU9p'U;l:Eo:X%l:i2jIA
%j<-NpC+]Q'K+-g0`oY0.J/@Z^cWh5%Jg.il0e6;>8QkCiCqu=snqBs?K@4]EX[1doTPjYPT;ClliA8PW=WDt-/nOtgb:O`rgM"7I
%&E2#k9C$Pu.3At4$d!Gu4IkZ[LN#[hs&n&a,+-[nL-\#`fI5#9RCDV)qs1F\.7og\&.$e0!E0qj"fn3g6p@5t6)\\=C6np@N=g,c
%>f.oFl!kF^E/-mgoK'e>Fh4H&[W7%jRnulqT%ruU?MH^+8dDJu';61p;2kJ[\!#9W)UOn"Yh7Cnm96iY/AVM1WE,3BK-S4ZL[\$5
%e*+Mu+%Ca!pjUft%NR->^>!nj=h(q:MELA@I-%`n^Q)J!-NjXgNZ)d6PA&F@kCM>r,%a\q3=MU!cV@O1Q"D9X:O9q!L#=R'Q$7TW
%gTEA!?t$O]A'qH<*#2i(n0*Pn*ipD8gh5UH5jl9qrE$r`cOH-rJ>J09MSLRh%j;$4-rs(u_FK\g':;nM#([&2rbt[Bg2fe1-d!Q*
%(p9/GFGI_#iRF[!Hk%5pi>&#E;"nM5nPg(ild4TLe49-_d]Z0%?iU<<'pSs[*!RZM=%2'MSV9&1L'5g']cNETa%udCHnq)L5.PLZ
%E.`,uPR2o7Ui(jhXI*:oef'hi%X"$_[m9QLQjD->>4s@7NP06Hqo"Wb5:DTe,hnl#dn^rI!\$2_YWDDab5E1u&CcUF_(&J4Wu*2p
%"n,ER:<*F`YS$Nm6QrKQ\u7]]?[c9k-s56g>,0XS4E2tK\IQ29jK]ranb3&$HFetmg.9"$,:MrFgNNDU-XI;cQ!<'?[2Au;5T8tm
%C`cR^6tRD*&F=?:59g.[OCeltJtI@5#hF\KRm'h\"GTtYatu;5"ZkPIHG0t;3Ut!e+"SBcZlJR)T.Kf5JBAmF0LpTt"62*D`'pHZ
%@/^@Nb#+IUkCr_]almh2'4<M7TpD_jcomi#;8DgU'dD_50F7dI@hJj1`akGW<Em.I`?+"<0MoA[F]tCu57#m.QTUbuLInNSaRs<U
%6R/$P#^9^1r0bpDad-'c]]YT1#R-+e0F&\n6P'e[5-5Elfdn,hn-C$%k5\o!DLa:Tr/=hkb3ZsE64;`7o4.!/"(:[Rhu?b>)6@3?
%e`[%<cFZJr'gD]#%Egbd!P/YLmsU?[*"Z207Y$'on+0[jU!*dSjW?`KmIFm2#=3Gr'0h)IoKNY+!(>Ejq>:OL5+\IbN/1tr!@S@9
%dBOPYK2$oS;ItT?:=8T%R1bm27$%NAo59@1$%Z+RXn$,YLk4@8M5QKR0gi07X6!Wbp]PDDVGhB\J_E`j@P8`^aCQVtQ)"O!-oDKV
%CNo!HEgZ%j&BkFYinObEOO@LHq6TSt,:Q0]=8*?U@!P!^n<%+tG^*r*35#):qXsElop9CUbtcg]7RLc^b40_h4a?!!"?0L!\"Gs!
%iKROk]oF6C=pOdg(E)(2nH3jkRa[TN_qi2Rp>p&o/:DB9jnQgLLt+gL@i.+Z/VkR.L?/hWeJqT;ODqWV_LG8?^pa+gKQ0$bS:gfF
%71grXHrba:=('rdN`IfoblII]41=frJ.:0=qi`O''IE8>&jS!X[.-R3bPZHbqEi#Hpjtq23H84t\__=pB%HdaKm+%;]DV:E08^dF
%h=_iH#?2'BP*E=;$i('3hPK8Y0jl^?<q?I6Ag&F$kQ1'03oP'LO/gtIk_pGoBcVfs$Ei$Tq?@VLC(6G,&ue3R(gN+UT\rmC:cW)`
%k69.b6GkN[mpQ`;255H0>X!nHaQa@"2O\"H%7Cue[1OHQ\2/f#jbSg3j4g;0V-uMKr0$Fn!>ITs#nbDsF*WPlE'^-$EiVdq`+])"
%,&VhNjW_PY\e1@.KH[QPF%EMX&h^c>&-suOL]iHc(SpQ>&?OjG''G>?GJWZk]RYNh5Y3gBFl=bi&R5?pZl6$V;Y<SE>Qhan&JZ.d
%#fUo%-]SC"L`q(h=/_gSP5%SPPin%l$%[oT)iC>n!"]C;XGP>XjY%l;6k<E$i3u,H@8NW(51),S6N0[EBu,%/.M'!Pb"b)c__D:3
%J<reoP92>3`!9kuDRj8b7ob`SDWi9HZi&/X?'mM''n-@eK/M]C/6uE@T:sX\IThQsQ8]@$*;Hptcb(Uuo2b1`\BjoR[aRhFjbV7&
%*P<s$_71_mLi^?A5+Vkp@6``*!eM@^4pC]4fH[HYXdPe6cioO.Rlqc;dMK-$'4rFZNmTY@omX6s1+[d*2B\j/m$]>Q0%-T0;:K7V
%3WMUp8&_aLp%mANWRU>njW_)clB>Z_]c[E;"h*cF/l8?O?]aKUfSSV*#DJ*iCuH7856tZo8^KB&OQG.#\nIc>gd/UDVpf@5NcPEc
%md=fb]]848/YC!uDM3Gb.YG\N9Gn,B5BjLW"R:Jp6b`$L\.:ps@<+AY=3n7:o-92`Oi0L8GFXiD4#VPVT">Y&C#X)qr#FaiBDN7X
%LtE6g+cL@q:9/uLX;k2iOK>JD-2([Z&%t;YDE'q&hcnoM*WBS>e4BTp>X6'7Qo3en_0N[TLX(+_&%tua*K$J&2;/lII=@<i\`6U3
%6&klT:3%&<@6sOV]D.gi;$lILWdKB$Wr*iB58`N,kZHaV\j5''Zgd)80=X9IfBK6))';uCk9BnIMreP]"Up3P/`W+!hO!")`Xh[:
%Dtbfu%W,VRc\cKVS=f;$AAuf5ZT>`WkFcM"41HC"cm_E/n0rZ*R]Inm^%73fUR(noZ`OL$Z?E^D/3A8p7j9R`*OH^spb2i^0M-2;
%+"4V+N>?q.#;^+6lY3'S?)q=.>6Im,O?#9s`%8^4Jt?__..!NWh8d"-\!K%5S$bV4kq%rlFnV9sNERiYW(5H?Q8=hhln1hqq`/A>
%,B^Q+F!Bsg*'Z!HUcSI[XQR),AW[^\H%tQq?aI-tAg+SXP[$q"XgPd?mLco<VFbVG7lpk=Ya;N[T-'u>"LF2p[WfmIA9,6SDQ`$B
%/XTA[lAHVPh-Mc3qNr&d&o1\"3UQs^kge]TdX5EJ$4GJM=*s`]9TuS6LS^]>/]_[,^,j#Yd#+7Pe]5#EE#Xk;XbQhBg?9lQna+t=
%?XMKe<5CDI?ht/7L2?PQ>#*g$qduUlY4j\oq2Po'jCKcEArkhI>J&)1GT_NY2tL!qEkp)N>P=_1&5=O:f*/:<Qu?CYDN%109V]>)
%`65]sGeT??$dY;Hg*49G:S4f'`)E)c90HeY=*LeWkNeW!ZI+1m<]jGHY2cKaB&/P1f##UbolO;-gP`\eM,*uBY8nFFhB2j(eE121
%#Lc55=-"f4<F0R_[nep6jlXIh--PW1.^+!;#Ah&X_0SJ7Z\R?e^c?\nPcoA0Z=.=q%3T3TA:#W-Au9E*ho%A,*\XBG#@$fO\M[B?
%c^i0!ge76#ElNB^Dd?B22n7<6,8td([0T=WO]LY==RN#$l+@1&[?GLHUkGeA=-[9MI@NODXrCS<H8L*&J^[0Z`"O$mJUhI%dbKD(
%I`-I&/b`rE3d6891MaN;4;rFe*<6P_@H'@1\MZ"O>MF<+]&);tXLt,g+_c6>KCR78,+/X#V%5^'*dnaTQ0eqbAI>A1N2Er-Lu#l&
%mL%C5oNKh'g"1JW\pj:;1Q:FLZrFV!=7_>/QeGRhS^1=Eem%G,EME`88IN#HB?\^aWH+>PB&cs,iC5oXZ`i!,)=(:+hlJ^PCO2kh
%aoWXP]ZBY4`UP<T$?+06mHf)j8C,:*8!lAkf@U5!$M<&ooD%a=nV0WhOVB%J=mXCI`PZ$^4`LSJV)UboERTc-TaJSec8+ll1:b$>
%@Z>`fg<DDL6]+B[Yk>;uB7Z)EY/SkMqD9V(+EM8U&n,2@fr]JqLej*NRT5-`HeS'7MtCU3hVNY-=/nb^NS,f<ENt4q/W<8_,?"P.
%2>*62Ft?RY/fM:qEDlQ(("g@)K:GXZ=+Q6t!nPn,!lW@(1:;G2.rU_,0/WKb],m2(Ic%jH$pM.e9<=E.@:E(Qk"u=VUD6QSEStYV
%e85!V[P81t"A6Mth9&`*4?8G\p4SY(lI3rBZ+RcLB>lqb^9dP8T=3dD#3[O<oitO^do,2l$Mg8=]775CB$IKnZrb_[]h1(t\#p^Q
%=MIu=@iWJ$!SY(AkEOG^'(W_Z;6;L(DN@G).=PNG?"Y]m?/CnJ^.o]\`8&nf54RiEL82d5YGZ-i2pgHsA4o8f>.\#jGCsj-g-tPg
%<aP13(@lAB\cAYu!LuMh/)=<A>Pcnl]0a()]8K[AAd_^F.+c^!V1*;nqsE*EGm;P\KjO#c21V?&GR'nS`&A4<<T(X8o4"0Ug\4n1
%jY5_d<OJ1Cep\qP5[LUD5<)tAZZl@\XjA^.r`K@4I2Zd5VE3gu,qLh*:p6=WO"JqKjWe9,/_0SKfQ*^sbE`rGFlr1:>6R7G.IcrA
%^m:2-=nh8LD$RG=!oV%2"s&8/:a`heEZme8'78YI5EC8fZcljQP%BY_C>Sns?SgW8U4JA/)LNANk%Njga8HlK(Jl'H"qSGp9[V<3
%">T%/kO,F.Y(dK5'-;(C+Uu[:D<63_HrSP^g"tBt!4gkg+8;3g%3c+bTNH<66%gN0+na#=E"l$!O6`N%+TbEq?'542QS:Ji"9q/:
%Sej*0&8uT%2!;qbKL.X#U5PI)Ta0WYnH;B:LNgq>\6Gr`c(\A21nUM'O9k=`%,O\`Aq1uFdrQEQ5TH4>5i4Z_m\7at-e'*Z=,;l4
%3fkk\k+22t]OJ:ee+d+&#')FGgcrOZF@YPi1#UtX"UUd))au8F(6%E,Zqh.qmS;tAo3To'Bdr%+2,kOd#u-&!,5E9Wr;E*C&n!N$
%aSe5pL>WFk)4M&o*$R0eI7djOS7iB*Hh^87+IF'<R]j@K=n%H#TTQT:i2Ik>R3,?`9WL:(Uujupn7cS(qE5+>G;$2f,Cb5(][DP'
%#/4FNJ3OL>6')8ahCL9i"$HKPaTE"V.s+V6I00c6J-L+Zncta&!X_P6g,j3mE9;s`E*S:t^>N9M!<(,/0LT3sMH<;"0TDZ-2N&\6
%WH.WgVJ7]eT%B"qQ]p/54h@)`1M1>g+TY/D!JFP-7d>=!ZBhbeSl<1?j)#)U[8b3lp@9VNJH=9)"H8A$in)'\0SF2LQAFqf&2eqK
%HgoYF5^LMeeMD?U]V9$'rJS;SdEu0e-7Sn0C)=#==fUu@.=j=YaTeZ"UJ,=\Pd-ji&hggPG]nKfFq=0+/,7K/>^<H]SsIs;"I8>Z
%ku'*KY3,GW+L$+C=+/r8_;^)f7aXg53ZsuJq7(2*%a7(#(un'c4VQ-;ai/l:ED(i36G32b\J0qM#/]cbO@t^M^77h>ic(J28D'OQ
%IR9m`aj.UB5[?!#gd(;i0TBQ0+KO;Freio&>uLH;.eMWZ6,R7)5q7Q9J!'g"5@fi'dP@15<_B!^mT7m#MiU"8\MK"fXR,4&i=j?s
%K?4c^J0!l&R6>e[N<.>8,1'Njns+W.eBT\-JBe6Q*Q04j!eG(`/-p<>8!6n9;qOat;XJoU>8][@i+\copDSr:0XC:%=H+b^UUArb
%H`j0EnP.sVB*?_o`uehl>K^\\X^J'dTR6'c/RRk9EN.-[l=SYe<>4l&+UkDOq"6IS'R,Q49`6-G!K_bZ-7\MP"9^*5dZ'GMaIDa#
%_)%;bR)V7b)r,Vd5N1ihZVbGj$l%58FIdMk0;\?DgdBL/8CjCS=6K6]X8g$gW_EZ_f@n+<]crf(&(B_;<1]$(2G[U@qmVL;q.\dp
%<X?d'lW;q=$CrJ4DY-SIk.$thpUY!Lk9$34VRT!*+$)9a?p3')e1ZN8PNuL2_^;_%q#^08$r^.^#8CHVmIYj2kbf<.HELOsUB*C1
%5ABEF;8PCl'],"=#0uA^;OtA9I=3u]-32Y?%J$d38dh_#(V9ScMq0&RHto_Se4O#=a-S^LnU^pF6hM0fK/=X[lOSk+qhaZJBD#i7
%?fn)n*=V,!EF:3HN8]*S\Ku<[[cFTKUWf,"bGGAR$tU*ZA-s2faWQ(UWYqjQ8_Ik<*lM0k\'2XL+c6r;f'/6B*X1jiZ"0H^b8f1@
%C4fN\Vg@\fhp[U'fa8MUp<dS#>A:*Q6j6ZSZIS&B-C`\\a,Vq67!FfmIK@+^?F-fD`=;EMa`L[nT3kCKaU8lC>A3i;aN!J@nsFcQ
%>.b+(f:o7Ro[A],K[i6Q!tJF:=9P-j&)\?/lY3oXqOJ@[Clf%>7n!Z,#sYQn`B%]LJr;XDPIL=WR<ptF4bI]b'De;8/6@if&"9_s
%Sc`&=X[(R4&A^edT20=k?7oe"Raumj]Xg[LkH"EIG#=4aH]*63Ek9(f3ck@S(RXU_m(rYj.Z?VF&.%dU>6Q*m=.q?P8o\R=TKgaU
%h.E^<ASG@O=N_bg`)cet`sj\:M[c<plJ,uoThlgdWrSI9Mf(/].TOlBkJmX#AF8RP;sJ+kfCPk'#*Q,XV;AJ+OVWks7,Z"(PW?82
%gN!Pgelu*c5'a822lu-4'+jB0_8J^ehX7QWP>)$VN,Lm@pCEmI>cl/Hjit+4OA5<qeptp^X9<F2ei'YcRWHLN2^u%96.@"NR_@6_
%#l9FLbr]4"mt.t/UlGP??0PrSF.0Yn*Dd;h.0`JP\'p2jK;eY6!_>BF7R`@*BM9$mq7;P<k7!J?&fBnr,]2jcqcd5#=S/@u=--5L
%;-`F7EAH,#Jd>=\37D%m#L5#/_MWR"PhYIpFe.(.2KD<ec#fEbb?`&p<`5KAg4p_1V9+d`;`'L1ZC\ZaHV4HG<F7i271]hhh.f^`
%Cm>Km+I4:169cQ>oDq_!#F)7TCeMFEB`UY")d9DCam'$:.A*rsoBm3nHFin>cg)J9Z)2/3[>Y!;D>$4nf,NF_&8h(T,p(#-6f6&[
%.#`[`StAYm>ar-cddB4r`DqDH*#DgJncHCeYCB:t=er%l00%>0Spf%Gn&TkQWOKLa>>J3\n=$m?]]*l?']aBcF]C$eWPNeS_gXLh
%;+[QA:1'\];o(Qj-q\Q,/)sr0o'H'Ej,VS_YT=!:Y\^Mpc)2ApCK$nZZ%(?NmQYj+fsQtQ(P8dA_Vuk<b1jCIo5$pEY;bWc?q"kd
%V&Poj$Li;W+pd+ale-$X"7eaTg8%F4T_nMi\#;fX;P!W]?FK-@P"9;\(C96,$J*U.$sp*Jd50<Yrk014b-7=^LuL%8iTA["33c?,
%md2Qo+RW&P>Y$JSh0$Cs2pjGeQ"ub;5!XmCP;Th@?nTif%m!C5FX<o@S]tp]/FC,cB5F"Ag%]G0[C+JTVi?jm7c:5N*m=nWmb45=
%F"-0,0l_:F]`pPX%0Aho53Z<lkR'2F+1H9%Ym%"",\$r.4^HL%27[\#"$,0!2+O^]F8p1t_#5Kh?jpt('bF>![>gA0&(]=k;D`>!
%Dj](00_U%jH^>>3*jFa894PJ;r>b%O$^3*uG$sa+:$oFI#lL+n@m(,KeD>&b7MeHia:[;n]K;o+"P06dZn80k:o<2XT9\>g&p^kq
%rPlfGU:SmKW!S\=:A/0kg:#`hK;nkIFhEqh0jDhCK^H'@_C%1p0]==DH$jIGT$]0\j'Horm&`SUW(,[^gg>!H1eYCMSFd(BSS1O>
%.2Vl6&]i`+`A'u_2lk3"-'6rt8hf<3KLc2B_$TVg\`?79pB$?!lWj@(3=^</PSaU[0,>eZSJ,Cl7gi^J4o+?lf;U?+O3n")i2hVu
%lO13tB[1Oae"$8d(RUc]Sa-)E7+1eOH0c;Y0W46fr5P$AlOjd-fj:"q_j'MPHrJ4&b$MO^YNmQt(H>)nA_>1<GLP>LC')7*@eA/3
%DbW1-gb#!]f@ec?;S,E#&BOV&SK%GK#]uHYC>\A#0,tCnSCQsee]FlA+Q\aB=LA-\nUdpAC-^5UrF4l02+HCuAdk"`a:+FaS,bFX
%k!5HBFeTW%;F!.Je^f82k0!Y5B2(rCk?sf.%4E)rS6BN.BN-J0e`GhV,4B.;1\LXf*)>.-F/c9_r[E29Zo.#P#p8NEW>eL@eE5d;
%#Y4"J35_l3Q%@E!COg!+g=@lmn_/3/^`OLSWG_'7/ph]]_^^FBQqt2H3EWR=+b(jUTDL2?QeB[86tpOSXoDd#4)_/[O=%*Dl!&Je
%eO\"`Gs:N0pX$'=laf)HIOW"%P39,aHNZUr0d@JacIQ<Ki@.'h+I,R0\A9&`q6Z]#MgIC,2_?/A?J7(3@?AqcF?rfSH0j/ASs!ZL
%4=+0H7H'f]R@\sU;I*('"6j0qBWY17lhNPU8H%Y,CSE-&haR[E$''?9inC:oi8O&IE,k(>i7VnJGUXGWp8O&$lS5'FGo\;S68lS`
%K*A=#F>[Y<]gmf,U`t8aQa_k*<GT:\[<?n]es*QE3965[&/,OmT3>!oJD@Xf#@acV)5Xi5qs[3sm1qI0$_VW+#F5bhIabfM?F/t.
%f0qj#3`b\5VLAi!:Z?O'n;DC6G5phgRq)BtNJo^]rSW"'\*;tr;G9cV`+#%f3]N2804UW,=PuSS#$S]ZQV6*`[Bsnt-R]_6T%7X[
%1##uf]-#miN88?46*GeACl8`tkRFo1]ij'&ChFilgNcEI]R`oU&([E9ciIP6Z)I9WR<klra<'!%l[^a?iQ`P-op);ZU?1jp*/_:X
%$G,[N/=<2i\Pb.0qE>PG%6aS/N$n<LW7"Ct.<d8A^nBLS_>;AFc?OV?dosB2]`,5-a?b`/a<!gO%#(7e?f:`ooAFHb6JAr[/-0KZ
%h$kHW_RZi0OK$(k0*Z$5TSr`r`r'>&9iPf>&_6&hmNeq:",sDaF"2?SjdgfRg>u4Z6+tLu0;u;E%_up'(A*ed>-VE%5qN%Sa58Wh
%gmFHtcQ*L34<3,cW1h,AD7%O'NIr>>YgdL$@)>X+hHcO3.gYe(8H2.m]R;uJ61V?6LXBclf2qR!l0%9tc46IP5MK7j'4:*BV[M%=
%q."mF1`Gad1XRLWs!"jjQKkH8Ie)u$3P4\1oqf@^p9.i<U=%Ud2B#k,Sr6'>%cM`-Lr['4?iD.7-H`/Gk6EOt=QmPm+MW9)g#-9.
%*.5sZHg-d*LG;u46NAi`p%T:)#Kt<SBC;UDE!Ur2U7Z.+g"_9GcS0>.Y.OdbQI/K&3To/T?tBfX^83:Sf.&b;D8W!MPd\&keCMEr
%<<tI+Z+&@Fjh]?u.I<W.ell=657sn>#UL*hE0+JT=Zp8<hVc^QpbS%Zfm-eQ#6ss"`ACXLFjNoXN='Wg`24%F>km@Q049P%3j:>N
%%V2Da/]f+'Y4CiM6s_CXFb+0uYB#0N/!%6h_T"aoUpHFOlLRf-CP\T:Gt&F&C\,q7QTa8&\Eq*2#4llS?MsX'<4J-TUdM10'be'#
%>V;I9YLf7*E?Z(C*I].t6P3X*>nO4tmVjCnG+f#J1Hu+i*IgP<YWHM_"JdXl4b<<]7=aPZTSUmb_3oo`+(6$9:&;N,X7-Xt8Tlb8
%HZu/h<-FVV\b14K@C23!]fj?@4,rX_P&mt@Q[Y$&dZ'7/>3bM+8lHYi%snNR%?=,eTX*'l"(&Uj#6DZWR3Wf<iAT0`%:JVE/<&rV
%Gj\ZuQ2$&^q:DhC`o0cO^=2Dh/sfas)^L6>^qFd(KBskW]9./Y<BZ>InF`Pk>`bHLm,\42-brgNT)iT9ed#(CHkj`o24dRAkP$A?
%J/<9730:Sf`DXK%WK5D&k0=LRgrBood(je$F'Ni`@lk",c*ZP$$Af!ORm&jc)&0/&d9fG4ImrO1Ca(pT?>`6q.f6EsB_GU0b1k$+
%UUu:EM!:E[Yh87$>VpVMo+kWf:fidbA*F%+f6UL>i@j,e*JO;8>pntu#i'/%4I(Fh*aOZK/Nmu>kL[#;d02./MD!&eMO1ct@!3>l
%hI-&O/%bM'1mTXOdFG#:A2Ja!Q]A4S4^CJi&%U;*ZBU/6f5&r\P\K:+UMO!iU\oLX+j0O4V5Uo2FVpCpk+AA'qqR#XW=qIqlGA!l
%j"gHFh(5=FD+;"$Y3"lmcJ_oJpM(Y#n1?O>9lI+FURD#Tk@eb4ZOk[YDlMt"@f%<pE7UVA*[UYdo[m8nNh5[YA't4;F:^SgBi_T[
%E$@\'R@DC`<W@1oHK2*gU3Fr<E.*U-gg&"LVfV_YqGJ$ZU8=oK6F:d^?AMW443,a[A+ZLT-"]Bqgphcj3bQRJkZdlZ/_XFhp?/.T
%7Xo<iSN`HG9$]08Xjh8AkMhn8AhMJ:I$nJ>N6OAS4_]L^k/>l2_`?h#H"Cl7U\-=MZYXI&V)l)(F.)kn@8;;5''9ZF&+$jeL]+Qi
%Zc\+YG@@,Qjt;!^`OT1W%.p4GF*#Z]kjr&Y$)XkC*cQ2O,oE:8hgV)2kEQ-/9lKi*R\)*P(?Us:h>2NC.UC@J$I\o9bMOf@iY!?*
%=.2U&Id:RO3hO!.]pm?>*hLXF(DqT"pq!^nT78g:k)6FtM>>p%f^es8g7Fcmnj[9KX;.2qYM9_k^Wj5?1A1J2P#beS456ki/?`W"
%$h:..q?"!KoXZ/70:N@7_t2X"c;?[7ONFfO$i@T&=?).EM[L>:h<fp^jMp&n_tmA^_:Y-i?`9P9eJB,Wh>TaQ\!L?YDYCQuU:t_j
%HFt*`_sJ/97VbldC%90Ee"rVS1fGtWma]YLM^M$LZ,M<b9J,,HokkP;m)IdhjjfM0?_:]rMsY8i\J2.__U<J"Ek[cCC:9H3H#@\;
%,L>4"V(?He9XD)R>obMfgb`2-`ML!0V7Z?4dZVFK_G\Vmn!@52lf:r.&\D@Ul<Yj('B]/9Z>fK(>i%U#Hrs,c3Pt@'=eW-kJ(WF[
%^:%(rb>8*5a`:CmNA!5O&"],7N>10l['I?N*F26;eXI:FPr;[O?^9J?:>`]e3<;<aV:[7KXZS]_jd!tsqfp(T1X\lKI5DaE:7L@t
%H7#5EaiDF`Z/)<q1:HqCmDe_=7O<5!R(86j374Lg[8Vb-`85<!>[>Rf`E/6rp[bH6A+jb^G@,$bmdghKlM6TQXPQ##dqZu_*`a62
%j8E`=H+o?[@^X69V`<#mc2G1N4Suupj/6Zq4+;Tudto#bh8T0TM3<hljt:0uc.^>3I!Ue$%o1`b'$gGZY,bcBBBARZg?iCA?Rrn\
%\[?%KELiJ4'cW"Ji_DTZD^;]CG5?BQ33oS[i_"UV'/'mJ-](=`U7UT#m[.NII=IEEQ:c<U<H#chP"/S(f?()RXbEQjFLe$N%pSc(
%g`aG?T")9YXXfZ^EBVe.Ip,(kkjdt_Q\SB&5TRi:\,90]=]s.\)#eQi_<d&6c5cQKo?:2dHd.f#H')flM:ok#'j+(;g!eS7]3U6C
%f`Qje@4rXh@nUXX@9`X).rOn%dPu,k3R7"O3L`+Q4Pb$:X3!N-@MWMBm<F)JO(A\N?4p^#Hq&LojR[C1AAROtMLRdl.Djm5)8&]o
%XS4Ji@=(XR&e8j?F2H2e6;K:R(V2r"?g*C;`bJ:KYN7ca09]NQ0A"NZ@Q@:q`4*-S=^#**mn*raZ7kJ,on$/U-p1-KHc;<-eCu9p
%og+[M2-,94ZfJftUDs#DLMOtrNjC3Z.r_aR3P/>#p@m=a;'mkCG<;:lMKP/0<Th\+SB@6iGr<9WeQ1";oe#jU>QC(nCoqQU>.<Z6
%)u<eR\?F`%NE`aGhQVml=YS+__NF5%$CO&*1Rh\<DAKR>a.&@[_r].7_-Cn5/+_b$.e@Cljm2#\/OOf>D7rs<?FCNZ\!cWSeOjZT
%e>S_CT<B#j[bHQ]^U(@meCiO#Q6(6FO&cd7T'oFI$LG.%p<mh&O_O1MS9>rtce?G8>shuBmWR<=RT_r1>>Jrg^RQdT/4NR'AtuIs
%T,npiDqnQ#Y&[aqY%uWhm<.*\K/C(-RT@c3c1Fl&l(js"Hh6KFV]:JYQ'/&GHq*.VG;=kYmk@Zlm9O9>DYfX"I!45g*hF[AfuNEi
%Q>OC,'QWM44'!u9XN#:I%oFokXYt+jjm1O$^:@QOoi&2:WL(nVh7`#ACjSrO-r50pYu<X,hW&)@AFD)klg-Fm;.`%^mkj`VlFEJa
%k,M]K==YH[*,)V0lbV\23HO\imWB"LII?`Ha./24(5he*_toY/F0ot2h`]]-Hb)8L0F\aV:TJ]PU3(:6\">\UhV7)-ZF5'a^UenX
%M6YI/P8u0E3@S9<grX>X1O9t+C\:V#b2&[rMt<jEc)lcf=n4u<4NfoCgtDX2J*lSSf3$=>F^mUbYkuen5PLaqkL%=bs'3sB\aqV"
%"n"$'YK!Ek`QELu\_-"NjbkX#IJ9I]H?iUp2jZ-)Hg;KE_UDYh?&[&l`/@6-GH7+g=?.n_HI^I*CADWD14=YZEHtVVSR6PtRuJrg
%Bq)dsWUH?^<L7a0f<KE`!7P1g[HclHS[(5!h5Ti'DP[6Of:0,Ab2uF#EDjN1^F[I8fuM:amGg@-gdM[QHFHa9hRtGBD)caa>jV6W
%X`de7O8.GXIH@H8o+9Y/7isLEf%n52WP.m?I7u8EBc]3/2bK-tkCqqdVeF7LJg&B'SON"I:R8Y>q4,+1bWR&LYjul2VB15D#m^Eq
%9T*c#4PfbS`kk%+_:VIf>oS!eI)5"gjNgJg(\rICWcF@XF]M-OA`^:C"f<^b]'Oju3BAiDdTZ%GEaE?=Q0-VFbS1O)dEHOdV+j%X
%Gu<\thoaKUl^N@2;,-R<T&U>rB8*2F>,1COlhl$DZ^tNB?IeF4Vdg#DYtaQ^EoZ"kSK>\aoMs&#%pfVSn`FW!G-Ke!Qg@?).]^[N
%mVCR][rUYhIG8DZk1i[PVjZ6g1n.:2Ib7h1;3tLtAbMft?>$^;2*'?2%eod7VdA*1C3.VPHok\[IVCn6.,6NJVS)8ODq>66>URZA
%bt]baGh%(GQ1qkp`MshMY2<g!<//(HjE<cQ7G@pJ.UIc]4,,]]rB\+N);Voa?e`i:Du#-[Z5R.3,m)s7bsXtPH<g=,5OL+`kc#om
%+Z9oj(--9+,TA#p_qm@sH&r2dpUcI3THg=qGm6Db]iQ(:oUk)(X3k_'DuPEgC$e^QE$"l#jJ'R]d*'0hCrs5Ca7t`b7gOW+F9/B`
%OuK[Tje2:aYV#^"["bun!<gt0=uG'ifZ6%CQJ$hu)fKP3K?lIo$@?2\XFAcV*^.OIHiPr^JS/BrSk1X:I*f1W;\dXU#(3M%0D$MH
%+m]J$2#-_i@`aGUS+['EpZ\St:p1cW!5#,"G3`/!#,d2o#6**:ILSaFDos<;*,-0EIri'f=OOPG?fK#]`JsLg=B5-0+qrh,J*R3B
%T*!mEpGTq\a4:d-:cI<;+?MBJhOWDPc3*9.SbA%D`ATfUJN&ku@"M.TO8`drs%9:B-ceW-8]loAEPSb)-!"#j)'#S1#XjLk"("]e
%PDZ@?(F1J%=lt"nZ;_tr9.UJ)`2(PT&X>q.S0W^D64s^%6kh)l$8N,1UnjZ^Oj"pI;7IkR_I"BSQBNN=9AUesOQ9D5n0]^cnK6,t
%JD_3MWC`BVNY"+I,5NlI%/MRHN/ANQ*WY+n19Z4Z,UUV=M?nc47?qhE..@gO9X:\"i*HJGHRVOX75QDa:0%B)>Z-\m0A)ot@K98q
%/7E'')3=p!;Nm9fWBQEd!tMp/6Gig&0rh#RjoTB^"'-r`+j_>U5>P)[%C-,tiR*oV]n1*/5u8:]#t!'O#\X4$&:KSPP@#1Z,=!,/
%+gESf'I6P1U/f,W&.TP=AJ?OR2$-r,$-Id06nl&!UD<m_"__>..NCR'3_Bh!%ZgZ+<>Au@#YBU+?&h4Y;Ks<["_/n][OH#jifMC7
%Uqd"K_1DA,e-_KFL]blK3'>W`"NtdV:12$H*1.Nb#+Pf25k6dmjVcDhnn=s&$LqNmaMnT<BU8jaVl4@i7Mp@]ifRs`U;XVO;BtYn
%#Y[prJJ/-;,_i(V<g!e78i0r`&?R'Rj?p`co*!/Yk*!O>_,R(6*#?18!g<VZX";XS"rK9e?"F]q&4$pS(U!iX1$t<8P/p6HEcW6`
%`pjP+$fp&=N*m,"fR4F$ZRQ6Thf_]$#orF^!l5QE*S*^QSOGH#'A9TTeJ8,G-D*^c^_dnr6*gRSgBKVGPdVui,f=#S!u<^*HaX4j
%F`<G;J=&_)@7EQ`0b*WW:!,!X,$9"SfE2pd&=/-2%n82`Js96-CH[,2g4/:j(s4Ai*W'KoC!et,1'c_WH'.6r#E,GI_BjGWYQ+$b
%+J=AEkX%?5@G'qErFWmG]R*Mk&.E89qFiL=D?6S1(pK/i(4H[<43Ra1Z(O)gE%X?4J85IdNc+$05T*W90Y/$F<M9UiVmUQUh]u)+
%l7K^=K(+_3pnS&:'Bu#8JKVE^XO2c^5[t\9_C'R>%e:a6i`Qg_ntJCYE$0$!iLJL3`.@@rO5XbEP*'1p!JlS0E7<aHs.0.qU%BGf
%"#0]oMuJ3Xi=Prh3(AWb$`X)\K/<0B;#f'0eid&B74N8"Q!WTt*%$T$U_9443#%0inEk5$(kGE>>Ja)S9J#BS0Ha%Y1:SuT"edfp
%c9*E9=dWHGpf(6-&N:%gNWD.9!lW]r$IU<S,',Ga"\FLU.&:'LJA$n>4MMKh\VeI:0TLcg+36qu"^lpo"Go'N!HtDn"c;0Wb7\Q#
%A_Egn7/ij=Ku(IfTdHN((bc%g.=Y)aKukl9\&][2OSL#6Op#fGglE*dQn\]+3!HW_!8[a`J-23Z0`rT3!g?mrLk-.7o"_TM2$=g`
%-GZsFhq`-[=dZL>Z[e!+Jo@IY&Fg\fFT"Zq'c[O#_5A8JaMJXR0IVQN@l``U.8GIQ#,W@]b6_cC)@oDoV\$\m'<)aNaF5A]"ZV_P
%7e$'Sc7&1H>.LRd$;fE+!d]itXq%fOV+0g:<*Jr\P9`s?P/1[#/1Mot<f)$3oA7Ei1M7q8X;cU\b/gZ7%FFFYJ]0p;=H"+*;GUGg
%@,4jdQ8smD3/r3]^]t.>-:X*M5SI^q?7TCk%gtU85S.tPbW>ig@j!k?\A<JNA@a#gBYT*6NSB0jW2KtmjTG_p)-3ICVNQN_%G7A5
%;1N&Y!!+p5Ki[2m,baR/V&F"n-#FcnAmKiDT_tJi8-6Yk&4\8tKD@+?!fn6'Q?=c`K]XDP^7m#AcN[i*kU=79/7bp@5he/1,D^pU
%JVSptNtsF?W597>-5hBN&eX8b5Ie`qdL^A:Ul@nG2"2urp(060Zk7!V#S&7CeOhZO5piGTHLtN(1IuXi0AYo*(/'5k:e?b"mR"_s
%$lk5+Z7)U5A_4>:D(<>f;i.fj]hpLO)JF5J`"qBo+L3[(@=qL84B/N#@=_WjRDE<_]G40J@R\:YkOO-,(?F8.3^B"c(o.PLFe8@D
%Y<+FLfj3CiNB'Or"I*$Hn6@"gBag.).susT^re8@;m;DL?@<X^_AE9eYT:;j\5'7`a5P\V)f=@YVujC@'q;Q3%#2_Q!j&K?(602-
%""OBgM2W0_.eLdpFFX_(9V>Fr$n3^2(Pq7!kk61.JuA,]aQ"NP28V[2Ue/B\cG;QLMY]&H+OIpA6CZ^=%>m7KN&ke1W!Y(A*CVHr
%a$L+6JNpD(A5Pl!`fks/ngq!FJ]AGF]F+UrS.r51+Cc,;)hBFu(:A.f+<W'IR5f#F<$Ch(U#f':qA%rE<!d*NIl!GM<8\BK:'er5
%IA75jA[b'!A-uO/71jp8_A8E!JhgmSkSno;66E5s&hR#c?1&PkW=%:.(eS>=!qhcl>,K(uTPh,1'qcYC1*BLtN*#cd151Em'FtbC
%12s(OA7)3q0d=%@?`(&)?r]gtY_?R`PiW8F4\%^O.Yfu814MfmQhUp_:$%H98>H]%(]VXs--.2?59[cPK0)QBDG;HXE70&+[fS`B
%WY`n;rkmIRhSWV.>Uas@V8:8b&<n\!!N,gcf-nMDNCP^ef6^V(d*)7`"ea'j?BYYngI1c?/!;GmhbSA8g?<Yh9I#-XRHM,r4JXQZ
%\c`E\?W!IW%rLrc#A4*k8j"&_a__F0"G:][)]3[1UYe/S3bmXF(e(QR?5m!\(ho(-6Q6-NhI-:NL1arMaTMA0Os`(ejCH#f#8%g!
%_&Rt19:uER#JW\-aT0AVCH*I#J1ago)is5QY:m[cP3Cl^@8SAm^9^%k6),k-D]#2WiZa)o\Is]]Yrk;s#@+I%<V\$NE8C#(06DIS
%j`Mh5o35%5MB0(].,c&j:a5)!SR=1)'?[Bj9KPNSb-:.rg'J#C3;HjT/@30o';-JJ$qFm"&n%Mg100!_ha6;f2\NFC:]d22_?gr`
%ob`q084_r"+5s#RRDb!"5h&H7ZM4bf)Gq.Ge./Mm,B4&^mVpA[-58I`i!L^iW(Q&ZORW(*n4L(>s4A'g/BRNHTLn'PT#QM"JnT5n
%gdkLchSd7Ibjd@j_FB5hEZf]tPrUL:(U8:31sfAOi&`H^9<NA;$(15^g&%)kb*$#A?d\B&!\)(b0iiXE"pPJp:d[Tn!sVYX@Cm0A
%h`KC5j0eWI;T_s>/).(dMKsA-(_I1>5qZ3i>s"2CAg8$0m'%A_7O"=E7;0]^Gh]q<]pg"80XO\:b?[qe[mQ7aRqALuqdL*U$Ye8$
%VQ)/@8sKBl]MUeE-$EaPC%3<>aJO\`]F!!>Y^G.-5Xp":Cjo:5dklk#XQQ9m2O7PoKJ8/ok-S+s3PN:I)f_Qp<oRVYm9k1Q]3*$d
%I`Y6fc]&[-$4i(;$#oK4LWW6%D+"bgVil=QIS$'%Im+ZuSEJn?([A=[K%k'\ZX.g1ro[e]Dt[<"i4aI0_>b&ZkLr':g26PG+,_<*
%g-G>JotgHQ20%]h"Z!$\e83>rG"-hOKk=cA0n@'B4>`rE\%c7=K6ZVZ;Ak`Ym9k=R>J4]5[@+`GCM9#P%5(E8D'd@'hMfjc412$h
%\IC)HldLZ1iS,A\1F\Vr%?R$7::P7Tf;lb#9RoiLQf#*<#[^B[)Wb7(\"4s=L\N:T$?_i_ESbFL1j_/cf[9d4Lk5I`'0.=_/tpPc
%[Y)9"dXA9IV82bck'%fjJYo2V?cj$r``(.LWn3STWOKX&NIbK,jlC"7%lEC]9FIHU<+L\olCB]Ng-9si-d[_)<"[EC]Fkb2^-#>T
%[B7unG,BcSC1X[k6&W.nD#;NA`7matK5.;VLu\)"ir&]r>740OZ,'"=j2XdI>A3=4'm1V6-#nD5O0s\oefUpA2Qom2>H!P7+W^i,
%79i%6q?jK1)2DA2b&I1'dj:+uhp1U0HV(Gl6J?)%M-H0cJbsC'r"X5II-7)RRNE$p;rZXMoLPG^I9dKKkBgQ1l1HqVqGQ>0(L2Oa
%d-;?_I_>E>`.br"P_NOn+gr,al*)V?M=^<T_E@i<%PbU+6oC[m`YG+9>O\0Hm)0VBVaPKK=ceI)ls_aeI"eIs*7G[c]FZO+^]u$G
%_F7R+m:Qho*pruIe`k[mk_f)j,-E3X;tMcAeEJ>ZoSCnlf:c!F$$Ms5VB8`Q`$Q8cpSN3#oYi9YUgnTGm<q(E\=MB#0rk+B(8]B@
%`dI8^#M4);FKeo<=K/`9@UaoI_inQg;4l`cqXD;<3So,X.`?"nAH[ZAZqURYF5TXeUS%TFG#63-d%G?mA2psV,^u"=U_;MSX[glT
%Z:k)8H&`_c%(^]'pGGAi8c$:j$ns9P+C0gY+;t:K_#j?>*n$!I(*lg+jZsbVO'!ddK\2ML]6k"d*V>rVr^s0dR^iuP^pf;jOCh>W
%QM-O;AX?gRjZt5i"&@>@46P//STF8eTD0b1rmFHZS!i_L8dD-0A\bjYeNWrep0Y+\a[5eOLUf=*!bHLg^>e+KY&dUc5$'&uF7%l1
%RJ$8$77QgOm04U!m6D).6YQ(>k&V5/H+;k&lE?u!G'Binb.]q^b!Km5@hR>G]5=Pjm!T.VhhCpc@.%]TV/Q^p\jZ=B6mpWC'oL"I
%52p;#V.F'rAQtNsg_OLL46PGS?RZu7_\LKE01R\_\sgL=O,(Z5/"O1DXi[o?:EIMN4E)U^/K,+(C"GE:?C'`AB&m$r-tVS!&pLMN
%Ds)4hq^[B<fX[^Y^)`#1pW[*Wbl#DeLWd/gfhrL2`S&-u:$kD(ma,UZYK3m"k*2B=cUasMqmR75V<Zr5IeWO`7>J.OPn*S4+D-hc
%\lS3jqWd<!Pd7KX')/g!hl^4Ip.p(*@T5jLkN5V<AeecR3G]5]=G\b8^Po^#C7g3=\PopkGN(OCna.1PBRcjt)#O<\!Uje5S\g&l
%N@/g\YFG]'?YQ5$$`tLG%e[8+4?II]og/mC]R;o@Gc?Nb^M'%ENS"rP>]^@7cS(.Ho1q%38+JuN=<t)la@61'F'62KDWour%3<<0
%*6Ze?h#p6"6h:DlTneOB;D&k8Tq9@o]c$=BCRLHWmZEZ];k#A7mc#g-qG1l+rcZhjl:f)rKqgQu0FgoP<GK-CCMu2QHpujqOJYN!
%JdBXG@Gd=,:[;YaGSB\p0[Fkd2C4,s`,4WXrlMk*p%>qb.[G(&gM]mdhj0%3Nt?u;N-3tdXjJh?(?)^Q%Fm#X@blj]7n3j9q#8'n
%fF1^O&>/j2NTX6obVbWq_Q%"3J/G_3/WiQ+mbBT1mWH6!hl[mrXrAcsVdtdDoi^'VK3%DGD3>P8DlVH:V4'r4WC>j0O=^t"\]:1&
%F+5tigr^WcmI5F"XPG=!=-!6s6$+Qc];;KKD[Iqga(CuJS)qOB0Eftj^gueVOt_/)KP#C`?&R94-ts<464@D]7RU4L'slOqg$QU#
%Yp"n?0CapoIc1[o(lh$GH!NqaVf.'P=OXWDbj52]RHKdTjO$;^X;o0pn^5igQ-nX'G[k,kNQ9tt4r>!i/W\X++\(HH`Fc@-'%RO;
%@M$sO6b'DuG;AfHSBDOG$J]>=m5&Rs@a-r$)Nn^ud,>l&0Z/^NR'=j@_;C%d>q#\9HQ2\s_>lseqpJFD1dkMoKHV_g_I[+lYn<S<
%%)*bE\5V*RC[C4RN$cJcNc:'Di3gUY+J=%J@p<bW<\/lAS"B(fP6)aeg;=m\,"__o`sQ>3Y!#h(6+^]gC-B?rRtCr$6u-80AAih3
%F%kdYk@K\'_t2#N`.u9ZL3P8jeh-JZ^i#?i.g:+#+En5[ctTtS2SSMZA[^IWc8(&*SE;fC!1S$IP]b+V;)pG$)VjZWD+sB8RVSTA
%T?Gakl_8RV=SgFjfH-g"FVj^Jc-=g04u_OhRJV.=a7^QKN?^-'>YiKZfJl]Um,Q<4_Kmt!D4KM2c8ajZ]2]Q(;%8@:7R!Wj6CG]'
%&;Q2_9as*@H<d9%(tXk+oA].ED&;a&Y#^7R(R62Jf-V>[GJck6E'&2OE(r!A;$'E3eA=c`3,^:Q-P6Z(GVgI9+UK2M(8JcBd-3Jf
%b-&LZ@$b/')O.)95oeo'9oZD"BD=IZ[Q0]tH&A,?drlT+hMIUfJD,X2!q49$=U-a=VMubZ'_J9Vn01=Z#GVENQSakTr[Qt$.'>-2
%b1besNcF`hk1C2#HsAIuTW(5\7>1K'G--Zej[g:>ac5-_Fq-En$W^_9/],*HI:hDFN%'hf72/,qI=.IZAMkrAQoKjXK3/eReCl%Z
%&<!B1cmA5$:?#!(\S&aLM$U8(.@3epmhp-Z,[^.PQFGm?_#"fJP&[.)k5s`ZK2G:)VQ`ZdqF.Wk5+]6_jhuO+e(C3[i]G/_+RD%5
%[o-6B%3fi]76Y;",U(Gm`BZ&8]Tn9]&o\/<B3s%[@Z\r\9\i`t6p).!O5Tkb)jfn'=X^Y*A/I)VQrIiLID-Y1DX7*aY+CjLUE$k2
%Dd7=Re5]oH"Ca0ePdeY'&@X/EYEXG;.C&D.KOWqq6#:<(im&amV[Y8iS:ruZT87c'@rg23AZXJ!M<]<E(p0BiX2+M\aSCZ8H&,&\
%2'%V@7(sQ"kLR2f2^)4cf?F<GJ8.^608$M"D%ObM_[(*c2lHaqo@V%n._i#2P)oS0n@BFB*ZY\L-5@sGLV8;[KmMBO0N]4@^$ia3
%>rV)+1UgXl4/QK["U*T6T-a+m44h'c.(Y?6[SZkDn1L0Aa6?IhqeQ-0b03-kHPIr50s:DA8t9dnLNT]A.6%feDDq#DLF/ch$?FR1
%;&SEr^oc$1hDQR4;J!2YcS(.Ho1sl-a72+C[aENE_9@8UF$#o5htV:Qs2GQ3,"CRm*6s?eK'r>`rQWsQ`A$asdTGWK7?0f)B*IhJ
%k!6_Ud*142JfV5F6u4Er%Dk(%B[F,oY?,"WrD&`]iIA$@PKaD;Xl$%<j1V]XDGt4m8MVUi^_BOL]Jp(H'?0h5E&FTfW@:>Z^a!+&
%8@n"O9[#6+D)=A9hr4U+/)ou-P#=hE5'N3B9<N"&dJ,PT2^')QpWL#HO^DP*55nnY^nq<1LO)#n".VYMj"Qklh(f*VYcTW\U$2u.
%7fC5Y2qmtf>OjDZd".#;idm#a8`c$ECi"S\m7"Y+mYB%C#H*fWO\4CH3PHO3)!rsj%V+[u%X@"[YU=*5O7qO@0R75AVek/T`/U>Z
%gHPAbrfM+hINhbB81<:\Cq;\bh:mJtS;dn@,NAh&_Tu!1pt:KC5NfM.-_pWo_I79YliZ,?l'nuDh9&MH,%2@D;KdL=ETcN[G0GBA
%J)o@@T<YMPY6TLX@p)1&=/'mmak(tl']s7WV!S"Yim,m?mGQ*"J"^fu4$Rl'4$O%@=BBsg2d#Ii:SmFU<8u3Lna2_@B`H/_'0ck0
%8bp0JAqHmZ%fC,M4YjFSILBW&\)A&jb1S+>H3j=-?i>0;A@0*J3/jE#3oHR$'i<7kj_'iXn7<G/g%hVcSY+rs1&')pO`-e_97tJG
%(,*MX22OC"PW3:V5;qGa2G-XU$+(96\D!e"6EHmWK`ghf>8%e_FNVUS:>@f_^[:W`m4T.`j'gahIDE;o;<P?+=Qb.o>N]Wf*k"<W
%)fNZA+K=XT'%r1Y^XT2s&j_@Jf7lN6>J!h6Jda1uTX(P65D]@Damj7_5I>nii4p1a;BE7I.hSm<Vf/8[:pMTEo95oDG`_BYW8kQ3
%Lbc*[r0[;BCR5'Z;cC",!Kc:OT>]9^!?[/r99H`PRPFn>JttW--3H?qLAlBcls1VpP,G1!TbFZ;p872ioedbFnrps4NY`nj0ZbF#
%9=?@6!W,gB%\iQoDer4!o1Hsl\@@"&&'mZF7(Q[t[JAnW`N!lQX8dEX&k?7)-<t>n3e+-I*&ZV;LYDP8X?Y,+DJjb3O$,Z)MOpE-
%cirsOR5k:=56^Glm0k.m&_Dj5qh5k:8es*Q!a-ssg7OV<r=iX(!`%4/4GgP,W8C)&'%,)cgHQ2.Gq>+CJ&oH`*(3'&i[TgkALACZ
%TH,@A*0?4k.):ka$A#N[Q]i)B_6[sD"t]=48@A15EIagfgXQ:Gb5cO^\2f3iTs\V06N`,P.Hs)ka8p;X!3QS(gr'^$T6JPPlU1c^
%D`$]s1t[Z>Lc/]F-D2bB<g(J4$*6T2%,.tUo4UGkL:e<;.jkXB%]Fn#&2:Ptfh"po&@dSZ(%LVm2shH%VgM^Hd2W"0eVfgSOl2-P
%D7rGl0YlbYhBROU.JM]Uqmi&;FT`["f/=LVMIB+,!&;"h/Q-m&.nH(UDq1Ge:bk0c3/\Ut&Q6':bL&(^)47O+p7"Lb5c2r^I[^m8
%]98&M1<[.el#;$076c?G?ioh0;ELX3iSfu0A<ND\&XP-m0Q)N0-1)nu]ARsh0=e`F.'XUcFNBGpcs->0ON0!Irk_0<S\DonCigHX
%WJkl'd9/T?\:ohK7@CZ5\M+VdjM8b"*-7u8T%L]<?oNn538'*016m,rj*?50Z4SgX-'n%QgN$sjNX2ST:\koWPi?<%<JUi0q;mcT
%k5Z6c'B/R\!N))>6)<pG-cK8V-LC_l*EJk,TManh?FMk$5QM#>jELL".^^]jGckr6VNq>s9C8Tj(EbLE%K6ukCn%5Y<UdmW?rurj
%D.4pT`#\(BiG+LaBe,3qm*gWt'5b*^i_gr8ilt8j].a=sA5]655cd=(>eBVg!/.")q<aSQn%)%hs0*(T@'Ehd$$_P`]#`Z7`r?(R
%&r.AN_bruI<VX*FO<U(<MZ[ChJ2;^Z#[tPZ@RK,cF((GH,<7l'Js;-dR>$Z7SO$@7rKXF<87?ekZHV=ES`=.<eP=*$1D3"D>EeX1
%fSB:8/(:/j^8%d7.!>_1WMV7I?q^&+C<Qji,9odA:FhfdqHJ];3'\5^T`P;)3;KZkLW`,m_?Gi)9TB?CJ'IBup0!Fc2ec^fE=Cm*
%9>fpnB5^KHjOi1,42FXq-nlnU1o$l=#5!\QK2hIO[ojtl_Y@t3r3ePa]tqp4@G+LR64B=)XBQ2\n++%U6#$UMh01WQ:$p*HQKRp.
%I*$@^/<IP-7;:Y!fZD)uH8%4F#id[^4'&SfE"VPk"VdUH\6Z+sMGP,*$;p<uOs+;eOHY0MphQ2-)e).:C]]AIl=pn[(on<WoHJ`8
%nH>6\\qhi*EAu"QZ%t9:aAs)h88>qu9cUIE%5qG3@_2or^WULh('F&&Jk_&LT`t*0bXtb,g1`^r]*^4_7<]J*McYYR)NL:U4[qBd
%JOUj,Y(*M>8r'QTf7B%3j">nA"R^/]dm:/X4-"p#\s$uRj4K_K!0-AFH/U&foaI(p9nG53T\8O?QZ`iup!flua]Nl5N1:I83r%H#
%A6Lc-MBHN(L!&3Kp$TGZgWRV!96gPTT/:s4ECY8Y5i`@gHHR]GfHggH[-GAo^I?AHe+bO#5QQHW?N7ICqm+ZEed"L#ci>[T`5rg/
%bcqH'CM:m'k\2$dY<oWfNLWt<*N"ophbFH\SJ24*C9[Ynq"6n:aOR,>p/aZ7m4o;#4mo(Gl;sZ[]74*$Naq<`--ZI^W*ac6R,7%:
%Yi*I9a7k"mSK25C^rsV&.</];,q_<_Yi!>nn]cGFXH+"gokAIO<nFoH372ug=k6)7L\4O0^-:TCal(Re,cq/2;840O3kaCji4tJ%
%n%Cd&Km:14Z>KGJBG\SdZ.TZMSN2($M9#RBYNp87]]VHI"8c`Tm^tcFgj=$`hWcOlRZFC;WYe'd-_7h#:F@b'7d7utj0h,OHa3R[
%5"bd"Uh4j]QM%M%LR)e*P]U"LV&n3#Hp2d;\l^A%J4JV-5'(nBK?8`Z#@BYZ57lA=0fJDsY'f34X>m7HUk@qDpLhuCfLD-/SB`95
%<`,MTV"*[d4)a3R8;2NhC*hc!^I#m$(MIq;7;Auu7Ntc`g2olrN4`fbNL],+O8MRM^C<IR,=/_+40b_=9+hS#[dh3-2,mcBQ0nXe
%QMp?Ja1Oju#LV;k-4pqB+i'bDrl#&]*]gs[\^dVH&)bL-:"b5#1T.;'C)Ej3q,6\nC_m<T?%1Fl/'D$(eEa!-2bf)W]Z^6I#sCE:
%@fHK/\cpA7UW5/KMYLj#.]i07:@!msROK)U5\\[L_ZV1%&C[C98.WR$',K:rG'NL/C``aA12]7V'TPS*Sl5HaH\810U%6`7G"N='
%:H[p+SP#WH5d`MmK_[uKgO=).`%6>X[/auT4gJ[*Q)p)P#kO;Q?=5h3V[SjBQm`Z[:H&VhPo`@M<arudSm7]6&fMFVU!6O].2-qI
%`gc?="E4RNEYYNI(IY1"8`b*d=k&%T(U9*dOD5;eENE%]T*EmL\XVD!_=kZ%%9OqWP?+`:p*Il[E8Wuo%Ih0WM)D66+m3:@!0g0/
%P)k&gB-V9rio7kLCmUjQUqntT\BY[5CC,9*_X`_;e)nG$%+4.Kn^\pK0Pr<o8]s_C<*<([;H[*"b_(\g"7`]:..Sh(B%A$GEfp3'
%KOfYAH*JlB8"[6Y`?r>`%HgZ2EO8JR:bQcTkMJ$Y</q@`/5?W<]K@q:MRtMo_m3SbX*RlsrAGobV83H>IfqW^*-F3.)U$YGW7/Gi
%.kbei_ptem(B4rBIo12#=Y0n)LH'gB]C&PWl02*Y\iKMS6heRiK"8CF:=iLtp-Q2,=-,0a>@m<l,aS)WU\m.\\aRVVYm&EnomD5>
%gq\UU#W=TLCKOH\1-1[.Q"2q5_Ru&_rALXW5Nmr>F)Z)pYUtBgq?gc!WLQ1(#dC^@F-F!)4/l_?ZahfMdsN5j,;6VY`+jumb"gkq
%4WUNPE0pj/4M'i&C.1EVB;n>P8JicW2gq%9&!;!No@hth@__ha;M![.eTGR9LtN=h9>=)FPcLJgYlA[17W7]Whj7=><u%p08K.Wf
%ldu195QCIHMFQ!6;]A3Nr:Q?X?nQs#+924fq[`_e^TIkm-kE`;\K*n@ZUg[)mQ^ZBs73r(cRTsi10C\`]W/*Gf$,4"]M@O%apKpc
%b6o<disf-(qWU)lY'm'l`$+KW*Y6djPu@Z_XI/BO!@-DjHT5!OcA3=Lr%Ppo?+8rsdPt26[@`&I\UISFI[<F0$ul,`:1H,)Rd\QC
%.eCeMjd_;*?f4bOX&f7ME3apJ#UTQC1Q(e!ku1n5)@+eb'V?5H0IdHn@]uc+L"g1N00_f(NtbCPYCDY#"=kn'Zs2I&cUinan?/&m
%l>?E8q^^lO=oe-*bMh.30%>)e?d0(N#<9-LABhq!l8BLSZ8ttESE)K@?)TCb*1=HVF^E>e2*rTW<%VQ'0<.SIc$K\]\HpAR"f_(_
%c:4%>[YtA%lmHPn^ddk<`?(h6&u+cWDqbdqPk#,RMl6]:g5pf#>sl$E;!-mW3sdJ_HJaVjdsm0:?++\!i^2/rh)9#?ib`IQ9`3,.
%Di8'FBQ`XRLnN)lpOl]QpnjGU$ll@&['=1=;1K<uZqH>0*^ChkUCgc]c=.ou4+Rc9damER_RBp5lTE0OSdRnl!k)N"VKKS!6uWHH
%j%hp";Vh-^J@?8a5O9M*[Vs34Dg]+_<*dW#f'(m.U\AnLb[IZ$6g(fD2Y:]sP`9N?8Ln!mF_p\+L]1E9bQFq4J(PSd]B7$lcrXj'
%/cAE/=RXr&\hW^@,-Hg.K-k;JEDX]I4HK#Y@iTEW!Z\#9/e3WV16T&Ped.Y)&I^0#973Y8&#/`(%-+O\->BGRXe\d!R\)q4WXbon
%g<3QkL1Ji$P3C`&:k1kk-aR_IX0rhXlQii>140gFTmkPFfSp59;MS0=j?.)&ma,VUFIokMqWr86lW%\3@=!3!7\GI/)u,lU>PNNt
%mapFW7nm21-/$;J*;%6@9jh&1)0isc&CR'W:IehJ"*]NNB%k.doH;<kV:KmhhKCBk\]3,dU3d7u's9F:dn[k1KD<J*.0J?[<"o\@
%3hRCf!8i&_)YkQa!lB<j*5]aLXEc?)'aPCrYX2S>-d*&H!/abNT3.bcPIRkoNKOfVo7p&DB>*9#[7Sea+(b#6C&h](n!<)C_Q)&8
%D^R]j1eV0arS=!^B^IY2^W&+68V[.l<Wr=[iS#jY0e;7;#6,%Z*2%&oq@@4(m-6E:mNVVFX))IY9bX@K3HmUC\-V:u)@*W7gYq>U
%(`-_)Yn1Lp4Zk56Srk8(Kp<!I*567uiRA((=O2>OYk*5`<oMCP(*[)f<oL8Zqf-LpooA1M3:m@j-L]Se3YWM0DYp-BpJE3ZBPrtK
%l*+"]H(N9?;a:.bV8F;2pu*ufhV<CjIuTYcNK.NJ(D%+ld`LuUA]0Wh)6WS_E9_o1Q$ioBLMSQ3<Fomb8M#('E.&LWWo^<F;GSmW
%*4[Mt/KuNHLi'L+8="hUMhopa+$t+6G[$"QXe]NBk3&)Ljmu8)WXjbP<M^2g/)[@&0>0JL_=\J$l?>Lg_Ll^3!ag^PAHPj25'.NG
%a;6K5iY7WI1+P1mbEkfu.Pf3#\e#I4V<NkVRDc=-idJq#%=BLO4V6AI89[`(!JM6Ch(fD84Dk7%,$RED^4ITn\$.\]>2*C4F)4A+
%f8VcP2;0-n5OqN*Ue(g*Y^/@n6oo>JB.#;oWPg;n#YfA00$qm=-1:-D9cb$nGI:\r<IMM`s.,_@gVK'#rh-?&3tca\p1a3^kKJul
%4)ra*,Lp::VU0Km$>o>97EtnA]25l1fuD31gis.(-MW=uQKkuSO&p,3nT'*5q(^VGP]^e4il9/%YL.fkqLN9,<^p%8bm.Q)EG)-]
%(QKWQ./T9];J866\>dE;Ri\P)iU10[%P.C#Z19t,qhKeCU[:?Ma)rZqS/cSgc&[,lH$80n1>;tt@$u]]G?ub=i<P7,29g$4!"8eI
%8tkXB9W2'%n#f^V\=ema9><9(Hoj;Cg)lPjA-^i6b;#pBqO%#>B1H80![pUYkrF_ugj%M/P9VWYenkAG@^VHqRCI;O.0V'U?*2Xs
%8KY,OJ*5thG49%Lh^R=4Nl8++U<]gK5NdLVg[gLLDmuMRI9d1u!"0pO,c`\V^@B1a15FfRIV2UBg$`b/Z^8_Ym!XsXaO/M1BTN(q
%'3SS^\\$N/i;RMk995X<CmBRrTCp%HVN,`q973C6>2`7<3AB'4m1/nG-cZT(rWPJ^K.9StO,rG\32Vp":CNFBA>+l5fo?C-mTH[e
%60)H#mJ-5=g%5).O?S]TcAV_-_&Yah0f\)SgcdrR%Zc8/R4Jgi8QN2%kl"!K-6_.&9JM9BeY==Uge*PM[1`ULV1k'9h`f\mi[!;\
%HF=JnlC;)gQ&l9Q:D9L"@]sHZ]Ghr=/%%X+2^5CSEk/q=/'<dk/Cd=?+"/l??"!^_5_*VaNO.7c)M*l;3m>Q7q,KAnR8N@*7:+p8
%-,oFa_EW;`H)ac\elCo1GDUn'&Z*3YkYbD[X,+]F5P/TiL:@-*Bt5(hp.^%V$LV]%0o*?$.u)smK9&FU?Y:3Rh3ehe,5a$o$7okp
%1=Xq>G,G-V:.sW8ortTlpEf1,m&a<L?T3Tgl.@a6PdkT];XE1e%s"(<^A%><8h!U*,s_Wuo7H,/Nt]&*<4Rf4m<&3lEV&("I"2Ul
%o2-bD!T`O.ZqO((1kaSpFJT8IF=MkT80VP)OPJ^lmnP93C>cM1-_Ve5-2V^A"-IH(k^@<_aHANs3rkTJJqXnsXd[u'(*EF/NGVQ<
%V6NX/!sp.UCc%ZVUd+t%J5n:5/M5/cA8(a53j]ZX"&\MaG9!:b&5!8E=T(uE">sX@:=diIJ0?kfQ]-56.fVa1\H>OAIR<m]<A$g+
%7\aK:#RL\(*P&U=`A0VN&3pCq6!!jb8AQ+8Mhj(n$:[hl^)?P?&5ih-#Ik_,!pH"L&7?Eaa#:cf6tF=tP*%Yk71Caf(=*0bl=.!?
%(S&G/JW`+ianVGG":@j_g]iIVH/P"01-e+_AK"**rOW=ni)Ms1D&m!jD$ueZkHjRn$(EX96m0"RmhmeO-@t*J4!ZKc+)m9@>B>r<
%?uX-KBO,$jTS_U7*bE7U&;(=]?;IQLe!$dP)k\YCKTs]B9_'uk-("aYPV,(cV#o!Q;oVeMA8rJ$\2Pn./4nCuC:sm(2J4lgVMcus
%OKk)X]-@,3?L%_5=<o08FL611F1a5#HT7q7K*7se>&<l[KsFU6*W-Z*NNsY//.s"WkTnShh?</j.c1<80pV7]VR#sL2G-.A/Frua
%B)itI0[gZ&HaBrO<,$2^>ID[P=nu8b8a@kuP-+V%e]d*eF^8c+]\ut>h#6KE7k"<5[[.!f_)Lblj!+';bAh;e!'G+&3(crlZHlD!
%e/s`=,>)pq4?$+ebUnSXL"gQBChF=Y%*Wf7<Bqcq_3h,\$9[m&js(@D>pVk&2!7;RJ:aQ.aV_hE,=c9:,#E5q:2*.EMgQ(Nr)m99
%*te#&.Nd&J4@i>r^kaFU0m6f$;]p^E,cXRVK8<Aui=8?8b+BIM.%'";:On)M!qS;ndS=+e*%V;gqR;@hCZ`fdI:6Po=Ka]c5O1G5
%2^,U9mY,pp1:X`pQR]FKaSXKqrhf@;``C>m]u(Fq?0=r^+SN)s]g0oj$#k?n?.=X83C-B1,&nB2:#kqPoVVrL'/4eZ%aPIhXj;Y>
%B#%`BEKN9i$^KD+Jd6rE]T6s(IKd,M7Dqb$aijM'!:@mP(S-K7%of0aEqkJg$$''+N2g&AXNRPuKI!Nu3i[8a0DQgKCiF[X3(:j3
%!T6\YA6(006'XN.]I''lc&i.0U"9k[)S)n72&%d<k15tSE6CZJ?%bDQPM//3jjQf?`R=D/[5Hfm>H^>U-FMGh32".1kkYEY2pcIW
%868*i8#Md<ISarLN>_o4:c!X>C->Lb*'7"H,#0^`Wf@FCd>:/QIH1qu!5$lrQs'8A/t>02B_HR[f0W[9\l!#>QI^/CQ<op.>Xg*!
%^.^fd`BquNo=.S\#$T\l=p1mCm1eb04s$U/akiiG3e_ak'>IgE\]A'j:n*%!XE%F4'*OK.p'WZ1M19F]+FL4T=^Is+o+3t$8jZp-
%E/46I.c<8:er]Kn[U*Z-Qc!VQ@lrs:2'UBnHQ\"fp[V'jn[,\a>QK<B2^872*+t0jYki4/6u#eW4-FVYr]"*b#ogKNQd:1d[n)q3
%lTS?OT*Pk@FV[F?e>+47gRZo]AMWX2gU7D2pQoaulXM4#G8VHtW(YlGc9Q=(QF=oqOJHL3+u_RU[Sukb.>()+;cp/3R6ka!HA]Ek
%[>d"fYY`N)bD%MGi90HLAc*NS?_BE5Z&/p'=mh8!qdO9An"-B1AXb98mJCmk6f59jBl*6t.d(2RY+M#VhrRrl"4ZA?bX.BS7N"^A
%U%U:W1tEtjdd&)DQJlshZV7)dUue=T7+XmC)7Nk#>nSdah]ahBqle2ojgsajpjCUVp5"/G?NkaamRgA8=Yp.UbGmTdYNG3$D"OZr
%g3qhMrH9"G`DEM([9Kq?HQ40,c5m174m^?@ScR\0k<dV($C?>mLrDn%mA/T>W`Z$Z6AWU!8fk464?TD@9mP.Sqf7_TT^FLMkVIb+
%fS>V5Wr*^Ahh^"ic`Nf7-;foXOHCS3W%^EX9*E5<G]Gh[b&Sh`G@%3j)1]=rGA=Il#EmK7UDMF`3u+T[;ncHtZ%Db^N^cU$qoG%[
%((3bmeb/M8`rr_^7OJRX)<7.]ogk>s/tI)RSGDsTbZ:"\W<h!]U'^u6U%6.;+\sA4D^0*)//t<-,+hgdbZoXQF>jHZ'*Jj<<[b6S
%V]1k*,"4Gf5`^\UX!ljK.O,TK)$oRoE<X;m9cBBY6)o.((`*NWPN\.#`:@/$RC16k@T-!@Y!ORpgP<B13X>_r1hhoM8Sh='R(nA%
%O[AE#`\d,j'J"gHjU(8#Ub?K&Q`LnYK]F.(`+q`Z8IPt)mDO1UE71LrD$=$i'abUW)MR2+"$WOq9u4@fVDi0RV8`I)G^MbaFE+(/
%9IT0q.8dJP7W`k]DaZQLQpucWXK3,gLBss?CCVb7>VN)ufk`s1*hET>C!f(48n#SF>N;Hm.9R&O-7g"g7l1fSAJ4EG-^7k<<pdWZ
%5&1iCLTf;?)1YIk5bT)m">8O31)Pk+Gc=8$-rm>_6nqZ,0lc\(,O6MPDiL!=Efe@jb!@F.BXL5&8dotIF<7QhL"291,IIn]W>-I;
%:+.?')RWN_S%'O[0X)k1.O#Id$epI<]*hd*7+q^=D9483,UbrD>h_1-ZMGt>m+[ebh8WMW:i,XVO\Nf&In@cmai;SGSkt+d[psq/
%cQ26oY_st;7G<dr5sMBC.`F_@1[9esbAb*:R4qP);19-;>`NC^*;+h[Jl)!Z.0]3I4Q%M9O&ZjG<6;j-%b@4js"YJ+PI+bml334k
%QW]P%=I7]$h'.+*5tI,Gb@;LMBZ&^!dQ"\(C^1lP+UG?PNH`Y&'Hh?J0Gii2(9-XN^pcs%(J<3A.,'ga3?<8mYqpVW:ie/8Np%k0
%MT6;IOY,:U7=7Wo1$j@^$nghB89qd4H!6Dh![Q;.Mk0%DSSfif-E(lS.*2fgjtVY$E)HrQ>-^eITPBVaI43`KUkXZ6a5/+QBQs.Q
%4K,Ph\^Q+p,5?V3Q\<PL@O`WP/5DoFV'8o*+O^pEUa"VES@\nJKhdS,M&-!%&a;7;!&9b]o*k[He4&iE6&X/:liK/j4Wqn\<%9,T
%bA&n^k9e'8%tM0LN*\WT*D*!l_Z:9>e4s<0Od09VeE]<S@Lqp2RY2<KORZ^Hd>SZFY;m1GWFu;]^aNAL$qWb^)TtJ38&k5/Eg5cf
%aiD:>4OS3I:5RAPj[0;6&'qSRg^o[8NQ5n8`:b!T!='q1)9L_e+1?e<V1r6+>)#%^"6[@.\$TF1IX@Y!$;ALo)a`M3Q<9WUJ+g,;
%#d;W)BJ#s-kqjU0e0I"U[k?R/H2G<kG>YLNndYG2ZZUQ,4E9CMNl"(\p%#CoZ#E1A-so2)6s_"V$W(#nq@`6k^).1Jf#eeGbY9#c
%G_5bN.dE=Gm_Fc/(l3Kn8":uA8BWY`'M6G8ACSZ>9V2'V[OJ!6ZPI>iX;n7i+*IiGL"NU@NiPm+-TUQ3V/D),de^7g>i.0gPg5)T
%<ctnYBD@<XKIC<&D7CjP#HZhpoU!:LP9%DkT#/e,Y36N\ZoKL7"V<UYPgl@s<ShD&+uIP=4,]&*E$us.Z40TJV=:A_?OARGMcS/)
%c4RLXhD9IkZpUW!e[)WNW4U<N)L$I1Lfr,*gmYW5fV-E2hh!8a+M/)-LTL#sf;XF]CKhIJ0\LmE1*1uP08'*=7>__L>*L2jIWrda
%a6mZTWog9Ja[JN'TVn;*(QR/*.8*H*Z%:4qC0/JqVrH(VMb*sA`p_]:J]OD=Zol`"qY25NNPh(MfB8jHZ-PQ@R^gLl.]FLt6@<2C
%aief]Nhn[Rmn:(*bQ;ilVlJ'Wk;L)enL?"P:mms<*giRS)PH46C+,LO2B^5W$EOgX*o5VPd$+)<h:fb\WF@[2g1+R(D""7/#CqN,
%2Hr-6.dXIQC$O[WnaJS64lSCG2$^ama&4I:Tj[+bW*<uDoY;;um];^\,K@NQl_\!BK?'rW85g$0l65jger;ghCS8PpXZZpnj/L%A
%Et9O36rBEX+/p\;'db"NNnN%%jo[%H11N'85g</B"1@tB"q\C%9=#/&!_nXN]?TcM/4.h9=W2_p1GC_2>7d)B,7gS4f4+T-._uY5
%p-[VeaeGZ2nHY3lNFB*k5]t:W*TeG8Tanu5P/<lTbl@l(9*(i+!J4:+GsW1+5o$JlZeBq7NZs5N1]h6NMCNDK!kFPC6PsDX8D0>^
%*QXe5ghI*Mg*5dZ1^(@?\3Hl;#l"gHe]ss:=D>FK]gteX>F=SbYlo&db>ISk+:a'>rb;f"(hGFne.`&))Ptdp`8P3KZsa;"$D0L_
%99@1rp6M/!2(pF+9gKj"Y1@bpYgU=uS!G0"#lt'],m\?4qdJuP,m^oOLt/Sm@#aaKBaKCNL<i/o"k9eF1I;O:&9RNB+c&`XU$BYc
%L1$k"H8k6,$6Z4Wg49NK.K)3]%Rb<I[VtW3*=*>`gCG.g5Z[8%lGi(3+OG^l9Mk+A'[_k2`<P_FMD.gEZ&9V.kT_2ACiqfNI_R!l
%6L@%JrN%c0Amf$eY`>cRJHb>23:*L[8>8hL-t_D3dS;k86t_6o.!?`u(K;:FZi`%J<*d90;B<]':g?i5e4c?-$pbN(FXVtec@o=-
%:[LCeSh*s9g4;5<2UX;DL>_<FHdS5Ual81%6:>K^]9"4!7XqlbL6,H`Q/+3[>0L9NWFa/\h7?dELcdIG\-"1IZ@5F)LG5TI0FeuD
%-;3$o_j.%[iVMrG%rlkc;:`]O"OUF4lp2<tL&Sr`e_NUrKpU&!,;'C/N'pM8L/KOATl`*\K%IbRBtjc1JAT&AWOdp0^5\iUD`d2(
%+hAHlFK!A$400sh<>"=@OR[j>6Ilo=-nAdq>s#aQalu7LUN(na!aekfaG?WAeLA]tbDKN,SlHW=kR?@JS)tr,hZtIh[AkUC$';,7
%4N=.U5ps5`&a^<aqt50d/sQdJ@mjoBU?=!*rT[7r!l``$N=ea,W.#@o.9<D[.N_3l(6'aMV-Sa"RHuu6L_9ae:I+Xn[2=h8_3ZL.
%6h&lZ&?=T0gcD3&P=I`2m?JFu@/*a#V7;P,:#-%"Gr%`g%t%+L2YE4A5sa6josVd6AmCTq*$`s6d=FFn/O4o?if:g#hPr'eTiNTN
%,7?b=&)DtB>qFcd?6c'9PC2W#]]]DK2K\k9]YNICloPQ#71KH$dQ+9pJ9)p=F]OA3kX3)g&3D(U/Lq!/QHmCaG?oX'9[%UQl/JH3
%=^uO^S-L>07_tj>2)P[h8k"gm20^2rpVGJM^kUu`SYc+VEYq+ekR/A']KF:ZB_l7h7<9Za)P:b:)X^N;=iY>GNOQ\``#4)M.KU^u
%O?\S$jSB8D)FF^]/>=[G$pPF?57cmfJ(DrirQ#3IQt]cf1%IjSWDR!<(M_lO]0e9LO"O#;S;<BeHi`1(8j]n`8(dpuqTBDu]tR`e
%@tW/*jG/ADTM$Qdbbj*$*\k9"T:PU&OeOnHn\\pE]t*`6?]'Ye^[+XdA^'V0SVbGNpn$0,0/WG?A7qWGGLInU8'T>trj!qm\K;H#
%=M>mfl><<5GjONRB+*>@V1h\nV@NgKK]J7s+Yb-eZ2.6AVV`2HajSkt:@@G0QorLqS+Mi*R+BV)aI3g$)@cs2dSDA.b&@[.-?4t`
%cn]PEokBN+KjkKhh[!YA>".+)<.&=%\:hoTJBPZtK]!Q0fE!9>QZ?$*P*dur9Hud?_t-*5)iu>'OVJ<t25j9g>1=%,BMP=<Z\^/D
%S$"E;c#D#hj<T#HXMBo81]69RhV\!Q6Y530[Vl^"l%N1mcj=nYW#UVESm)\fh8A2$OFIjC#@c["_]ck&7!OTc(F;5ElGX[ro7tQb
%j878<%RD_42%Fr9&!FGl)<A>hn2-V=&)RL/V(d$r4BS5=kjICRj\oG,_sL">#SJ9e2?6<cOd&8_gX40'<>HONB@'fCN)V$_87DB&
%Nd0&OX#if_YaFG(>gkU5>e<Y<+M-RanU]b:>\C=(fYPHOCP6PlThf/YP2[P!cDiX<\BS:>$pBaR)[VN2AB?DZ<0HOMic(JR`&=9H
%?oEd,Q#>jZ6,"mpJKWJD$(^Elbs6<DVRZ<!,ZV?sj,W"?cQd:dS`]c&p'rcOC?3]L'6buZU[]9_D_]hspL":"7)b"BB;0r!Cc6Xm
%`!c6#KU35DbK_$HaA+JCiQMjh)T:kV)SpCD6qq485sTk5352NU`[`CN_,'#@QV?I9`d7nWLZnk1U*&Cm%IHb'L'+eY1FJA3,\/l2
%-&',hHS9(V]MR[7&o['d^_bqeq8-'b,>LOeX]haSDT13bLEa?fL#(*MPp=MtPR3lK&4A(W:g8Pnd3iR%r,Li9_;q,Na29]TPUAfL
%jL"#1*eEmg4Hb>,[V!d*W&6"G4WFi5Do%oF-FMH;n3@@)M:.q?5T,\pWhu!<jo/,4`!:Gq#mlD5#o#0dW18&dE7rhQ@8eUjnS-n.
%p(DtbUaQ\D&\JBpe7\;Tl6%BuHUS%A3)-I[>+^Gl)R%G:@(9M#mEja9]\?]`Xb-[BA*k"t!D&o:16V?ijbK%,#?>7U'pHj5XdV\>
%$2>^@2_Wlb&Vj<r-Q+Llo[=;4Q^V]NgU7`\!@lPbq`V)4BX$U2XEGt_S*g/SAB8h:0LZ`>(98?b.D\V*qLb*gc*'<ue27iV&Vqe\
%+VD2<54(_L\$=/rNC)]$S<'>gdc!`L,:,b&0rf1AOsC2gYq&ZKp/)X9VV8#j)@*5M;UTIsK;1tp;A0l<9JPd?1EFI["22mVQ`aUY
%[VqtZ^i*_D,\HJMY-rK5-t_cM'c//ea_>'cp.a?EC#l)NW!UTh>2+O^7gL9Wcq3`5OAu+dJ=UqHYuaEd_UE/1@c^uF#VlJ>=>\aK
%EG`\f<h$$EV/OVrFI'%<ke(HiV'OT#f1/[NRsOA*KT%l>7\[GB(AWisb806CpQB2lOiAp]CKQ:$a?YBf$.Y<4J/AleX[c1&<9PoV
%I0a&H;tY_J$<$gO#mc)7=ER*VU9L;P%QROeng?NVL#eqYQS1SrpbBBI]]==h/LjH`kU<k"1S1"6QoGQ'-Nd3j;pSWB6+u_IO'Ckq
%m&)MsB7(R0PO[K>%JQ%5\iDUK\OXJdmlNAMVaKKs3]*?2?bXgZ!W4hU)gk&/`kV%'q"3hqSq!d(Q.dBPc`4/6'Ih5-g4Uf)b8d?k
%e3^[r!k/m-(Iha'TWZBU+f'Q8;O8;?oe8dr,as?Lnl7f56>"g6["ii#$DL+eAo"t-?h#ZK+KqTK^0FM;6?!!H@--H>\Pu1dC>^04
%%K%iRJ<t^&1-fVMF8]mG2A1+Xo:EpFGhp*obJs/@m11-`EVk3m2.4Q/QgUW^DWmdOjgBld+fE_"h2BB)Zo_T_CYuQ(!I,*nd]Lum
%mZFq]D>%R#E';!GYdonG)N9D5(t=QMWRe"+!o1%UWr6Tp/FsVLe)7??#CD[r6QaVIbl!,B,_rtp=qm%-\+8%9l$ALg/b5N"0g9=o
%JNft&A:O#@]s;)V"A)!Xfl)A;&A.Lk9&cj^rS^M9LFM"0T3%Y``!WnU\%+);m7'@@ZK"(lj&.gm]R&-LijD*37J9C7G1l5sXtjmE
%>@edL:]&q:iHCG^!nod2%f*)_rsm12:g)arIAJ]ZE3o2BlMaR[`hRmohGE.OZRWNPF;)Dmb+8"kgL\!h@dYV^h!r8\W']o.K]9lV
%\I?\CpIZS6"[@CtfDdZNpVd.[WS-%p&8O;$0T_WiMPbMbUp!W._R\qg'og;HP\qnhlSRqF)L]^.]TDUH)r=+`#+k=cpR3!8&9b)'
%j>9f4-RW4/i?b2nDdNqEp$1kF`+GF*BKKUU;%GesJGLGr"-F>&i'd)uF"!b,+f:cMenN'u't%GP!UH*D8;I8^qd^Vt,DO2[][!JY
%0pMYKJIiTtBg>cq55eJ'2+>M.DB$?2Y,=<@=I9WqUuSK;[[.oQ93u/"@o03.*\'^CHj2$R+s^dGGc%%/m`GiiZh"GXY2X+%bjtgH
%'&nc@9BJ1kFZcVg#tSipHOlb`TI;0i]6:#]_"uXBVgODb'`BE`Du&gfRFCA^7iWM`/X!c%Z)'!+3q/8'[k7bBVY6!PF"TV*c&6j#
%`FP@;L3J0+D=DR^o@s!W*o="c,oG^1kW[18j<j/eCh<s06=1u`*:#^l5@6SL*UagHqdCAI;o`[N)7Vhk=o-V4@M!9&qJP.K0^r/W
%CicBIIgCjNZ+DZ:Nf(fmSW<O,3"]j+.AcaF(_hS;RM7#&Qmb0,?Lfs+R.7ngq?">=H)@Hn?'_ncJ7*uAb;)YBNdd=+8;/[b]ej;g
%2op7M]-md/L2rAe(INFeeisHGJam>"11j-:bh2e&X$b:sRH3Y^,20g5CQ.(<Rn$4T9Q:Y]86@Zj'lD/r$as^:Wb>nfRRq'&D'5,%
%llt.KM??YMM`0Wt>Eq9K[#lj2N4N\4@Q(P2]4<-40opbqD+M$WX'hD"Q##]0;`HL=h"+_5;Tr@L7jQJ)3Rm"?a)Ck(o+5^\-%XG-
%JrRO.*;`1/@5Wr:Go(:![N]F!?*J<1B9O.JG-ME]'Pp"Ikn)4Y]8d3]<E+\[6nmF03N-=TE!k!R+=&G33JE-jZ,F][dR/XL,D5KI
%D*mS"nZabf$i$I;-E#W$7R_*s0on<j,le=?Bp?]:#baKX-OD+M9P9^Ha>6m%QX"8a(kXglM%N*DBFpWBWi/nr(?[e(dHtDsJ%R.q
%nN_c_ig_iFPc;i%ZBYaNrWP&<+ilr?K!mrl12KRu-#i9R/qV6_16[XKK!dB-F)[7EgIqbd0$:=b)BVS&:G.55496-4/s86!Od1d6
%$U_qm3$nYn0r\!>U)12"L^XfLUg+sS8?FH-K)fG%7M9,A9T(r[aAj#>.3&]Qm3A6+:_aCFYQPsIe@&uq\:bKE^t5aj9@ttdYg4p]
%h'8D.ERoBegt3+If#-o.GR<[p$OVEkr;fchBu^rblBn3K!qV3%<\g[[WD\h>Bu>mI`jaVnc7oBX;#@M.UcOYJ9d'Mh#epO"3n$_R
%OD%M&oK;D[GhhO#)mJk*X^Dm&)-Q3102#]\QFpu`i-H+1?r9uZd`T-CX1lH1`4`D?/,1]+Ni'OB($`8kl75tTjs[Ct$=mK,)8Nnt
%YhM#!?Bc1"YYZiTPa0B]jfg6c(VKNSfChiTE7"V71TIFG#b2I_G-dGSNLQm&X-Tb:AW^DgN5%^uVM$0l@KBsC\[2Wod?BS5,G]$c
%JpN50_*dc8p_c?P)'`@9bg?>,@k!(G`:6DeZ%,HeX.-sIiOJ*G+KDX*\2`[m+Cu/!Je6<XfKiXh[RrsmFDDOWb6pp:i)?:7q^tGG
%o7?E4QRrcE#W\YNW!7\gC[U]"gtVW\MT$o^=Pa]7GpY7>[j"WXdl;DOcFtTd6W3kEB*g>0(](f]T[8?'<6<'h9bB[Ko6BU0GIBga
%(QFSCb#f<:$&Ka6@%fPk(sTRjV]'4*![$#dc\QUU)NubOC8A?@9c?jIP!0-h5d6ZrL\$o5d)c:"`[ei=]*l8FVP&H?P&Y,&,2Qki
%0tIj(!6)ni)Bu23bR"-T"XkN^qgahH7-aq4MOk?(Rlu76=g&$oJf7OQZAg7D#0[mr#VaY`d;3e/1b(hTEsW2di)&S'@Nm;%H+n^I
%*CQYu6>\g5$:@FIj8r!<&Do?GJNh+MV:H-M4Gl=&JSIj`ph56srH';%bIZ'e3@VJ3[=SrbC0%&pOKhWF2J$!em6'Sr)aK2eoMUuF
%jX6m*?16i_d#jLaGI2-W&Nn\sMBE%m!QM(e)5eaQBb&SE=[i80!&)#kp3kCU+e10`R&rs'%ROu5Od4%&?u)M`>P-bX5qo;mLcQYE
%RLZ895.,\U/*[7h`?K\-^^2!2JLZ@p]1(G`[:psYlfN2C*sF*U[76ih&IKVd?nK5UiVGT(92l2L,.JI@J<l_(HO,p32ul2\&Ua`k
%0$T$P`,DYr:b*_4n\_fkK+8DL]%EO'5.4C%K'&k1eFUj51D%2.9!^dWl39M@#-!9O,]ERj7l\'JGeuoM`/nY3MG\0><=+cj2>[EV
%KH,E%oVQg$]`^ig<tc'fT?[orXr=K%!Cr#IOdr0@#0JEG\gbk&Q"^1fO\Cb`$AV6;#Gb8JX]9/<r3XJr[n[@.pM-d2Uf`\n$B2-E
%ToT'RNroPkl6mk,9?n:i,@M5?cUk3W;FB#4kH%+#YjTVTP<[eF":fd]Dap[]Tqdg?3Y%r%XA2$$"apg]'UJ2^8$%qQ6QL']W1MCX
%]=/paK#%.hOc.5L"(TL;dI`63-,kVQ)#sY)Ot.Q+%)p[:<$4U1Kk:\8(mPgE>\L6>@urDu`=RZ^lp@T_1.nLD'Lbn:]sECcH/O`E
%,7Al&=Yd1\1hnC`UHlYh9+NS$eD1cp5NDOHZ3f\<F9o(%1)=QSU*bH=-*L?$88-EuW*\(l"lTHAT,AQD]!5\lgH$Ig@NGt(X.ma]
%2lPDRn1Bh\&fq52'O3UbXA+NjOoejum^.ZRN"\1O%&/O[:b/Pu!dHIN-!MZ$6kCb#^E2K0`BYU^SnjLF<)+&Z$?udYFU+]l?=b=D
%R#V<=]cIPjVBf$1S^[OF)9-bgmu-WN-G21gk^nJh?@<b,D+&oTC?PM'm:9(f=r)*5'5().Ei?NG'OMP)L$AjJ1>Xdj$YpA<2&B+A
%i9D"8(6b&?rrIZ\r"70bnT%tRi-$h`To*WNYVr5I_+N!A*Ngj5q,C`72<,$;7q1%K]mr4RN=]#(W%.pL;tU49_RkiBQk6rkkp@!S
%!0qWmLX;-Bmj`bNG=KCQV.O=qhB>)l.Hq?pJ=Stu`2E_28sKZXC66uF8KSB69F)=)C'XqL9QMP'JE4+7$</usVUA4`J4>6Wp6*Bb
%AWG@LPVjEj3[TI4"1W.acjGth%i\>`,>g&5l@))J!*FA)l3'(!N$a<nqqPX+ag:!Zc5.2`jB7,Y[SgN<"CG.baTf6GKo)\tW=sYW
%nil4f[Z`m>(jI#$K9HUTYBX=U<d>A]bsYFCOC\eR4hTXU,Vnh7(]]_,PSAe>l`?sc9!Mm'WP_hA9F<Mr;N]/$!VZo=eo*>(C4"Qu
%k#go8%PWrO(gAs.%->Ghl2gs).X`WW9TFj!c:Uqt_eSUgPIYmGNq!f&49J_dn"WmG6&H7kJ4sHa4bM7LR-4s?4ttI%%&-FN_.T1-
%D-<]&nRj(7%Y[e]gj;.k6o^2qcOq0.[qT(;^PhZE)1"tp9E:mMi#a[QU!S29PE^,"1Y"u6V3!u/8HmfU2hsAo\)W"Kor,<AK!b]D
%GT1mj;Rj=M@<)`"NkOMR.XqM4T9NM?*[#SK+iUT;n?DN=W'5@dZ9@msNW,$Y1e:56S'0;J6'?qRYVkDWV>6`Ek$QM`*esEBrYuQ6
%<)(+E\Vb/harAkP4fVY*8qbV3qPYfE/5h^&/W;Z&.<^[O$FSG?;H&A$Q:]MWOAYS3L<W0E3[g:N.buK%VVVPX6oB##cB*uH@KqLg
%`&<(#O@RdZN$L0C="^#seIJ!=CQt*X#o.I3&7qM!BB*)JMp>,!$PmaEge-1";X02#"\KEU^l+tIFfqg=cGD.bg*LVi)k9e6EPLF#
%:DBF\P^,+E6PjUg6N2eT+GktNIqXpj##^FXh2_l!Gp'XI%TXGB$>Pmr8kt'Xjq@eYRGf!o2q:4s^t,cD5,1Q#>."2c%bEt"nqV[H
%V#$e>!i_"u"bl9Oo%Ns`9PCGr\cJ>GWO'SNn>c_%U1eDFA7hSt&Ufoq2lU_]qSoKaIrWmtqJ2%)=Wro/j?2B2KA?/\FMQ78-F@Ih
%WS;NuTnE?[4!LY';4(J5;8i?#1Dm`dBP=.P8esrq2OM,Jdo)o56A<!A;$,]cf6'+6'Q&jW3"T:ocF=I*T]q%N7U?$D%sXl_kuLI1
%jK,MeF0khX[>cfY4YZr;GaK,-!'<TS_*u>[Ac3Sf_Vd.C-/)*$]!]1?\<@8R!0ijM:`*;_,Vf7g,lH\TcD^@B&O!p3o+2Z,1Rf<[
%4:_P_1Ems.7L3+s#<EGj\pJF5m9Bsk5B`LJWM]r4bLRJ0gO0c4H;LHX3iS@s(B+@=cR&E/8SSX.>.$C'$!7uYOL&-0[Z%b<_;R%1
%%S377h)^)Q=/$YtSLGn^U?o,9j%sPl.XmMlg7H9]cPBuNNN(HeG1Dr#([r&`$c2Pk0&X^*<0-<].Oo4Qg9/u[Apd*L)2JE$;<U1<
%&V_.+<E>e#>)Z@=GA>O8g35JrbCf+Ri9d0M#=>B9)O'1B.`n!gMrf;uJfau)?Bo?lMO,9R^u2RT`ZX,?VP73FRV1&$)C\655$s-f
%7[lUR.j@jNhWD@mfmK!DdTF#PV>a!+2D)l%8q^nX"T)S@Fs/'X`4G,f9:P,$Da!-*q'SGr#QbR;))3aZ&=9(WC:*rO%GlAU^"[jW
%$:hiBp"KbiU+X]_7krTg<1?W<QJZ#Bm^uk%#GQc,N@I:`6KTR5V#&MM4t2OD0pTCZ74<01@r1GCla@=T=TB+GflB^\-H2!U(uo8,
%nc)tL>,TX@F<G0G4HHXYY#PL9bI5qmH'AY<.JSV,*>:>R4ueUYe)Z&a\i&#=`U5mPngK2j`k^YJlepIGH&dAC.V$q=N"#JEe#j#b
%cFmTAQ'"n-IhG?uZEEa'9OlRB?`d-aG7Pma"B8eS"r$TS6B^8_/c/Nsq[$,oD#Lk#[8GT:_feA2Gb_3SG<)7>K-(h!=Iq!XJP6:r
%,jo0AUUa26Ml)IE+0K4%H\V;hm862/BQ5>1;6]aB>cG,@DF\[UUWTP"6!Brf!g;%nV.C$f<KrY3btEVD?:ZJM<UBLH0@:j/4c-NG
%S?`s?^.0l8m7Kn><U6UcVCQ?LQRf`n/#';Ip3S8lW;bSJVA*S]U]Pcl<rJ+u-2R!kobYLVhHWL,h>4-P+H^rj>F&sPY`=P1G*kgS
%%bol&=TW%YTj!OFmEbS[S=WJ'EkPXXe+81\0</an)Ltrj9&f^5!.\rf;S[W68eI+[iVk6*QE\4hW)(IbM;ie8oCln"'u(^sh',IM
%7l5t^%^cSOnFegYYbr;X2,Y&i?8=+l-5R;R[Oe5l7%U#-dZ@^2o=hI(l_HdZ7t7G/Wcdco]L6+#kC*0V$g+1QPXd[@(E+pV.b17?
%,#5^MB3@eo]UI_AC:3A2oVjc`M/B*IXVRU1bGPWiX;X_gq`o+)@NjG[P*Mh1?G?Y7]"Feu:*s\6j>>W+":YBLq.?%$htTF566Iqa
%P]p(M?>+:V+](]U\R2($Y[SIcm%Z!BDa.O%F*K#r3%]lIJim=c_A;dJMh$"$MCBtU`W??u:CWnhqs*[MW8E>*og.DG+Hfi!PSf!5
%MaE`^$J+"`W`JCO_Aul-CW1%9R/Eu!Q5=hL6A)EWP<qG@4&p2MS9-LC>tjU]K*;0b)k.l?C2':8/uqj&#4I7A1:1S<%Aap7DR\/1
%9qqcOLMp?d]Jt$H)Yc0Q.ki5kf.iqXQ+..pJGIeF*^!5F,AZj>KqA[_MYEl$/;aX_PYEgn>(Gr5fP?@WI1ROJ"o@oJPoUDQGVQ\r
%0s?F0@pbdhJ[#B8U;<<RcrII\\s!1WnBk'a_aQ%NV\i"[$/]:ZKMYTkL.)k4mn!ns"egbqIB#f*n>bR9iKideFtLXcc\uho-iT&)
%5U^\[@Y%XI/#E6I(A2YUVA68cY3_t.`BI#_SN2H189oSMX90GN:NE98f3PkbD(O73\#IF.eBgtH2_D1M]P\a&OC`rt/DJA-3Q#cT
%fSt4(D+V-B?o\HDKZAC,gtS!bKsGoY%0.jR0YFu[msn9I??\#rWYrA_24Bf/N4lijg38ToD0OR3F1M>;)kbgJB$(,+#D>Nkm:Kfu
%le1;1U$M[^5$afM%`&BFJ3k3Shr+;I,+0Eu0uY1f#f*c5U;@:9YuOeQqFAV'L.F*k_F"Ik3L1MD[XSo66@!$mm0/&ULn`1g(1C(l
%A#p:@qYSncZIP1eG;7j=o@VnM=ud.A5.KE8$ODKL\Fi;R&(im.N3R)k"[(4(<,8t`!o<$^-fK&pq,SsM3u"eg]7h"+!mEXZ`Blq]
%eb.F`DP76T;!6VCNWgDh&F)`Z20,qJ/uJWB>5ZtJ:"!ee]7C_/ZtKsC=l>5:W)&GGXsCF$jASY@S+bNVCNVKpr&,CaFor3@C2g9.
%B1hE/(&"&ERWeiCb\"u@buVBBq)`X5.2fOKG,fs+(aeG2DP+%@RJ%M&OA^+6Sh1Yac7W`!r/CNZoru_BMHXZ9Vi,\@0q!5sQ5F8g
%9APR`9JP-q(J>0l4Sf[L&tC11m\W`E]fdg.XX;F^l#tPHl!e$PI<8+u)9F.`+`H7=$-ZR7)5K!MdqjNZ3-usQ(6]^-*rdm$S2#6^
%f7;D">iY1QLWeo?K#uIVc>K+[9367uWGP*:(&`$=iA>(&f[Mgsr_:,i#gbJ^4L&)QGM6Z=s+65=Z->OK-:(]Q@@PBBI,9i=ZkuKG
%@VD@<?Q6S"$M3UnDD1:$YQAiep!pA'0ai4bc2t&28uHEo@2tta9=GjQ(i\m8A8.M:.]J>;#0"EJS9E(,39F/O`A3('i[%d*>A!Y1
%Q+4]M1'?'[g7QZ!RA!]SCg'N=o>JA`2d_bs[6b[3p=AVS)<MjEN3_/K(e/MUf,5@9N(iL;a"Y[j-)p&]bVF:%JiVIp!Lk2n\(G8C
%!=5M`*+5*:#!-j![G,9fesC:=dk4#&WJ7bsB'5#a0Ahj#PASss1>Ge\`U9(C=bbZ^8s&=IQ3F'dBan9(b6%!e]<IZ6EmBm)bqa0;
%gODc#N2K=c34`5sP19j<@?to_aff:o\t,FAg1;(Aq[W(pLQ:p0ZV8q7*mCpeiM.7$?-KU_R1PIP(V;6F.Z/M\b5s/=$?S_Gb6#l3
%O=T->K;DCBG.V#aWf\4Th(I_:%`U,ER@I>]ghE)Y(A#UYZ-+i3-;=#?QsIr17DnI>lh=k8"T]e)Y0*cA=[cq8?$Rg6Jf^l\$qru3
%I_Z%LD.-I\E/><^QpM,>;UQ;AI,+.EB'(:;aRgnGJ?jnG?,,]!@FLj(Vk,m!VT.g.Eb>Hh%qHaq/:lCaEj(Jb:h;<50Gnm(<U3'9
%XA=5"@5jnkH=7CKB<2l#ghkUQ^)5(@cPQ1\iHg>\[fTkK^i9Ba11')\:r;'KNF-mSA-+4"Sh?WH]C[3Nbm-H$i^G'!j3N@t.b*dQ
%#A/TB"Ik*LUZg^UX8ToJHXH'o`;kSs*kAm++8-j!rFue^I9>`QencjpPTPqpKCSd>oGZ&eB;2)T(^+(HdGGk:?_E\(p+o7DW$/$h
%cWmF@0(3BX+KpBMiK7bfH=hRoPnhUfG,MlqM>k?_2#@,HeNLHS4$AGH/Ve-QgPGn1:@i6qir%Ln>Dta5H.9UF0YJaT!K`s&":3/p
%hau6IdYr26'T<6!$-;T=abZ[AjEmiE&+XC;VH&FNJ][Pc"=36"E-F#GRGYu\GS6R`aQCU-/d]Y:$p^BlKA[r7\9UfQ5dnC1WQ+S%
%OFJ,M2D';0GKeWGR@CuAgsh7lYDhp_Zp]blpBVTEU0<objFQ*FMZH'?BTXU<UM$L$GV#@S:Poc]N*E6iN>dop&aYY6PYHoY/`[q*
%=sWAAV*p+I7)*T:4:'M577b?>hKC*uha%8Mk4b(^2#OWlQg(.U7O6L&,jD6L0'=gX"Dj+@^i\]t"apE>rHIO$)UWhRlG<u5:EU0]
%AS)T/E%F49cf2!6X]0.GVe2s-@!lSm_Wq;$Non-BoWV+hWOL'MGFk`^`n9]/d<h&2A(!]W*N;+!Q&$DFJ6Kbg6('S+]'0-ITd&/Y
%d/3]6k9,oP#cIV^C^fFaC+:u-I?p4L%EFl3.WY%_4"6tu"iK&r!(`R"MH?#4.+g>'kZ`Ljk\V*:*c4W/pA$,cmSkI;[p?U&#2\<!
%E;$8q7feV7@iN1P',Z_"B):+Aa]fOYqNl0tr1]ju,^&]BR_NKb@7M*>Pu:,nF0,e@'+s7oR>/;4\?V/@B7&Ss#D^P_q7P(`cL>P?
%"VrX)X3us)(C?_I[!P8r2E_k2\0oMe5up/!VP59`,IX"Z)H$R/PP?R=rlY()K9DD2@%D#sn_M1.?F1*&Fq+5Z=$Li%IG0"kX4#>t
%1<sU1.KIYRDr,8X3/>(eSSpgZI76_8Q/p]Rmh#]lK-</G3`JgFP#l*Rk*(8;KP8640pMql+XKW]L0CC?RZ`nX.8+Njr^5U5"fXuR
%,us7n[I8+\25AU7M/u@c5r(jW,Q2"UQJu<f-F"BD&N,6P,=pfjhQ^CW<X4Sh:P++!-ebdj2A7=25dEb;Z\49d)^(Kh]:?5bDF3:i
%k)tE0(R"?lEP&A<"Ri/W,"Qsu\<u'`1G;;\[7&>,)U)^<-I,^94<G\=;UI6@%\QY@]TeuD[h\/dHjq8('C-Wk+</Z%Whi%Pj;Sd!
%,P;H"=oDWb;$6/@2/.I'>ZaOX!g&[g.dIW8esBJEP9i9'S<_"I^;E#?]C=?gf09GmYSPpG(+;C9'EaR(B)T])K!A(e,!ArC!9K=3
%KLeqV]+.)qJs./Y:d$&i#j%:i-PN:R1,03#2<7tn;34bI"s*d!L,_t*S37jWh"-q\%lNtZG!`6dq+3[daGZkBSaT_$()-4cMMD>^
%ZA?c^\$.+'dlgnPJ#ZsJcj3T3p9@s,aP"b<9+4HA@!G5@Vn,rh3*6;fY:Cn/Vs?WLg^u;V:iA,J`%417gfppAEm32AE(H.,6\iLV
%!=SL$$?BgD:U6`%n$VkACk'P@6P\j_SY`Afrt)uQ$k63/3#>m@!Dk<a+unoll>uFgAM`^LL5S!>[G:qGC@L4TLks(PM<2)j80&I,
%%T!_O-_1XIQR]PoJBK\<lAt]]-AV[<-VG;n\JJ+p1BF7Y?,QO21^-Z3[#++4n+)"=nUg(I9t^6>*GNVqNf)H1dhPaB<$Y!NOGK@*
%GYPjI]_-sck7SNU\95tHg3/SdoT5clODC0eC&o9fEPP[AfF6.J]Mb-_fTqRV=45YnP\`0!X&TA"TH[L$=pXV0(qOui$DC".?\QOX
%:(ompC]-nVrE'8XTHZ$%3e97,q/Cl*X1"uWMqhnfA0W.$30&5`F"GB;6_CI:"A7UZ:9tba=@Yh=.R!ku%pVD.#ouW3-"n)/S6q""
%NX1ic"kb;qoiEHN?fX%_N?j>u#U"Z9JEP96WWhU75d%4_M&1cI16ANf1Ppdq"Mbu6e,[7=\*-9eOeK[C+tqq9+>t=6r7XA^"mZ35
%aOh5-Xk3/,F]T9..2%A=8`1s'Q</erT=OpQ_XZjS4[V-0PRhYJD.8pJK\@n80&UmF]&HaBeXApiF2`bI+[,RKlfhpr`uet9d"?rn
%Y8#6RN!-\CCYfiK-]NB/JaZp:5QpZE;H-nXP\5Zd^B9knmVgl$LR"2XF5A%[9lsQk7l`AWi!=99PRK5,5#H%WqSCSQLRo]%l/GAJ
%B95*[PUU^Z[K?MS$[=Rn*6\cYXDL1T1KTm+_12U[#_X&JX,%83HM"0R1I<pS`WHO0S.]<gEg3So_/t`3lpf'ZljP%hEl)iFIJ*QS
%\T[=ZVsl8R!Nq4f`_8-0EH#gS.!u^P+Bd"B'#"g`;65E`6O5LQ<BRK(-.jb6cP9T'FJY^^0b51#*U"`eh45I^rnp?UNg[m!.TIF'
%_7!sS*=Hb3Z8!$k=pJiZ'\5AhZ_?,bU(mdB7*lA4>(WjHo-sXXTcMGLq7'c>KsTu&MO,hBoFG'%J!220k5b:aOmn?@F(gE3.Z&ii
%!:"IRQ$BGlh6tY(m#VYN9&6ZSAT03J<dD6_4_O:qrJa>%7LB0@oms4H[(*tI=:'CF0Zj_R.gG$BXT2IE0u.]IIR3<&kq!>t"33;O
%H5@Dt,/tj]KZ1g/j95At]3YP<&MOLo>[SQYrZ#<#&2i6(+mps)#SJ6A1U^pX4T$'*`$jBZT_(<W*`CkKAj$Z!LA^N?R;''k2EiC^
%Ert,4K,-Ge\-[Ze+d9NB*_*k5oH@LC(,I,<8\gMli**gQ1FU?(CM=BMSI7t/=+VWkTo6J/N'oH)JDaEj&d8N5.<njC%YQ%PahU:f
%@lk8:H'9GK*SS=+W,tY[>iR61'f:/]6Tb;\6&QoE?j>6`CoIpZ+2Z98qY>gh'u3GUk5nuk\/^JP!,g09nU?)YI##O3N5(0m85>D*
%EYO_WP?t"0H)FF@`i])Gj>eN`KAj"#&mbV9U@"HNpaD"NPYFSkT7"Zdm]r2K>1P*=c#knV7u.JE5`>W=)*'uI1^J1LZ)RC9Bfg`8
%WLD1>WI-!+%*9DaJZ;[UG@`3#<KJdB*==HITNJ&/3^.')2eZ;c+Trrf$!tG\S0+IW]^O_]5/@?0"iso@6pC>j3c(<_oK,5LlZWCj
%"!eZ_=`ZJmJ!L)LM?uqO$(N_1%),,!hnZka\I_KHWp4!m*srM$>#BopqO*]H0lUS&*\NPV8P^$u[[3OcjN[_`lJ*G`I)nJEnq@Yi
%\>:@1#\Q`r/#*`)I888+1^R!%>qS?#d,eS,K==6J4QJG/_r*co\Qt>;f_,G+YnIik\Y^"k!Fk3aa-cOC#dL]>E=ncGgt88j;?eO@
%*.MoB;-X_rV[7J5J$1FM,RsgNabguHFMQ<d/->VK,49\H=,@4fVuVF\e(A#q.#U2e4A&UXMh(VS+3HVb.AE=uki3(X]H'D#Oc(/b
%:<QuJ+8'7T0M8hlqNtNP9,#@o'chr0Jo.5+W&*Le,:L+K:m'.E:0lFX)$C!1TGhCS!K8I)puQT?RS3_HEDjhG_J3!tR$m">!pEmY
%)DI:Q,U*!648lAjngGMCm6\Wl<N/8`L.DZb)k]SA_W&IhS.Y]2d4dPm,$U/Z;;"dXj>t7P#SrG8&sA%DK"B80L^OR^P!<JR=l^"q
%#B)URXPeZh5R)M:"#q-9RtQ;4bmoNkan(Kb>H]Z9^M?ntNO>[`S)RHHWDOkXRfQnHB8UL_0=gBLc[WSDOG?a+ic?+S$[?Srm%OcT
%PhR&Ej\>'$:=-?#?:*`+2uY9CC,d>*6*eR`W<`k#P9[<^(leWS`pNkN7.e<)V4IsoR&E%\/d/i^Em8#+A@_L[p(RZJ<#d#T"*c2?
%eKHHU4M^)56+-38PLp"@6/XMWXFL;$,T9(ii^-?H&q/>f'p+1rqP8(H_o)q)=:#1tEU!jCKQIrfdL1nVgGMc"M2-!N[,35\4cC!f
%9rJ-r]S5S"Z3d``mbm":r=gQd>akgLLZATsjV.kF*r0*)`"Jqc!QB^(9i3<4X94?C!"u'dQ5@pGf=P+_aPmqdo/-o`&3kl=M`u@1
%`?Ms/.heYhUtV/aCOqHeV;:DN61W7kgX&X?0FNB5f,M'<\=!=r?V2t1i+cPR2aJe^%&q.0>`*!goj<Ft%kb?!c&IP2V;pa:hUe;t
%!;m#d0-H9@9c,.Q=WE2l]F!Fu`QQdq[/N^*&`kLW*,TT3VPCAAeMadEmusU/?5pJNbIC9p!tS$BB*kTkM97eNC\5D%q'F/s<Wu\I
%D/R:nY=o2@mCi6Qr4bhXc-jS9Krkqu9`YF@/_u8""tg12C0H)=etd(LZcS1D`E.MYf\ZF48H\LF"8k\&>C\A_Jj5(&UnY@@g6Q)l
%VDaEfOu>7.e7o)@-/Eq*Qj.gDN?9WYaMK`t[&K7d/N:T4aKtk5?_osDD/F8;AeF@LXh+2=S_b"]eXmM.l>Jn=7)a*ML0KEU2,A=D
%<$m]\VVnsF-C]f5)Yh7>q\5KN+R<Tj!;`>B]`$#S^%HkDe_:5moDS"3##h*Di4ML%!1p]kPg?qM^MVf]G+FM@Gu`[)"!&)+M''.n
%D6j[eH1cOW^Q7ZgOB-qC;1Z8.,4#TKl:"n<:rf+M>'uUN3i1A76i[EM!PA(Q[sJ7g$<EU5eun9AJDu;b-id=eWZ@[#=_lc'2cKdn
%Ir/XSfWO*Og\f#,`"`*l"Yn!qE^<C(^K_?A.TnB[;k'Bq`(sVLfLARsq@,%_o6EWL?4amLJj@"2T?O@bD3bR(MuDu=iC`HD?P"#4
%aijF29)YY^l<iBY;sH"palWITDj"IR5JZq#-V_D*W7=KlS`j4t<Ne2XhkB*#MV(/.?+'KR5Q&IuJ=$Z[rn7%`Eu3?hrU@GS&+E'&
%rdI*Lk/Y+V!1m\@I5MAeH9XBB7!Wog$,/8bQt'F2:;!\scT3q061iJVM9G)BL(KH\aFB0*pb#i.bCFfrD']6B$*UG>p%(i9o(`YP
%`9K2Yaf>J'ORU+67.s6,@JIH:ii1CE$Z5JQpQ$tabL`@&`K+=>cV<IJmKghj^?1G@D%u`7I/.k>r=4%)@muCRL-#IA4!4!QkkJ58
%X!:=/-En$cOH'rh&:oD,:OMd*9B)kjqN)mo8klrbA0KG^4D+eHMQG]%A/1d*r!Q&sIkrLUec'n_(>%&MR>pflJO*J"E"FV,G$GqH
%-N-,8/CMnQUb241_-biEgSqkhFV1,6/CC3eT'ZmWkR6%-#bf#T,IK0EfCmro?(4"%lh8#6UN8so?j98)W7GVr@gpaD'(P>iYbJpp
%"XlTZ`"TFO.k&72,=SdJV'7l.TqL\Zd8JW2EJ[X?=\+dO"4B\=l=g5Oh%r9W&cO^,;05fhW_8KP%o12;?2H1L-olTA'FG\["iQg^
%=s7A2pZ\0;`gj\0eU)tgp"q+7iXt&Vcoc;ejY2G`SLNopGAHM?f``ZWOi(\E?C434?J?8i6`Rp-CRs$h9?HF_mChbO>GaqL%^q<<
%eYIh[_Gs]r*!mo$*$=4*PG]QT`a_8e4EL!GPb(+Wc'rkE#&D99%4q)P'Wr@<i:Ff#aZ)ONl++OQ;4''gAm<d%Bp`:aV$"(BanE7^
%_/2Yl@*^eVG&U4-l1cGfh0%%G<3sq7j-$(Z!Q37FZ"F26O""OJ/m/7mY\frjj;+QR8?lp&cagc*%jTa%(Ju`imp<'1Vp*DadSA3&
%.^\W<Sr$q)(l54^cVG!]N&d]0;"<,99ZSd)X_;l9QGM+h#[XsiJ(C)^hNb/RH3KFf:U5p^5Tng8)+#Bs1V&ig0oA/Q4_(8;)LTq-
%fm%3);sjMi[22u7p(t8]?`!Y6g84\GqgMAt(Zj:TY-0\6M6r$PcO[#QIKA5:dl;imV$kCE,paNj@]5`h&s$.9P^'G\@0&[8'ubSP
%0)I9kJi/FfmX%:cWS,26>dL@2>*;kXXlR*sQaDQa?m0lpV6s3i_Ul?">(R9b6_3!1`V0P-+D%"OJXr%H%1(0RWXEEP33)=i@34jj
%c6q]>eZ;q-JR*/[c$it85B0scSYYZ*cPOCClf.NIBFXMl1qV]OD@>Ou=XJ*6GX+sh-C)bW:"Q&l/UhJ%Y8V>@oWDXW((+q%+*Xj_
%h!T>k+9b"=B#'^C2:#Ep:Q:\P(7R'Z2&'oL_pHLkj_8i5drVk1g:BPXOP5Mnfu)Y&9?)).8KU3+%n4SPV3t>]7HJlADE]f4Y+#=%
%/:QTa3*1%n]IZ6"M`4uY*a7=a0+7ZJX6#u;=Du6rf2k&bf?7XG0]]3+661KK%+*bih3;>u7iOY,kf(BD8@rrD#G5!.fU1OldnuRR
%BL\Uo>ZoBEdqI:HF`-p7X5_re7KQCa,XL,gUu0=k;*?DV':h5&Ql)-V.phVL'YA;/!]QrW@BAa_5.CE7C]),QEA#?/5.:_m-_G2J
%*'j)ZOSYM$%DM$hkC,O")Ps!DPVr8uQNg6<XfjBN#7RRUFff^`LEk[o,>e#bQM,Ak?7,deq41TJ8^o[@HAN7t-7F].e7!K;p/B%\
%5U#mAOH\!E\_gQ6!A4l_BWi(j^et7[`CC\bY=ACQa'1+"e^+hrU(-%aZ33H)ne#84+mf:Dd@mXG%XW.`oXI>!f]+Y0la`Ik7r6*D
%&7KhlT>;6Y@sCRYr]oF,::/g2=Q:"rnK_DPR,T/?J\es#diM^*nVj$u+V'.R:ZW.odI_Q\T/jhj>`@WI-i2[#(Z7Xj^?bk:d1b-s
%&/g&Di=`8o-&MaC.@+J^"h5UG00.X:1L^>3BcnsX*#E*eX=nPMQ=?17MC75-;HduF\\R?c!`6AE7URduB=l2]7)#G;CX7sM^`82C
%[`)laN8Z[)/he%o7CnhQ$[bmRhdRhO<rmGL_C2pXbi"b@>[Sq)mm`""M9[5N.mZOh8</T?C`IPQ(^`n]KlYO@,#^*[(MM\cPP43r
%kZLHPm#_u![rnP8;&>V/(\jdP6K;M`^Xb&1<h",c]"msl3Zb"J5`LA`]L6%uKb-X$S5C(=m=)'b5GA'"7`t`H;&>jrd>t=+^$-Cd
%5\d-.?Z,ns;&?1\<h">\]5&+DM#_j+e-2dO%Gh[g!J-R?n8/KC_!Pigaa8QX7C1b)68Z<]6rI]r2<MPA?*IB2c!;MBW#DsZ_]!Z;
%dI+3P0:LsgBeE7!\Dl6"@1Tu#lJR>D9@u]*nNLXjdi!=KdI-1GnItX#6&^;KLU9ii_<5t2(IVQ9dpUCh9YPs[0K`bS\q"0E;T<hc
%Ujuj2;Ef71\q"2[p)'HBDK`WCOSf[A3!tqU+m6/O>gOl51ts=<!^eC[LHXk\U>91)=hmZt.r:'RJAkQ)3(.'!G,ckV;&?U&J<.@V
%'4/'CH!1'`Ab!rkbFc8_s%g,Clbb?">G/S%LV,5"3#MB7\&B%j%$8Qd`FWMecO6uiG<mlup#UJPW6HAGIjrh5gm`dSb0qDU!SNrW
%9ZQj.H.i?R0%taL\p1^"Mb$X=4To(ZLJjEH3a;_>?ibO'hUWQhJJja3Fmaes([Z\.)aA=\r2O^!"C=4f9(c]@*M6Z;%sr</-1iB@
%Q=K``Aqn=kQ.K=^Hq#sg(j]VQDem32HP%h[$hcRFdbf^[dPgKt(DlIfb./$2kC,_``M]7'W,h<#Ynq8^O_sSR($)jH\Z$YiJ1`Vq
%">tLf?N,%<Kb/$ob>nC0%*K7DQ`*t;r'Pp>jSdh8JbjW&Uf,&22ii+@%.qJO?_C`6n.5IXIe:V0,*=)al0_ku,?Z3Zh?KPpT"]]?
%b5">ZoPq*tVb=$Fa\/bID'mlaWts>2l`DKS8X4[rF]B!WTMP1*:erZ6dg3%@@[n2K027aGCK+BA)Ju%(f/DjcZ?!dLOQHZd5pP)j
%0l)$nWS'HKKJ:3S_)SO^HgsM[AqIVD8Ng_4;6O0uLV+R+PlCR>;!/KW>\Y6J5]4)JmfSG#C<O0)m=gjC&":<en8,V>_KD=PH3&M!
%gjOB"+p93t-oT5o\6aUkoj,CY'U:BS$AM#+$A-B=qgLmU&\d$;fP.1(?Xle]^^[sL*Xm.^<aSW:GU#OGgZ]LH>r@#Dn\g=pQF%91
%gNpgmp^$%!_pM3B;pc8A1s"[Nfb`!2p%`aGM.]QHAJ>VF&N%4gQJZ^VhlqA;2/=Dq9%J\4//q^N/lb=%#giaI_s\R7$=2Bhp95HR
%4Sl7J]-n@]e(J+;<]<enDC!<GH9*'UgDD]P*4\o(p'#@,]);mp6bprhV^g4+C3f'Q-j:m`_I4&K[tmJ(KNO;SV<E22G[3r:QU.-X
%W!JQ$4H1+V^'0]=[G"I7W7,S$9X*DOqD>V-/X.Z=liE)3FBL\^[uK%T"hlo-"%N0c;*=QWT=d)<;tFTl<Kt"'gs87-_Gl(3CE]kd
%eV8,%`4-5ce0(T9,FZV$mR0_X2>9_q5<e`aeS^]XOMiTrHg+.Z\!;d4FrpkqEI<4,>X&0ERm%BK@ZUYeY;)H6n9`a&r;!/X)d#c<
%jlK@Kq/m7*TnpeeL_eH^%/M+Ih:^;\=G.dtZaH3&OD)r!WS('NP=VjU)9(@?'.r6@gQdWTZD\?C8eYfj."hdN58O[m%HCKV[&/R;
%(Ya-<'asQ-N-*HLC84&E5b'WPNbiu$9qlbYUFVeQ)".g&kb'7:muK^#eDBIbQr$UcH$8%dLf0mgNWBX43fQEEP=8k>@d,7-NXUB(
%dE*5M;g9db,Z1bVg5Z'>0uZ[GZYKnVU@Bse\PZ33\7X>/708'>JJ(j>(:DQQ,]>[[XK`cEr^.ROf&UP8\+(rc3<P(#)$8(+'G--2
%G@DrV2PLB/;!GW:/F'JQ?!$JJM5Ukh;XU0TR#XQTd1pL9cp,l*hR9)JTs?HqUbR03&?/Js/B6O,fK0*;0sRgY=:Rr5>pQLk6krPb
%c:K:9OfZqU!f5aG47qbL`ncDoT%V#f4L"R3nYnA.H9l9[(iJX8Gs\goc7AH2>K-,+YH+J+Q$I3kqBH=8LI`5k,d(X3J\p\!gTk2S
%Ko95hYo<fc(,u'cZk3n&&p+*r_V@6d$P4(Nm2EF!K5$[B*6M_RU^ahfN!!Km&S]^=aWs5^DW>W0e6M%>!2h814Ne_"nhju]pGmrA
%2,5rUG\NYA1q7[#jDI5s9J&m,8dUBsS[AY\G#:O/mH%u:QWL__>uU&*$:)Cs#eW`&&D,RGUFF^&20&"\.?AMD*/gB6T-9!p13YW6
%-u4kOOk&#R)=%c\q0WtN_rHkBSa%Fu+.)B'DPFDl?sd@cW/i3g+NW]i^ckT7$mr5T'YBDSQ\-.[TuF7O=.[f'?@RVGR?dT3ZM$55
%I49M1IBdF'bFS^]L](:kVjCt=S^%MU4!1<jEB>pT)*R&&482=JW@<:\[YZ7\I6>UG/)'oEm3Wr\:f?Z@m\<&eJ<S^TBnXf4/`MWp
%IT%/-$Enj<SgClF%"T0R!GDcUr"s;W&rQUk9EF7!UNg\=\?9L+f&IH:>G^UD:3G:1.2]J4m9I2p/`6Qfi]_Vd.R2gf0Aa9;2t8fG
%/)'jeq/Ue)2,R`#BJnr-oL!7'R3&/5,D.TqKuI`<aQ\B;_io7JBulT.E''<0P)[sCFpOI"Xg%5Pj$#HkQ-1b%hKc$DH'n3`aXb<8
%gdTB,TI*i>[lgn3CVnal"_mb":g5LYep1up]5PP$,b#o$J0H$W9-9r8Rk9GaZkY5]q2R>=/OX99^o4s&>,s36#tH4=/`k,AiGLh#
%IK:,99o(u0):PlKghlH8!\#"3N2.;:8b+I/37?1Yp&DGoD*+'>7[EKIr"%u05eg9LpWMSj5n+6a5TAo)U[+m&PgsXR<Gk0e4da!V
%==]!Ygm:]G<ZTkiG/C\X>%dG%#0C8kMMF@[Ye&SKOf+a.9l:J\(^#\B8a'Od)>C[VNo"H1d=;YE&#"_Q&"t/(*N"e>7u#(pQpnu:
%9j?O(LR(2R$Us?kT7?S\EVF*BeMGo<"-,,V?W<LITM=+tJL4luhg_+I=<;.VCFP/7jpV'e1[[:kf,(&=!mU&84,E/Vm!Ki#@!,?S
%,Q6SM_k%@r/n.NOVPQms.:GuGB*,/JfJN]DR(d\[FBP08/4Gs^Z6Wr5RZXu0ou#ul\ujXsGUAb_YuiS0CUpMgk#RJogR:n%b_[I_
%0!KZJ[`Xl\_#`qo##lLH!oIXO[]UY6Ym`9Tj5"!2r8Nb)8'H3m5i9Y5C^S3=qI#LL0n@&)d?I$[q?ajE=em'$56V!70#Ib<?[<6J
%[g=h_K8!\i[-@CDfgY&S0l1#E@mq"2IGHuUO0X_MU'2\\!>V3e!6MLoh_\Bc8D?f)3kV+nB,Ll)[oRr+f?gH-8>GlLX`5[.W/'`P
%XdR:_Nc%oJ%cTGe>11V2"eZ=F(.L;ofGfn+I.I(5Fi;J1Zid/8R!q$#j!>o:b*@s^-@]h`m-(RL7Opl;[QPh(76@q8bE09KCM];B
%WU(Q3ogS;h`lb@fFhl]8^<+;6<"Z:-*ubSV4I5c*>sk!7ICW'!OWN!'$HbKJo?,bq1YQ1ZR8PWg@s_ed@*Pk-F_j!J/Jg^2A/ucG
%$U%"dNj31%e8jb7a=B4&^:b^p_AJr.*H$-Tn&c+'k<j;Z;#-L1V?mkGs'GP9BG"\R?IEUi\6P<-.l-)Z@<PQr@/s-g,qUBs@Y3/'
%WZr;+3J:#,[VCG:R58h5HZl)"NI8N/"[dIE[HF!ce)fdLG&bNP,+'Ua$p:lU3XmJ[eE[IXP\dFO(!Wn\n;_#LGjb2JW#QZ.#%IH0
%[<9Z*q(5l4QCJ_$.rg0BRI2.OAZKXeR=_,LFlV(s`bi>h2FdiD75`qGX#:np$9U=;L2K8[-/;!Tf\s]f?t0K5%W$*0Nc`g">L$EP
%&4ET*6s+]3H``tZYJK(U8Lp7"o4QS9G5;sh:7fuEcu-"UaD&,on)ieTVj$cW8eWYM9!_M2aurJr(>B9V?;CC7UBm<?FgZ+.#(7=S
%'gl4j`!JDYXG''qkB;r'F&)2N.k6\rD`VZWGeD@6=0=i!\WN^tpS#<i',%ii99lC`5d:Mf$U'T\67OTN%-nS4%2.dd"tVXgTq1YW
%Lal*]?*lL)cD4AlJ%4fH5"1#Hr>4Bbp6g[[Dpb$o6pj*WN#/k\aq-O=4B`@IeV8Pnis`5u%^#.`XQh4Cj>IT#eIFqNid01nD9Y_l
%8*;mI/(>]2S>18f_kdee]5qJS)Qo]])r<_>Ie3*i+928V`M6paN;$:pAqSji]14Gsq9<jXpt[lYqYg9OML^5j>^h(),e_Lk?[r"I
%q]DGuiU0;23l`u8ef=YZ3'BL=I[Y-q\cHWXO8%#u(HhRtdQ</;q#%bEAUH0VGE#uFL$:qEV:R6D.R9HH&5<r9!2uOR#Y5*DRQuY(
%/f-gpbnNQF"e'"FKN"%^-O%MCBUUj&VM*bP_>;qCfIoqiS1KLbD1cJ)&X?Lb/YG]_=.4IrMH#+HgL.:B(bEFsN*^0_e8]]2Pu'#o
%d=`\+q^bdn7/!<A4CS!daIU:#<+&lT8#s,/XV,?Q>HnWP;>[N672?p%4m@<T'_cA7<%9^RCp;nk?Ald<$VdFm+\o2f9O!['ImNkj
%F?:#SPM>Y$WQV`3E)Cf87S>&+<,ca<aI@u.)@+/t7/V@7]a1'ZnbUB^]9KBM!k(<\>GOc,a$)!E"[+:ZA3H0N<+%qFON(DqY.`Ru
%1`%`6keb^f/s%1XMM1Bu5tGsP1iR&KC:/S<oj5H0a1h/f(,(FrR2L]To$3m8Wi6MtPV3M7';""mSXO8e[R-tU;d)1N<@u](QF[*r
%[kcBSKkf3Y2c,pc2FUld4GTP3Z^*Z-97[fE3#K<I?nFfc=.B%A)^FNCVP4U%L:1IQ\>YP0YdSKmIQ(<9cL[!=JA;\"+>"O5X(.Cu
%lL`Zn\4>b2&85/Fl&J-BdmAAYX_#P!XO0LmER.Gr0Lo4]kL>-Y%U*lGHI=7(&3heQX'F^Na9l>eEU0W,8ULpU,EC'"RVVVjoI65[
%78<'GNd"T*_C#-!PC'kGaK3Al>N$,:L2H+\877P)$9<'&1G,!;>W*1X\Zkl8;\dI=?9k=W,8==\,AjmC^aI5-ITVl^MkWRhU>0u#
%N/fAI:\c/WC>a:fO&]%c7#;'bULf-MPok+12VLu(kb->7RY-G]kub,c94Qh0=Q"f<"-'M@n>M7OJp>@HOa55J=]`Ssg^ZnOW'F!$
%;ZTs&Y5D+6YfWQ"+k9t2)/\oNP&,5.-nEI_Q;eBK+1>Km/QPF;PTV-$I2*<"!bkYocU+l)aH[GNM;ee0#<;n[4,qen>p<APR2/RF
%S5HfEi@t=oMA3!kUnRjPRM"R,fP;HU$`=ZfhMA]LUsWcm:hs/J$'^0J.!1ZJcnJ"7)CMBELRCUEK^dCjW2407("h2Kfqt]RWtcCA
%+<P4.g3J;n2,btIcaE,Fl((]rOW4TSi[Gg\2ooM$njpslF;XJ@jhcn-m6rQO4G0F4jV@Z@ll3^WLF;^[Rp;3`'!X3cSE9Mq2ig:8
%WpOu(]5Dm4UeuHB"J*k`oIpAf4S7"E,Z8=o1A`pS5<8k7=$So_8r(%<#ONCgGq#EQrdd5rRdM@r8J^\mY<Kgu:eTNlC)pA9cL;:Z
%'1LQMKEn,aePMArZ&Ddj):CE/CI;gJ6!I"6U`pM<DOIi(nN3qJ3)OA.<fh!?^t`J`!Q1]ZFdY@D:`C-c9R&9"UJFMGiHEVb:YnBE
%HuOAj$JMGdBqKN+p3$i[d:"D,&c!?4#%WB*[8PAiahL)8irX-JS$HPX:)OF6j?$&KK'mg-V#LMXGY/lnXRs+;2JCZO-FN\RdSWEK
%E?O,hMG36\dP&4Y]'!?^,CN4gmrcCLS*-3tjDNSq86_"#5g6FlqYARiMCXuo@Q'`Q>1@L-J^Ju7,#CYU9:Liu3k.J#fun/7h@7>0
%b%i\6`V-ip]L\nWXdi5qD@%Dl>UtI;*^q`X<g=,_Fl&qudBZBs=i^qQ<DMr[S#CEsp;7R9.>>_oAmo9'V-^XlM\fD@hpqD"rHmjQ
%?KV96d,h2A-h8/:p*TTidj*0s4S",G9i*5pjik\J'r.u\cNf#Cj"@*=0g6bR1XCL%/NW=RJk"NFDR]s1,Tu)Xq:qpATnu>2Lo"El
%Ae6JQSiDD$!;3k:7HgO]AW2N)OoN+D(3/,_k/AJhO00cga'fR8"A.NjVls:[N!hbnU^h<T`DG_")U[OCcH=6[$AHa)%#]aMae@LY
%-&'e(!D*Z:W@0VcD&;!oA8=;MVOg8VZ60A^G>>&5OJ(u3`AC[C30aualJ3/#0O.;U9"eu:7#&'dqOdg<\M@!hDeH&od7u.K"^I3`
%O$f>"*)4rEkQ[C!b&:[-&+Xsg%*_=pU=J9TkW04MCp4o%S/gqcLU42JiYJmR%Rst["KWG2.ntpj'fgO'oD*RtK$cG2-(M<*;Lpji
%-e%M&@#BZ^F!I?J9a)j[j@G*hCV2*WVKa)&oZBg4Lif]<HS2D!*%q(c)&LOc*"A7XV=jql3.lf?b>F6.ig,,OLsS7DB_H-&"n.5L
%%t9loOZ*20;.+R8I"t]bMnl=6p"Mo6hd%+:i=J\hak<ak$:^#.24@<3$/S0"iKRXF38KQ<Vuc1.ImV%'%TA`;JSI[(h,LRaVK;<L
%p864fM>%D%qc"Q$%+LeP1=Fm2.,;<:A>QCKo9&,9F_-uQ&(VBB"kt;`)CMgD9-M/UaE>7i0PFfh.;MQX%T<o]1(K\LasMpkAlDmL
%.5a(SdQH;uhI%<A<7L)kIaVus1[##cWdJO3MP27BR[Qs(Td(pg-Yb^5#W&AVDjuV(2dI?6D(9RJ9/-%mVBTYC[qNHI'fiIkSmK?&
%7Eui"hfi-B3A4ii<KZU$F6KX',"JmuRQbCuaEah-j.JjNGuX*cgSQ)`)esOp<M^USNk%nk;imdI[10f3($+SU7/$RJ59BV;enoP+
%5E;PF:$(-,+28YP-aa+b\A(deH%]0p.0k:s"cDiq+u!_@4k1m0SAsb0qA&@KZ8He7LbKMt.qIq62=79mM8d0)0>c6=TJA[o7GY==
%Z/G&Q8*!C8">oc-(;1BS*(jMD;iugsH"aW[N?qe\be?pllFR$"g9j\X(nfC"YI8,jJC]n]U1OMW>T.a>.ZR?IVMlHT4.tAq2W\7u
%M3QQD<.KM)+0*AT.g4RQ0c_R*MDAk4JbC6eO+:uAGQ4D4N3Lba6i0Dc-D6I,kpWNt"-i%c^Zn:>2V7:b5p\"SUea@TC5oU']'U3;
%`1".c"uWlp1lsVlgSWj3PZ<.>l%*@/jsVq6`IPsd$rtFMRSQ9eXfCOi4"=<e4rP'i_2uSLi)F.f;NgQ=fc=d.`;grH.o'dC^Ss:"
%e28$?U1B=hg/S+OToB<<]cIe[B+LqC9fD+IZiiGTE8+\"!+gMbZaU!$/U.),4=WbOBrQ]$]KQ=Q.G;lJh^AI>4Ep061OrZ5p[RML
%W8%3H]o<Tgbs_JS7"P,R-/!anf,!16m$P^=)4mO_:H+Ah;8]2g2]b46I)\Mb$<?udou.38F*5\]4>!7.BH"7k566pGK;ndh6PWG$
%%hdnkCCfscCJDE(NWH7GfHT?+)Z-)>PrgDYX5>OHK[F!DM_+.,e<6qROi:dW_H:4>'Su0m2;1[]Rpi,;moU9O=l`&K//68@,fP#o
%lWYYG2S%RH-!rJ02;?LQn4B;\b*.#']od=U=2#.rn#7cQ<%kuP)BsZ9baZ&R;$;f9hmDM<G-U)_FoQNof`h&OfG)/o%->$FC5`2T
%lLNT0)NeEg+.N*edM%WKC$;P$IjKFB*>%Rkm9Hlk`V,X]jTt8KMPp`-9t=u1J]_!8FOF.1'5C^N.II4Z>7-jO+4Vl%N"$`p!,+cW
%L@DHUD<t0%TLEco6T\&f?IT3"e"L.@nWO=OQO`*&V(eN">?GLNVKoaSXZ9oinjC;gD=n7(:4#^I.DI>+o]b"Mj:o#1-S8.O'9"fJ
%>UjhMcQX\kl`m;APi$6gVB]I5Yonh1r_<$3!TF`ih>[]U]ef9=5Chbk9<K?Q.YXVE_\Se(j[gB19N7YeC1Z2:%)T9K`?jmV^"_.$
%2G,I)pCPm29A2ff^(`=:kY"o6B\%Hq(A>L,lj?l=X3.ETJ!7>k:d8O0htq>rjq+/hre%3"?Q,-uBhM#B<@N/VDc,>A.a5\9T3Q=A
%;J-8;1+%/!.gW,J/d?@]9Kd;B/]2ir:sBR!W%JZA"NV=9:r"fI&?a<3PR+>Z7'4`ZW"YRELuKS:&?RGg_-#lpk!*G?+5d=oltBKX
%iF`-(3`"^DcE;^KMV@ZG:^jC?!gFY26@_(CK;l[TK2kdos(S3<0iOu$3GfD/oEPMP1\O9%GA\J1(3ma$au,Ok"&=VTCkht*0[?j+
%%9BcQ?*sFci7hfqE]fgR>itp&s)ISNI(HnPLYCP-""drLYuPFQ1Z!K.>6DWJFuOc?3+mU$C9tC,9cU]/#A(S9cNY>#?5lBD,Mio,
%6Z9=rI\*tCD,E40MgU#/rXRJ9Xg"o&A@&ep:B2e+)?H,6R&eKt'`F*pk.q$Sk(1BI:fg9T6\tBhIdNf1n&BtMk4LYM-+P9_*Io<8
%P"D<f[I68ON7TsM:7]*o'!8T?&j$,XOR\27iF]%:YucRXGp@C=L5FK1ZO&b:BHeo@)S%`UVAi&?0)IYi#pW)fJgu4;[QF*SaYcd1
%IV?m;qhc^_ZR./;E8,M?ZU@_/URA*764H9fF7/KQ\Gtjd-(E(V"rF;A:@I">_bI//$-#Eba"_i.OEn@[p:g5!bM7WgjoI-?.1g:(
%*N:Qs&-q*G1NkF22L(A%I;AZ28]6"PPRWA2(N6f%CRa.Ie[LJj]@P4lS[jR"Wj665+Y5C?0o*D(jni#`?E#E(JuZ,te-Pf0QP_tV
%pT+X&9n]6j%UJ0H_>dS/=6X.9"&=j=d8_[.cIYWhBqB,!q6kopi)Z=qqYs&!e/;fGTeGWI*i0I)STM:[Y0ehV=#p!i;=_T-qH8ci
%YZ6<OeLMs703?.^1K&S.N2up)0Z8J8+=8c6Vr+iRP.&.T>nJ%bEYqkJ70B9;a-OaHH:(8PEBl[S5LL-tj^UN-7`r/k)=!Z9<d0K0
%+CB:"rC!(n=sO82mY#gOX1lq&d"2M9Zq"bM+"fY6@AD>kM*'/b'Qb<YQs,"V1?C5FoO10c(K]C8+/+`@Gee^t7hDpU`nbPI(?i+A
%gE'W.gL;"k?*%!!@&-J2BUFD)N:mAYO03/Qk"Q5Q"0t\;4OF>9Ta1(kT7UY421.JO21,NDD?OXJ7g*.4[.lu"'N%auU9X?Ab2nRY
%F_sD590Ci&BpDkJlZ4]Hfl%i:p(.X.+NL!O](HE_1J*TSBL-THCMEq0$`sDGXs#q2LSh8W9e_T$Bf8VjMj=S.r9[b[SQc:s"gUJD
%Aeue<T.I!1CN5^^S"hg!D#?!0Cb=br?s2bql0?Loqjd-(2p[g$#qUq%NB-5lCo0+:)CMg<VD1qhd)cLk-l3-BF1)BV`^DuOHLGTY
%Rb'a)daMH/X`uWqn(F%)_k`%O0Uf.]Y,*2ZP3Ad5]u]s)'o/@V-pUC&rtqE5UXWc;2%1mmOnV]6.5X4,:3m&`o'u>`AT#cD8^Put
%W#4OESt6JT3GH7(\aX.+7.!@q\>4ZsWdX&ZJPhL^<^?'KQp?nu?UV`k%OdLl9%OB^ed806,`$1C(!QifYHjEi5WPW:8HVjcq?1"l
%RKM!aTIDB9j2Q=LT1/TS<NF377N..oKrY^GU+Q--/.ft&35_%:KoHK*1]d;D-"9;KRXQVom70hCWUF+S)E\JVmJEtk!H0Be=*'sQ
%G:H<NJMqj,_C>u>/AP2i:dsP`mos_b[j.I$<L>'sAg-mpNb=mZPK-NhQX-^lL`b(&[uO67$5;c_+NZS^,7MMmkK1M)\%-*;&Wc=E
%_\!m*K\:=[r_ZmW7:=#QcM$r1quuh-S0f>k_LBTQ\j)YL5tr2*GV!ChX.&MoE.t0-%VTaPFbPQ-I=Uqc=*]MNe_nmI:Jd0;acNc8
%lGs`]Ol>6Bi@U(Wo^F*lMW.'L*+iSZTK0f&gnNr%o6lmE?RY$Y@lh:VO`D>k\*'^t*=.F-<JA1m3EKYNSXp_NSPF@drVC9j>k.dG
%EphB5)hD<WmN+I/&gF_=B$dPZ!a*%jiA\GJ#$4>;.N[%h&Zg9,.hTjJHmY[$M;r,.oLc2[mmA=RRjOhlLZSqiV2Ir1WI82#c/>11
%a-Ql[9_W9J<`fGn/8?K(Ef96F[1^p:s)M*i0iL"dKj'=(XCY6ZSP-\8_k;[YO79/L!h/''[F6V!A^(bSpn:[hWl?6`<p:gc-a+sP
%*t[Z#C=t,&cro2(U2qfL(hD:b9\Ye(pp;q<mnji4p6=lkCQ02Fg<cX_:'jp7A>*7N8fAXO4g6l9&ghpG@lXsgdRClomVU<7O8Oc*
%$#$!>fi0CLjB%V06A+(0<([@TUeiKh<9p8V@^/"K&jo#&.L6iE'$&F7#AsmFMb;lP0G/B#qn51M-p=]05)E*.;su1\WK<0fI?L:&
%T;;KN,R!d3Rf1_rR6E&il8SudL$=eO;Z?+V8Q_CoX.F1nP:kR0kIuPgHJbce-mK9iB;\L6rU`4c.?r-Bmp*O7V94nQVG@9YH9:>S
%Ehr-+m.Er7Jn.\[oLTkPhR2'eZ/$b=W>eW^9L>(M=Og!E@<#f!R6'RVrEZK!Zo0An6*\A>f-[3G!gh*):!0-jbjD&taq9oiL2P_@
%Melbh=^Q-oU8-+G-fhI&S+M$MqH@f?0@D20W"u)e^WKar=$q8I&(&=OhSJTprQaAu`sC)O#>1.';!F4Cp(8L3iLOn?-+sbpBRC=:
%q2%7qQa9!kgGObo1pFUa!N',gJF$N!*>VCE4H4pFW7mf]Oc\"ORP'7Kcl/-!B_`D^Z(c^6Y_oKf&`!n"JPqHmrS.i3SWSbL9S/T4
%?F?E.5V(-mIR-E\m,E:Yq`mppYV^HP0gDS5S1=g?"_AHWR.eORiF$-o"FA;CM?>kU!G*1>q:iPq0eaWJN$q-*fN+!'a(kt&1fBgA
%lh'eO(bZgi&*i%MN6<?AM)M!N2c?e@@H:88&JA\0V5A6+/67C@VdpbiH=J`rO5X:al#U>&J0"eY[9+1_g@AX%Yf!@l=rT56j>8J=
%k2FN(;E$a*`/Gfn!hpo2OTR1o4G#W$3-+4t^<69f4I:*/QQF90f0D0aA.o#f2i2%*E7Lr^RDXJ!FGMjSH5X;W\G/NhIo8,m<3_Gj
%1qg<n2Fh`#cdk^4<Do\.Hf^,-6MC;>nb1Lu[UQ3^^6N3(hm\D%-qVS0qUE=S9sLqp'MtQ!L12IZ!N'&K^8lf#?)SLe8_lWER;^l#
%YX!GiW(q[?&C<GO++sf,,VVhO$06'k0JkQknNI1WGAtr(dI\iU9]Ae"LARPu\O&$<L<f`OQ4KJLf:()6Ou)=uN7J0uTT+nX,Q61K
%q:S9+KL3jK_>C_)GV!V;1W:*38ZY*?N*A"4W?0XOUB9jM(-WmrNe.[Z-aN<n/UP_S9i%GgSur90d`,gLjkPh+Qf`(,lk_ZkoTAJ:
%8cSrc8;HpSYg+O`\+^W95uR#ss1WN9n*@Oa9@*S$(\,61qMtK]T);sf^&l="rcOk25G.C_UXYRX<@Aar&WC$b8TeO35o7?nTV?T-
%2M->$+&U5?.7s80T&Ho#H#Cl<F29BQZ%a.=+uQN0C:JZ'eF9!GF)(JdJ&[9MkWshs>,eGD+tNj+B6i<;5LkOX6gRn<#a<r3DS8Qi
%^:e@Y,JA2:`P[Q'eL6PX"_lWq0Ne!R0$7T\1;*2Y+*M&AkXZ6]o[i;m_<[E_2*!;>nu.\g5tr,gXaX96rF.]Y3B6%Nos#an@C$@J
%nIs^,?;?!Rc#Q_]WU,LGdl0IIBS'gbOBk#=6jb')0o8lX#s;dl@LCmjn39fG%Pi,AgBkZV'E!GGlqt;EH.BAHGI`8prRR<QU@FJO
%Q5L8UMXNk?XUUkQ:OBHEcQHcCVamRJW?^_-%d0qTk%JT.)n9Yj3<!)EU5T]OO%hWH4,O-JBM;(dp0EH>R-nr_'-:HU6tr3pB^2ok
%p\BgNn`4=iLK&C,_r+"IA:S+j^G?D2"S0Z1,G"!X<7u!<A^D!A4>u2I[TiXAX3;I,:?g,r\V"rZ*kM^Mhl.*m].hVjBB)21V0+d$
%mC8)d+J8@-L)X<qZ[%#<O&!B)o=Qc4MJ.<EShglP/d2HU(Enk2-nd;-*SGqret)(S"@eAWkA2#!00f=p9A=#=$=bJOUHNU9V`XOJ
%U&3[L]8kXsR57#5]Z[-3O8%=fo&bTm*f+7<T:EOa&8]P!,7;n`S.=YOZ9=J.Yn!`Rb<n\.(h_,_j2fOaE08!40Xp*@L-HqnZlsm:
%Nk$gd@7>&2;WXi>Jg,G&BN(T3X^i%Fh]A#l0nLR;o;?/5(s2*TTl?[KZ0#Ui7!L:a`#lIcOUX>m^E)O^f=IZ!NlA*8da2.A;qp2H
%H9('6@.M2*4:IlHmHXt6T@h.go@*rgDg/--a)@EqP"qp"+SYie?k?/$4;nfFYdXFNe7t?5WN$Jq]!'.d!B:*Y6O#;;=hZ^mj;h4a
%;Z0j3rBt69.YCC8Hj9CdEW$*;P@,)@c:S!8X(R;8_1B$YC8?R17#k\DJh6MhYN2B3b2;TG[)F3Ja13D/gI=T.'WbH!LSp`oCGcJj
%OGfhse=cJNC?b?04#A0oW>>2R$qEZ=5aPXHm%F+V2gC3SlcJq&1+0n*%dU$NEo542h>.[A/Iddh%4o)o"K9ceFX&*U6uQ6f.7%GD
%K2jtfOAtTk1<@&'m,(rqnXU(&2oa6t2A@ci`pq6'D5d*Z653XCS"2)#DXBgX)[sWGZr&a0?:4I!OdVsme4#dmZ!O/VY^=lt&#GP>
%\B7`_+*'pG<%*A:dMT,,2&$Elos3_1E8hF5%&qlLXtcp!/)kF<;5nu0UF972csQrR=Ebq69M\;8d,qBnj`JU$m]#.6T5?0FNs#X<
%krpT)cZ:V;P#<i@KN]D@lAaq%%Fk)_9Yt+$4X=A=HRe--EO3cS#,R?cp3CN`309XHel(9rp!rI=53Ob^Ye5:G&^Ep1\?E`Lj>LP>
%TcIYj%Us7u=)bSZm'^iuTQ?r1YfWe5Z[JWM&Y*g"+BQ4,Kq*r:'#_hYkH7EAZ(hIjQ)Uf3(_?JqP15\T6`b;I@FCm=IutDthkC@L
%Ii=GZA>HFHUT7!!aG0e_m&9!e<)5?o"Hn+"$j\/p0K["dZo6_m.eL)Pp.K8$Fh9t&,P1JBE[oTE_hc*FM#i7)3j.d)&=T/92_WKh
%C7()7A/os;=_sFG[SJ>b?=%o1G]U]hDlF+Z4Vep(W!j'MU9A`*I>AXN8H,N^+C-&Sn8DmrW/&QDmp'j>&XR#BS!:).6]bl#/IYe$
%)s2u^PAKr71O+j8/lVpPO&.6=T_iQo?0u=aB_`\V<U(r#1IHtk/n?tS>s->4X.jbenIE]3Z[@hQDEm;hmp#1Wkh]\%"gH<CU^%@;
%AX'>6-lSu!ZE1HW;L\h^8q5HT6eIQ0&\P+_.j_uiR8;,<n_,#=,<26?5Qm&YnRrXZBh^o>NGardfL/3F;1n;qau!bLTjIJ1q#7&r
%.`K!?@G?/3_c'<uNK'^/klkM44Wme_n1!9Bn/gI1;FB<qH3V=,Z'Sj^j4Nn%;c?k`p?1-l.G5R?ZF4C10^+?&A;hEhCrk^6g:5B%
%%>tK&@%PcUH(2#K\/jiZqBEa/Ed_uT?<["%B%B"f#Ukr)38?kc#]QHQ2V1[U#K@,X#6B:9msXM]a?I#/74<Yk_bM)M@0lA<+>^V!
%Cr.5R`6q*a;]+F9gH/IUk"END;VBVi9uC8DjEZ@&AM<7m`[Y[>adDk;aRlX#^8FZF;*4*KIZ`k2k_%a];KN/#pBZ)5_gMd8eXlJ$
%S_&Ed#DkmJj4hLckc7O0=W8U2kA`0*nSRp9^88Dd9fZ2>XpomQpl=Zdnog05,f((B#A:Xg?_^Ff6t0,j1U,cPOpi/f*#RB?&W%']
%+lijAAR&bc\O*MV>k9b"%;7R7(kD-BGF):!"\hV!SR0h/aU!itGC#$(mhunA0^A6Dnm0-o5q<DoDI.Y?U8=B=)q6:m-&WK#?oo`_
%S)!u6#l=ZVW-<P&'1k5K6o;-+P2Cbs-T=/q^nlpOFGq0B3Ntp46l8;8K*e7P2m[Xk9+OK*q?)_8%43PbB*Su3`=Y0^(CbQl[(C"&
%]=V^BJmb6R]XWK"4b-.>()fppN^a"k,jA&BqT(Z"k`Vt@Xs(%igima:N2B19KDSEIAj5e'0cYATWh"\m`sfrBQi2!DRk%d07PJWg
%At87Ge=RD*=tbVYK9fC6odsn+J93an^=1BuRAQed#R92;F'$+8-%T==1^L4c`D7se*(dI!3oP[B<MqUb'me@4ktW+qU8]B]+p6$k
%kud$e>\/#*Ju5Yc,WUO(_eG$K;SnC+e1gK`HD!"(>S#XiGSr.@c-h1o$Sp#T*QNF?QfhD>,MbO(46%u@aTXo+mMmU,L;j"b-B.4e
%4MV2PE[u>r]Hn/lB%];]9QKlEB%T6;gjp=Y[XFeG<;OLA@g_DCVTPl?>9>`_CXN>-e@DiaPM<f`p8&"Nh^Hbj+`'B=QIo9^*=>q+
%Vf8VuZY*nIH8hb2:h7ObBFK8bMd:D<>&-%1N2rTFaE%U'5.M^bG:[$8Vo)*de#GXpWj<\iWTrh]TT)I=de_=0r=ZQqp4g6A\HANo
%3`bWIqI)@9,M<[$O7F.6)Q:P1d)Im+d<_FoI4;)B:hG,-cP=B,dA9dbp8&jWXXi@>_pugJ;S@bd*h[Y)=**adn+e89$2Ua,jgfs\
%c?AA.ZnHisDZ9s4kAL=nqd9B'S:\GZ>M\[Rj<$.N!lBQ)d]VTR.lV2"i>Rbm0(*tEs7s-B[1YLI^DAUFMYZ='BQ0nCH!=oG7`L?\
%!>Y6:nqPBA#;:]b(Z7KtVbUO$[ST1s$UpEDT7`_hnLL5?&CiZ%l`3>$0@h8gao.(ejdF];3,mBNPat5Qgi=7s00$U_S1GkdkR%i7
%ear9saFbV0i(,kPeS53nl9f7ucsG@4A6S0i^!Cc/PMh[(RC-jno4/C7ooBj.M35,CV5>51H`3\LEk?/k?(@X3Qf69'2f(7!fc)i;
%5PKn,i\,Yr[YHD\_^WXX^#9@m#,kZ#A"re"g)F?]94%@I^I97Y\RXaX5@\Wa,lZo^E%1<1pP-jsjJfi/7/j*TaM6FJ2OV<r+r>UD
%[YOd^H\;7;fRo$<oe7Aj'oX8aC)[=TCul7J,_*>Ho6#9PK&%Rn&F%O"Gkej3r$1S=V*+%VHF5i1YLA]pTAI61HZ.^[gfl(tJg)_r
%607;enq)E'.i;]>3>`SaobFn\hKFV`NKl!Wr#kJ/R74IsIQ4HJ+O"r`Um&1HQf+2-M;@.W3;;+\KNo-$h!e#=Q!p%ZI3*BF-MXfs
%4$E+)IL.XK?aklqaOq&Lc2<t+nKIfjSj$J'9>B7&+u!X)1BSe@LZjf)OT!uudpEk9Ch(OjKq$+E^HW"5%?,NF,dsP`_Ho[c="2ig
%*V6AM0.cYAX(_B!MmiVnL%^\In(0&CG(.@TpaJ02(:Z?bH$*38HT0a_E,K3]"N:agfGMe!^A(aVOmUM]OAkr\Q;f`T2od&,"l7TG
%*s9FJ$meNpTS)R>'4%q-[Hld^%WN-"4,FF'09@Q26uDE]%)3/HnDcssO%N#g']bleCs<Xm9b#[09:j2B+.k;oU:j:hnM<nhi!UUq
%i*;q<=)TDi<JQ`P?uT2$K@h,2k,geaA7f:2_0mK`jSr.&X!-9?qG!"56,S^KEtpJ5HPQ4(!Tmci5p%H(mM*5)glU+'O>A,e?o+[+
%0U3qFeT=n(A?b13r.b3o1?>ADASWWYHiqF\TjdEa>]d?6VJCKCN$W&VSR@H"NlDMFK]df>aU#9S3sH4b`HXIWp3n`45Wh\#F39(@
%c-?Hr6(iQ`ppT.XN&Qk!UE@KkP:;de0ESOHQnBQU,m^J]5(grE9aBXb>c^4O!p28!5QNatc@rs$f/i]l_V25E^,kcsR4rli9Gj-$
%%>D,$XQj@_Asd2H4@sS5A@+r3GbAVM.e489WX_knSjT.''KA$[Uu$+TAZ.^UMQf.]_bd-2'o8FX!gKWLs"Ik.ej-]<XXR5&>XD;"
%-N)>$#r2KP"!_d=+UsD+EW#UY<8\7BR9QLV=D(Mn3fq62DtLrPYPrk0SqX]XEjZ=.&")58W,]!a.6Mu.iK]mD_0?OLqd,*^`&[MC
%8hfq-K+B:*8;?,@``8OOPmd!(H`<baQroo^UE2nM0[/B;K82^EQ=8kJ*hVD0HF8bgaXCk%9'_16_?aYHqB(eq"G"P@L"@_b*aD)P
%?g]7]CA3M")Zd7(g)qc>1=7H&%SS!W:^$41K#%8H!2L!Q#2elnRLZF`Ds0/a4_sEC!<oN"R(PT9";01<@$(m;5c5.'!'PJ>FR;>\
%Y,Qd7neq(*=R.30X-Ni=DHAEoBkJ@tXgoRs8Ykas3ohN[ki`0Om/57./&M:5GLaguSaA+8[g!YYo4__?jO403R"6<sV\L@>$3Of5
%'bU8$'uc'Rg^@Zo+*QR5)rMq@-\F#N@l6H?R@0^$85Ng<@SL1$&hnY?6kC,ODUK[Mf1(aKfRY:Ca/_=F?hMQ-+89?_dEZ6BIV)a'
%4R]k:Y6LGc*@)<;r(PY@n'&9R@$ck<dh*Nf"9!q0-I,`ADDjns&>ASZlRh@Cjbm[1]%>&b3.c%WC((s]K>-m1BCLcf@EU'Ogb^'E
%940RG9;O<]Bh:#E9qgM1ei]H"R8HioC:I.IaBYI@lOBn:7C^5Z6L+jkSV@@$.[5'>:<3A..Z0-+Y5S4U#)sW&\pcV3Q3<chd^++p
%0j:+!l/:H-hMaVQS%5Jl?GY.D6tes0gEKH/R:HjSK6M?TK$CaG0MbbqTJ8KG+*rPH@`]15m4'8QKTVL*D]W5-ZLR7)FBSjtHa0"R
%DhjZ.EP_$77MekPp86_9:FJJa>#HHqLG34Z;sJ](GeCl6H?^NoPb@3<:dJ_-,3c5t!@<]3lI3fN8<)>,3C'n^3a'FkE?$BiEh+64
%PgVk[5R]R0SSQ>l(I1HJhrI1l'l"<<+*?1[XU>V#3U(a0,K+QufG+^[]3K/$`L50E!elITB0Vr=]ENPcZ5,%"dHD7*m)Eb8D4+HI
%#cQ>*"j'\5e<;L^ndOkLjI'WBpfI>h-e_aGAIS!4"`&2Dgle[J/PD!P*..D8,"K"dm_7+:47ojs[**-5Z:[p7l`a@lF%X('`Sn@\
%h'<O;1AW\/WkG;`e#L8X\F([cKml).dL(TV\spt[AkmJ-klJ?Tii%KUAm7Y)Kbel*%8_k9,q0rI#g:X"<8qeH"2Y(U0+!0gG.NJ<
%5]/5W5T%r?,(N-d8&?bf7,nKJ&4oG5XpJ)O3Mc-p7-+_Z\W0?@N^9b@V'T[a."jljY)pdcfh_.uX>:>E]o/+h<c!H!l"F8HUQ7Li
%=ZW!/'(Q[dE>Z.;Qq;UUi8V"F2`4:r:+iP,(Gd(K&Oo[07-BS_bj03[ak:8>B!EHj`YW,?KrWmhgaKN[allFGhe]CXA(fg6>A)P'
%nr:G%`0P$"&6Rk_DRK[._JfZmER$dO>Y6QrCY*l5>+6`T2W>G(6>_>bAp1/fN]"$uAWm:DlGT7)%H3BSPd],KdF5D['P!?XG(7"2
%KfEWQL!oBFh6\cC+_eFk/S0e^9`&S(6enC/,$3g=Om:T0G(`DfG3CU#EX^:\<QKNsR*:$"XoQ#E)]e8dA,C/P<D#H'*G91WR*E8-
%J1V.eI%*"Gf4%or(8P5LLC&cbEh0&Z9!NcPR>`.&HE>qUa(F^^l[n;N[]UVl/l$0j-tVtX(]fb>F^)0=X\o8hQ8ZM4b5ae=-R__[
%RLd`<DNb$Ohk+'sn?fa'?6EY-n_D?-*HuOu!4>S[iC3_qQob\mi#'+-/0Ioskm!c+G!Gc-)G"-`DuO02OKPRRb48\:<R[8_"t\kQ
%+Kj'H&!rgMaq`J/%7.jgO913`1sdfdaESj"s&-ea_[ZTOgs/0##84G@"(aNmEi^(8!&qZEs'/g8qON"fiU18+Z1HJT<jg7@hGX.Z
%SQ#%DB/#-W@HiONft(r"[8WE^XP]?G\)HQWg^s;`@WqWFQB>L9Xi(s^M$%D%`(bGLY4EW\2fp"^:Jpd>1-JhC=.F7T8$Ae="NNJ=
%fcL8ccta4q`,XpSZl4ZUY@#+KF3TX"\c<Z[?YcX=qE<'&2bYqF\cgX&:C7<MT>2DHg+re`N":_8!FgZc\QOa(hm"i@/AQ!RA1AtQ
%T[kO]I(?*`TX7qoYKBYKeO"?Kf"O9",iO$JB=41NWH!^@jTM#!$stb[<?P;l/:pkkq[>0WN(WWj5[]c^2UrR#W!5!V5QMfi"LkcF
%At6F+I7"87^gYCi.t+:Kk:LnoR=FCj].DKWVZUY^L\7d8>HJTbCmN;k7a4mN9lIN4J3MlB;_<6u&Q;;77Ll/HlSaA"\=Ze&(W8.C
%\CQ!-O'1cG6g"SYSNj0RAZd[TSaq0nAc0M>(@:CA63[R$8n"r334nGm#J.$i`A0fs]sPqD&*t'-2?!GFVS:o:7SX>cjWW<38]_O_
%>=R8jb?C>9+4sem:5UXR[VS]uqs[$D"hP$*Da&XJj.Ch2Gcm>gB[PNd&#.h1]B<"7q9<jXpt[lYqYg7kNt'_:bE!1rUt=;ul]9qP
%s5Pmkgcae,k;]?eR\O5k)Wlh,2@YX<8m(1<hF$a=n6g'(n+U(7*SHmW.m046HEM%b9\cLbSE4&k^_/^M9PZ'bb-t`kP7Ql\p*-U%
%aRnM(;9'L)>ob,S6g7F&LqcmggcCs`\uTujOa1L;LrZC.51He"Zl8T>F>L:",iONPIR+J^r.hrecckphlEWEWcP-K;k9JD#\Igf7
%bMaAqEqg0i,k:;ScUX),J=FRbR38sb!0,b>TG2R*`jS.Oi;cq9m.#g^e0oQj=E*gF8<*t0OcX#@S#lqVU7*sZ0*4[@G;N,P4ig)s
%4d.,e"#Vf;+WIf>AtiM;_<"PF[NT6&R5.5B]Y!Hpo;g/sSH4sW\HY2nGaG9lSk`L[:]-Rpp`bo_GC2L,3DN4!&$+dlD,rWhkL(F&
%OC&:!7R\TZ^oB'*93rqQO$*DY*f_[R"m&3j/6J<YBKT=tTAoCl0:CN.XN%Iq'.f0@bZkag\^ibE'5jIuDblXHprOK?_uGr)qEOs\
%rcd%J*kqT&hgPOeN<$`hmC.T?mXK`dm2ncWrq]]Gpu0uBIWt\_:Og70rpJ,'e*R\'J+pjAs7Q>7[ibV@^]#kt,ao$go:'[tje%&$
%X8`]n[]e<~>
%AI9_PrivateDataEnd
